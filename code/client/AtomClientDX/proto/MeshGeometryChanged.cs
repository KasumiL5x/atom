// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshes/MeshGeometryChanged.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Meshes {

  /// <summary>Holder for reflection information generated from meshes/MeshGeometryChanged.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MeshGeometryChangedReflection {

    #region Descriptor
    /// <summary>File descriptor for meshes/MeshGeometryChanged.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeshGeometryChangedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBtZXNoZXMvTWVzaEdlb21ldHJ5Q2hhbmdlZC5wcm90bxIRYXRvbS5wcm90",
            "by5tZXNoZXMaDFZlcnRleC5wcm90byJiChNNZXNoR2VvbWV0cnlDaGFuZ2Vk",
            "EhAKCE1lc2hOYW1lGAEgASgJEiQKCFZlcnRpY2VzGAIgAygLMhIuYXRvbS5w",
            "cm90by5WZXJ0ZXgSEwoHSW5kaWNlcxgDIAMoBUICEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.VertexReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Meshes.MeshGeometryChanged), global::Atom.Proto.Meshes.MeshGeometryChanged.Parser, new[]{ "MeshName", "Vertices", "Indices" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// *
  ///  Sent when a destructive modification is made to a mesh,
  ///  such that the vertex or index count is not the same.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MeshGeometryChanged : pb::IMessage<MeshGeometryChanged> {
    private static readonly pb::MessageParser<MeshGeometryChanged> _parser = new pb::MessageParser<MeshGeometryChanged>(() => new MeshGeometryChanged());
    public static pb::MessageParser<MeshGeometryChanged> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Meshes.MeshGeometryChangedReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MeshGeometryChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MeshGeometryChanged(MeshGeometryChanged other) : this() {
      meshName_ = other.meshName_;
      vertices_ = other.vertices_.Clone();
      indices_ = other.indices_.Clone();
    }

    public MeshGeometryChanged Clone() {
      return new MeshGeometryChanged(this);
    }

    /// <summary>Field number for the "MeshName" field.</summary>
    public const int MeshNameFieldNumber = 1;
    private string meshName_ = "";
    /// <summary>
    /// *&lt; Name of the mesh that changed. 
    /// </summary>
    public string MeshName {
      get { return meshName_; }
      set {
        meshName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Vertices" field.</summary>
    public const int VerticesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Atom.Proto.Vertex> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(18, global::Atom.Proto.Vertex.Parser);
    private readonly pbc::RepeatedField<global::Atom.Proto.Vertex> vertices_ = new pbc::RepeatedField<global::Atom.Proto.Vertex>();
    /// <summary>
    /// *&lt; List of new vertices. 
    /// </summary>
    public pbc::RepeatedField<global::Atom.Proto.Vertex> Vertices {
      get { return vertices_; }
    }

    /// <summary>Field number for the "Indices" field.</summary>
    public const int IndicesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_indices_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> indices_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// *&lt; List of new indices. 
    /// </summary>
    public pbc::RepeatedField<int> Indices {
      get { return indices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as MeshGeometryChanged);
    }

    public bool Equals(MeshGeometryChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeshName != other.MeshName) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      if(!indices_.Equals(other.indices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MeshName.Length != 0) hash ^= MeshName.GetHashCode();
      hash ^= vertices_.GetHashCode();
      hash ^= indices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MeshName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeshName);
      }
      vertices_.WriteTo(output, _repeated_vertices_codec);
      indices_.WriteTo(output, _repeated_indices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MeshName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshName);
      }
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      size += indices_.CalculateSize(_repeated_indices_codec);
      return size;
    }

    public void MergeFrom(MeshGeometryChanged other) {
      if (other == null) {
        return;
      }
      if (other.MeshName.Length != 0) {
        MeshName = other.MeshName;
      }
      vertices_.Add(other.vertices_);
      indices_.Add(other.indices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MeshName = input.ReadString();
            break;
          }
          case 18: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
          case 26:
          case 24: {
            indices_.AddEntriesFrom(input, _repeated_indices_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
