// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/Material.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Materials {

  /// <summary>Holder for reflection information generated from materials/Material.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MaterialReflection {

    #region Descriptor
    /// <summary>File descriptor for materials/Material.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MaterialReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhtYXRlcmlhbHMvTWF0ZXJpYWwucHJvdG8SFGF0b20ucHJvdG8ubWF0ZXJp",
            "YWxzGhxtYXRlcmlhbHMvTWF0ZXJpYWxUeXBlLnByb3RvGhdtYXRlcmlhbHMv",
            "TGFtYmVydC5wcm90bxoVbWF0ZXJpYWxzL1Bob25nLnByb3RvGhZtYXRlcmlh",
            "bHMvUGhvbmdFLnByb3RvGhVtYXRlcmlhbHMvQmxpbm4ucHJvdG8aG21hdGVy",
            "aWFscy9Bbmlzb3Ryb3BpYy5wcm90byLKAgoITWF0ZXJpYWwSDAoETmFtZRgB",
            "IAEoCRIwCgRUeXBlGAIgASgOMiIuYXRvbS5wcm90by5tYXRlcmlhbHMuTWF0",
            "ZXJpYWxUeXBlEjAKB0xhbWJlcnQYAyABKAsyHS5hdG9tLnByb3RvLm1hdGVy",
            "aWFscy5MYW1iZXJ0SAASLAoFUGhvbmcYBCABKAsyGy5hdG9tLnByb3RvLm1h",
            "dGVyaWFscy5QaG9uZ0gAEi4KBlBob25nZRgFIAEoCzIcLmF0b20ucHJvdG8u",
            "bWF0ZXJpYWxzLlBob25nRUgAEiwKBUJsaW5uGAYgASgLMhsuYXRvbS5wcm90",
            "by5tYXRlcmlhbHMuQmxpbm5IABI4CgtBbmlzb3Ryb3BpYxgHIAEoCzIhLmF0",
            "b20ucHJvdG8ubWF0ZXJpYWxzLkFuaXNvdHJvcGljSABCBgoERGF0YWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.Materials.MaterialTypeReflection.Descriptor, global::Atom.Proto.Materials.LambertReflection.Descriptor, global::Atom.Proto.Materials.PhongReflection.Descriptor, global::Atom.Proto.Materials.PhongEReflection.Descriptor, global::Atom.Proto.Materials.BlinnReflection.Descriptor, global::Atom.Proto.Materials.AnisotropicReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Materials.Material), global::Atom.Proto.Materials.Material.Parser, new[]{ "Name", "Type", "Lambert", "Phong", "Phonge", "Blinn", "Anisotropic" }, new[]{ "Data" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Materials.MaterialReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Material(Material other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      switch (other.DataCase) {
        case DataOneofCase.Lambert:
          Lambert = other.Lambert.Clone();
          break;
        case DataOneofCase.Phong:
          Phong = other.Phong.Clone();
          break;
        case DataOneofCase.Phonge:
          Phonge = other.Phonge.Clone();
          break;
        case DataOneofCase.Blinn:
          Blinn = other.Blinn.Clone();
          break;
        case DataOneofCase.Anisotropic:
          Anisotropic = other.Anisotropic.Clone();
          break;
      }

    }

    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Atom.Proto.Materials.MaterialType type_ = global::Atom.Proto.Materials.MaterialType.kMaterialTypeLambert;
    public global::Atom.Proto.Materials.MaterialType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Lambert" field.</summary>
    public const int LambertFieldNumber = 3;
    public global::Atom.Proto.Materials.Lambert Lambert {
      get { return dataCase_ == DataOneofCase.Lambert ? (global::Atom.Proto.Materials.Lambert) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Lambert;
      }
    }

    /// <summary>Field number for the "Phong" field.</summary>
    public const int PhongFieldNumber = 4;
    public global::Atom.Proto.Materials.Phong Phong {
      get { return dataCase_ == DataOneofCase.Phong ? (global::Atom.Proto.Materials.Phong) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Phong;
      }
    }

    /// <summary>Field number for the "Phonge" field.</summary>
    public const int PhongeFieldNumber = 5;
    public global::Atom.Proto.Materials.PhongE Phonge {
      get { return dataCase_ == DataOneofCase.Phonge ? (global::Atom.Proto.Materials.PhongE) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Phonge;
      }
    }

    /// <summary>Field number for the "Blinn" field.</summary>
    public const int BlinnFieldNumber = 6;
    public global::Atom.Proto.Materials.Blinn Blinn {
      get { return dataCase_ == DataOneofCase.Blinn ? (global::Atom.Proto.Materials.Blinn) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Blinn;
      }
    }

    /// <summary>Field number for the "Anisotropic" field.</summary>
    public const int AnisotropicFieldNumber = 7;
    public global::Atom.Proto.Materials.Anisotropic Anisotropic {
      get { return dataCase_ == DataOneofCase.Anisotropic ? (global::Atom.Proto.Materials.Anisotropic) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Anisotropic;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Lambert = 3,
      Phong = 4,
      Phonge = 5,
      Blinn = 6,
      Anisotropic = 7,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Lambert, other.Lambert)) return false;
      if (!object.Equals(Phong, other.Phong)) return false;
      if (!object.Equals(Phonge, other.Phonge)) return false;
      if (!object.Equals(Blinn, other.Blinn)) return false;
      if (!object.Equals(Anisotropic, other.Anisotropic)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != global::Atom.Proto.Materials.MaterialType.kMaterialTypeLambert) hash ^= Type.GetHashCode();
      if (dataCase_ == DataOneofCase.Lambert) hash ^= Lambert.GetHashCode();
      if (dataCase_ == DataOneofCase.Phong) hash ^= Phong.GetHashCode();
      if (dataCase_ == DataOneofCase.Phonge) hash ^= Phonge.GetHashCode();
      if (dataCase_ == DataOneofCase.Blinn) hash ^= Blinn.GetHashCode();
      if (dataCase_ == DataOneofCase.Anisotropic) hash ^= Anisotropic.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Atom.Proto.Materials.MaterialType.kMaterialTypeLambert) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (dataCase_ == DataOneofCase.Lambert) {
        output.WriteRawTag(26);
        output.WriteMessage(Lambert);
      }
      if (dataCase_ == DataOneofCase.Phong) {
        output.WriteRawTag(34);
        output.WriteMessage(Phong);
      }
      if (dataCase_ == DataOneofCase.Phonge) {
        output.WriteRawTag(42);
        output.WriteMessage(Phonge);
      }
      if (dataCase_ == DataOneofCase.Blinn) {
        output.WriteRawTag(50);
        output.WriteMessage(Blinn);
      }
      if (dataCase_ == DataOneofCase.Anisotropic) {
        output.WriteRawTag(58);
        output.WriteMessage(Anisotropic);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != global::Atom.Proto.Materials.MaterialType.kMaterialTypeLambert) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (dataCase_ == DataOneofCase.Lambert) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lambert);
      }
      if (dataCase_ == DataOneofCase.Phong) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Phong);
      }
      if (dataCase_ == DataOneofCase.Phonge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Phonge);
      }
      if (dataCase_ == DataOneofCase.Blinn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blinn);
      }
      if (dataCase_ == DataOneofCase.Anisotropic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Anisotropic);
      }
      return size;
    }

    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != global::Atom.Proto.Materials.MaterialType.kMaterialTypeLambert) {
        Type = other.Type;
      }
      switch (other.DataCase) {
        case DataOneofCase.Lambert:
          Lambert = other.Lambert;
          break;
        case DataOneofCase.Phong:
          Phong = other.Phong;
          break;
        case DataOneofCase.Phonge:
          Phonge = other.Phonge;
          break;
        case DataOneofCase.Blinn:
          Blinn = other.Blinn;
          break;
        case DataOneofCase.Anisotropic:
          Anisotropic = other.Anisotropic;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Atom.Proto.Materials.MaterialType) input.ReadEnum();
            break;
          }
          case 26: {
            global::Atom.Proto.Materials.Lambert subBuilder = new global::Atom.Proto.Materials.Lambert();
            if (dataCase_ == DataOneofCase.Lambert) {
              subBuilder.MergeFrom(Lambert);
            }
            input.ReadMessage(subBuilder);
            Lambert = subBuilder;
            break;
          }
          case 34: {
            global::Atom.Proto.Materials.Phong subBuilder = new global::Atom.Proto.Materials.Phong();
            if (dataCase_ == DataOneofCase.Phong) {
              subBuilder.MergeFrom(Phong);
            }
            input.ReadMessage(subBuilder);
            Phong = subBuilder;
            break;
          }
          case 42: {
            global::Atom.Proto.Materials.PhongE subBuilder = new global::Atom.Proto.Materials.PhongE();
            if (dataCase_ == DataOneofCase.Phonge) {
              subBuilder.MergeFrom(Phonge);
            }
            input.ReadMessage(subBuilder);
            Phonge = subBuilder;
            break;
          }
          case 50: {
            global::Atom.Proto.Materials.Blinn subBuilder = new global::Atom.Proto.Materials.Blinn();
            if (dataCase_ == DataOneofCase.Blinn) {
              subBuilder.MergeFrom(Blinn);
            }
            input.ReadMessage(subBuilder);
            Blinn = subBuilder;
            break;
          }
          case 58: {
            global::Atom.Proto.Materials.Anisotropic subBuilder = new global::Atom.Proto.Materials.Anisotropic();
            if (dataCase_ == DataOneofCase.Anisotropic) {
              subBuilder.MergeFrom(Anisotropic);
            }
            input.ReadMessage(subBuilder);
            Anisotropic = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
