// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/MaterialChanged.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Materials {

  /// <summary>Holder for reflection information generated from materials/MaterialChanged.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MaterialChangedReflection {

    #region Descriptor
    /// <summary>File descriptor for materials/MaterialChanged.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MaterialChangedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9tYXRlcmlhbHMvTWF0ZXJpYWxDaGFuZ2VkLnByb3RvEhRhdG9tLnByb3Rv",
            "Lm1hdGVyaWFscxohbWF0ZXJpYWxzL1RleHR1cmVkUGFyYW1ldGVyLnByb3Rv",
            "ItELCg9NYXRlcmlhbENoYW5nZWQSFAoMTWF0ZXJpYWxOYW1lGAEgASgJEjgK",
            "BUNvbG9yGAIgASgLMicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQ",
            "YXJhbWV0ZXJIABI/CgxUcmFuc3BhcmVuY3kYAyABKAsyJy5hdG9tLnByb3Rv",
            "Lm1hdGVyaWFscy5UZXh0dXJlZFBhcmFtZXRlckgAEj8KDEFtYmllbnRDb2xv",
            "chgEIAEoCzInLmF0b20ucHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1l",
            "dGVySAASQAoNSW5jYW5kZXNjZW5jZRgFIAEoCzInLmF0b20ucHJvdG8ubWF0",
            "ZXJpYWxzLlRleHR1cmVkUGFyYW1ldGVySAASEQoHQnVtcE1hcBgGIAEoCUgA",
            "EkAKDURpZmZ1c2VBbW91bnQYByABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFs",
            "cy5UZXh0dXJlZFBhcmFtZXRlckgAEj8KDFRyYW5zbHVjZW5jZRgIIAEoCzIn",
            "LmF0b20ucHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1ldGVySAASRAoR",
            "VHJhbnNsdWNlbmNlRGVwdGgYCSABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFs",
            "cy5UZXh0dXJlZFBhcmFtZXRlckgAEkQKEVRyYW5zbHVjZW5jZUZvY3VzGAog",
            "ASgLMicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXJI",
            "ABJACg1HbG93SW50ZW5zaXR5GAsgASgLMicuYXRvbS5wcm90by5tYXRlcmlh",
            "bHMuVGV4dHVyZWRQYXJhbWV0ZXJIABJACg1TcGVjdWxhckNvbG9yGAwgASgL",
            "MicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXJIABI/",
            "CgxSZWZsZWN0aXZpdHkYDSABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFscy5U",
            "ZXh0dXJlZFBhcmFtZXRlckgAEkEKDlJlZmxlY3RlZENvbG9yGA4gASgLMicu",
            "YXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXJIABI8CglS",
            "b3VnaG5lc3MYDyABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFscy5UZXh0dXJl",
            "ZFBhcmFtZXRlckgAEj4KC0Nvc2luZVBvd2VyGBAgASgLMicuYXRvbS5wcm90",
            "by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXJIABJACg1IaWdobGlnaHRT",
            "aXplGBEgASgLMicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJh",
            "bWV0ZXJIABI8CglXaGl0ZW5lc3MYEiABKAsyJy5hdG9tLnByb3RvLm1hdGVy",
            "aWFscy5UZXh0dXJlZFBhcmFtZXRlckgAEj8KDEVjY2VudHJpY2l0eRgTIAEo",
            "CzInLmF0b20ucHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1ldGVySAAS",
            "QgoPU3BlY3VsYXJSb2xsT2ZmGBQgASgLMicuYXRvbS5wcm90by5tYXRlcmlh",
            "bHMuVGV4dHVyZWRQYXJhbWV0ZXJIABI4CgVBbmdsZRgVIAEoCzInLmF0b20u",
            "cHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1ldGVySAASOgoHU3ByZWFk",
            "WBgWIAEoCzInLmF0b20ucHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1l",
            "dGVySAASOgoHU3ByZWFkWRgXIAEoCzInLmF0b20ucHJvdG8ubWF0ZXJpYWxz",
            "LlRleHR1cmVkUGFyYW1ldGVySAASPwoMRnJlc25lbEluZGV4GBggASgLMicu",
            "YXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXJIAEIKCghQ",
            "cm9wZXJ0eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.Materials.TexturedParameterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Materials.MaterialChanged), global::Atom.Proto.Materials.MaterialChanged.Parser, new[]{ "MaterialName", "Color", "Transparency", "AmbientColor", "Incandescence", "BumpMap", "DiffuseAmount", "Translucence", "TranslucenceDepth", "TranslucenceFocus", "GlowIntensity", "SpecularColor", "Reflectivity", "ReflectedColor", "Roughness", "CosinePower", "HighlightSize", "Whiteness", "Eccentricity", "SpecularRollOff", "Angle", "SpreadX", "SpreadY", "FresnelIndex" }, new[]{ "Property" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// *
  ///  Sent when only a single channel of a material is modified.
  ///  This contains a collection of every single unique material
  ///  property.  The material is expected to already exist on the
  ///  client side, and therefore the value that is set can simply
  ///  be applied to the existing material.  It's messy but it's how
  ///  protocol buffers work. 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MaterialChanged : pb::IMessage<MaterialChanged> {
    private static readonly pb::MessageParser<MaterialChanged> _parser = new pb::MessageParser<MaterialChanged>(() => new MaterialChanged());
    public static pb::MessageParser<MaterialChanged> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Materials.MaterialChangedReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MaterialChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MaterialChanged(MaterialChanged other) : this() {
      materialName_ = other.materialName_;
      switch (other.PropertyCase) {
        case PropertyOneofCase.Color:
          Color = other.Color.Clone();
          break;
        case PropertyOneofCase.Transparency:
          Transparency = other.Transparency.Clone();
          break;
        case PropertyOneofCase.AmbientColor:
          AmbientColor = other.AmbientColor.Clone();
          break;
        case PropertyOneofCase.Incandescence:
          Incandescence = other.Incandescence.Clone();
          break;
        case PropertyOneofCase.BumpMap:
          BumpMap = other.BumpMap;
          break;
        case PropertyOneofCase.DiffuseAmount:
          DiffuseAmount = other.DiffuseAmount.Clone();
          break;
        case PropertyOneofCase.Translucence:
          Translucence = other.Translucence.Clone();
          break;
        case PropertyOneofCase.TranslucenceDepth:
          TranslucenceDepth = other.TranslucenceDepth.Clone();
          break;
        case PropertyOneofCase.TranslucenceFocus:
          TranslucenceFocus = other.TranslucenceFocus.Clone();
          break;
        case PropertyOneofCase.GlowIntensity:
          GlowIntensity = other.GlowIntensity.Clone();
          break;
        case PropertyOneofCase.SpecularColor:
          SpecularColor = other.SpecularColor.Clone();
          break;
        case PropertyOneofCase.Reflectivity:
          Reflectivity = other.Reflectivity.Clone();
          break;
        case PropertyOneofCase.ReflectedColor:
          ReflectedColor = other.ReflectedColor.Clone();
          break;
        case PropertyOneofCase.Roughness:
          Roughness = other.Roughness.Clone();
          break;
        case PropertyOneofCase.CosinePower:
          CosinePower = other.CosinePower.Clone();
          break;
        case PropertyOneofCase.HighlightSize:
          HighlightSize = other.HighlightSize.Clone();
          break;
        case PropertyOneofCase.Whiteness:
          Whiteness = other.Whiteness.Clone();
          break;
        case PropertyOneofCase.Eccentricity:
          Eccentricity = other.Eccentricity.Clone();
          break;
        case PropertyOneofCase.SpecularRollOff:
          SpecularRollOff = other.SpecularRollOff.Clone();
          break;
        case PropertyOneofCase.Angle:
          Angle = other.Angle.Clone();
          break;
        case PropertyOneofCase.SpreadX:
          SpreadX = other.SpreadX.Clone();
          break;
        case PropertyOneofCase.SpreadY:
          SpreadY = other.SpreadY.Clone();
          break;
        case PropertyOneofCase.FresnelIndex:
          FresnelIndex = other.FresnelIndex.Clone();
          break;
      }

    }

    public MaterialChanged Clone() {
      return new MaterialChanged(this);
    }

    /// <summary>Field number for the "MaterialName" field.</summary>
    public const int MaterialNameFieldNumber = 1;
    private string materialName_ = "";
    /// <summary>
    /// *&lt; Name of the material that changed. 
    /// </summary>
    public string MaterialName {
      get { return materialName_; }
      set {
        materialName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 2;
    /// <summary>
    /// *&lt; Base color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Color {
      get { return propertyCase_ == PropertyOneofCase.Color ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Color;
      }
    }

    /// <summary>Field number for the "Transparency" field.</summary>
    public const int TransparencyFieldNumber = 3;
    /// <summary>
    /// *&lt; Transparent color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Transparency {
      get { return propertyCase_ == PropertyOneofCase.Transparency ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Transparency;
      }
    }

    /// <summary>Field number for the "AmbientColor" field.</summary>
    public const int AmbientColorFieldNumber = 4;
    /// <summary>
    /// *&lt; Ambient color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter AmbientColor {
      get { return propertyCase_ == PropertyOneofCase.AmbientColor ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.AmbientColor;
      }
    }

    /// <summary>Field number for the "Incandescence" field.</summary>
    public const int IncandescenceFieldNumber = 5;
    /// <summary>
    /// *&lt; Incandescent color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Incandescence {
      get { return propertyCase_ == PropertyOneofCase.Incandescence ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Incandescence;
      }
    }

    /// <summary>Field number for the "BumpMap" field.</summary>
    public const int BumpMapFieldNumber = 6;
    /// <summary>
    /// *&lt; Name of bump map texture. 
    /// </summary>
    public string BumpMap {
      get { return propertyCase_ == PropertyOneofCase.BumpMap ? (string) property_ : ""; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        propertyCase_ = PropertyOneofCase.BumpMap;
      }
    }

    /// <summary>Field number for the "DiffuseAmount" field.</summary>
    public const int DiffuseAmountFieldNumber = 7;
    /// <summary>
    /// *&lt; Diffuse intensity, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter DiffuseAmount {
      get { return propertyCase_ == PropertyOneofCase.DiffuseAmount ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.DiffuseAmount;
      }
    }

    /// <summary>Field number for the "Translucence" field.</summary>
    public const int TranslucenceFieldNumber = 8;
    /// <summary>
    /// *&lt; Translucent amount, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Translucence {
      get { return propertyCase_ == PropertyOneofCase.Translucence ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Translucence;
      }
    }

    /// <summary>Field number for the "TranslucenceDepth" field.</summary>
    public const int TranslucenceDepthFieldNumber = 9;
    /// <summary>
    /// *&lt; Translucent depth, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter TranslucenceDepth {
      get { return propertyCase_ == PropertyOneofCase.TranslucenceDepth ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.TranslucenceDepth;
      }
    }

    /// <summary>Field number for the "TranslucenceFocus" field.</summary>
    public const int TranslucenceFocusFieldNumber = 10;
    /// <summary>
    /// *&lt; Translucent focus, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter TranslucenceFocus {
      get { return propertyCase_ == PropertyOneofCase.TranslucenceFocus ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.TranslucenceFocus;
      }
    }

    /// <summary>Field number for the "GlowIntensity" field.</summary>
    public const int GlowIntensityFieldNumber = 11;
    /// <summary>
    /// *&lt; Glow intensity, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter GlowIntensity {
      get { return propertyCase_ == PropertyOneofCase.GlowIntensity ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.GlowIntensity;
      }
    }

    /// <summary>Field number for the "SpecularColor" field.</summary>
    public const int SpecularColorFieldNumber = 12;
    /// <summary>
    /// *&lt; Specular color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter SpecularColor {
      get { return propertyCase_ == PropertyOneofCase.SpecularColor ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.SpecularColor;
      }
    }

    /// <summary>Field number for the "Reflectivity" field.</summary>
    public const int ReflectivityFieldNumber = 13;
    /// <summary>
    /// *&lt; Reflectivity amount, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Reflectivity {
      get { return propertyCase_ == PropertyOneofCase.Reflectivity ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Reflectivity;
      }
    }

    /// <summary>Field number for the "ReflectedColor" field.</summary>
    public const int ReflectedColorFieldNumber = 14;
    /// <summary>
    /// *&lt; Reflected color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter ReflectedColor {
      get { return propertyCase_ == PropertyOneofCase.ReflectedColor ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.ReflectedColor;
      }
    }

    /// <summary>Field number for the "Roughness" field.</summary>
    public const int RoughnessFieldNumber = 15;
    /// <summary>
    /// *&lt; Surface roughness, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Roughness {
      get { return propertyCase_ == PropertyOneofCase.Roughness ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Roughness;
      }
    }

    /// <summary>Field number for the "CosinePower" field.</summary>
    public const int CosinePowerFieldNumber = 16;
    /// <summary>
    /// *&lt; Specular power, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter CosinePower {
      get { return propertyCase_ == PropertyOneofCase.CosinePower ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.CosinePower;
      }
    }

    /// <summary>Field number for the "HighlightSize" field.</summary>
    public const int HighlightSizeFieldNumber = 17;
    /// <summary>
    /// *&lt; Size of highlight, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter HighlightSize {
      get { return propertyCase_ == PropertyOneofCase.HighlightSize ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.HighlightSize;
      }
    }

    /// <summary>Field number for the "Whiteness" field.</summary>
    public const int WhitenessFieldNumber = 18;
    /// <summary>
    /// *&lt; Whiteness, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Whiteness {
      get { return propertyCase_ == PropertyOneofCase.Whiteness ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Whiteness;
      }
    }

    /// <summary>Field number for the "Eccentricity" field.</summary>
    public const int EccentricityFieldNumber = 19;
    /// <summary>
    /// *&lt; Eccentricity, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Eccentricity {
      get { return propertyCase_ == PropertyOneofCase.Eccentricity ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Eccentricity;
      }
    }

    /// <summary>Field number for the "SpecularRollOff" field.</summary>
    public const int SpecularRollOffFieldNumber = 20;
    /// <summary>
    /// *&lt; Specular roll off, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter SpecularRollOff {
      get { return propertyCase_ == PropertyOneofCase.SpecularRollOff ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.SpecularRollOff;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 21;
    /// <summary>
    /// *&lt; Angle, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Angle {
      get { return propertyCase_ == PropertyOneofCase.Angle ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Angle;
      }
    }

    /// <summary>Field number for the "SpreadX" field.</summary>
    public const int SpreadXFieldNumber = 22;
    /// <summary>
    /// *&lt; Spread X, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter SpreadX {
      get { return propertyCase_ == PropertyOneofCase.SpreadX ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.SpreadX;
      }
    }

    /// <summary>Field number for the "SpreadY" field.</summary>
    public const int SpreadYFieldNumber = 23;
    /// <summary>
    /// *&lt; Spread Y, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter SpreadY {
      get { return propertyCase_ == PropertyOneofCase.SpreadY ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.SpreadY;
      }
    }

    /// <summary>Field number for the "FresnelIndex" field.</summary>
    public const int FresnelIndexFieldNumber = 24;
    /// <summary>
    /// *&lt; Fresnel index of refraction, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter FresnelIndex {
      get { return propertyCase_ == PropertyOneofCase.FresnelIndex ? (global::Atom.Proto.Materials.TexturedParameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.FresnelIndex;
      }
    }

    private object property_;
    /// <summary>Enum of possible cases for the "Property" oneof.</summary>
    public enum PropertyOneofCase {
      None = 0,
      Color = 2,
      Transparency = 3,
      AmbientColor = 4,
      Incandescence = 5,
      BumpMap = 6,
      DiffuseAmount = 7,
      Translucence = 8,
      TranslucenceDepth = 9,
      TranslucenceFocus = 10,
      GlowIntensity = 11,
      SpecularColor = 12,
      Reflectivity = 13,
      ReflectedColor = 14,
      Roughness = 15,
      CosinePower = 16,
      HighlightSize = 17,
      Whiteness = 18,
      Eccentricity = 19,
      SpecularRollOff = 20,
      Angle = 21,
      SpreadX = 22,
      SpreadY = 23,
      FresnelIndex = 24,
    }
    private PropertyOneofCase propertyCase_ = PropertyOneofCase.None;
    public PropertyOneofCase PropertyCase {
      get { return propertyCase_; }
    }

    public void ClearProperty() {
      propertyCase_ = PropertyOneofCase.None;
      property_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as MaterialChanged);
    }

    public bool Equals(MaterialChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaterialName != other.MaterialName) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Transparency, other.Transparency)) return false;
      if (!object.Equals(AmbientColor, other.AmbientColor)) return false;
      if (!object.Equals(Incandescence, other.Incandescence)) return false;
      if (BumpMap != other.BumpMap) return false;
      if (!object.Equals(DiffuseAmount, other.DiffuseAmount)) return false;
      if (!object.Equals(Translucence, other.Translucence)) return false;
      if (!object.Equals(TranslucenceDepth, other.TranslucenceDepth)) return false;
      if (!object.Equals(TranslucenceFocus, other.TranslucenceFocus)) return false;
      if (!object.Equals(GlowIntensity, other.GlowIntensity)) return false;
      if (!object.Equals(SpecularColor, other.SpecularColor)) return false;
      if (!object.Equals(Reflectivity, other.Reflectivity)) return false;
      if (!object.Equals(ReflectedColor, other.ReflectedColor)) return false;
      if (!object.Equals(Roughness, other.Roughness)) return false;
      if (!object.Equals(CosinePower, other.CosinePower)) return false;
      if (!object.Equals(HighlightSize, other.HighlightSize)) return false;
      if (!object.Equals(Whiteness, other.Whiteness)) return false;
      if (!object.Equals(Eccentricity, other.Eccentricity)) return false;
      if (!object.Equals(SpecularRollOff, other.SpecularRollOff)) return false;
      if (!object.Equals(Angle, other.Angle)) return false;
      if (!object.Equals(SpreadX, other.SpreadX)) return false;
      if (!object.Equals(SpreadY, other.SpreadY)) return false;
      if (!object.Equals(FresnelIndex, other.FresnelIndex)) return false;
      if (PropertyCase != other.PropertyCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MaterialName.Length != 0) hash ^= MaterialName.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Color) hash ^= Color.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Transparency) hash ^= Transparency.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.AmbientColor) hash ^= AmbientColor.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Incandescence) hash ^= Incandescence.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.BumpMap) hash ^= BumpMap.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.DiffuseAmount) hash ^= DiffuseAmount.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Translucence) hash ^= Translucence.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.TranslucenceDepth) hash ^= TranslucenceDepth.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.TranslucenceFocus) hash ^= TranslucenceFocus.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.GlowIntensity) hash ^= GlowIntensity.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.SpecularColor) hash ^= SpecularColor.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Reflectivity) hash ^= Reflectivity.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.ReflectedColor) hash ^= ReflectedColor.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Roughness) hash ^= Roughness.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.CosinePower) hash ^= CosinePower.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.HighlightSize) hash ^= HighlightSize.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Whiteness) hash ^= Whiteness.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Eccentricity) hash ^= Eccentricity.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.SpecularRollOff) hash ^= SpecularRollOff.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Angle) hash ^= Angle.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.SpreadX) hash ^= SpreadX.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.SpreadY) hash ^= SpreadY.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.FresnelIndex) hash ^= FresnelIndex.GetHashCode();
      hash ^= (int) propertyCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MaterialName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MaterialName);
      }
      if (propertyCase_ == PropertyOneofCase.Color) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (propertyCase_ == PropertyOneofCase.Transparency) {
        output.WriteRawTag(26);
        output.WriteMessage(Transparency);
      }
      if (propertyCase_ == PropertyOneofCase.AmbientColor) {
        output.WriteRawTag(34);
        output.WriteMessage(AmbientColor);
      }
      if (propertyCase_ == PropertyOneofCase.Incandescence) {
        output.WriteRawTag(42);
        output.WriteMessage(Incandescence);
      }
      if (propertyCase_ == PropertyOneofCase.BumpMap) {
        output.WriteRawTag(50);
        output.WriteString(BumpMap);
      }
      if (propertyCase_ == PropertyOneofCase.DiffuseAmount) {
        output.WriteRawTag(58);
        output.WriteMessage(DiffuseAmount);
      }
      if (propertyCase_ == PropertyOneofCase.Translucence) {
        output.WriteRawTag(66);
        output.WriteMessage(Translucence);
      }
      if (propertyCase_ == PropertyOneofCase.TranslucenceDepth) {
        output.WriteRawTag(74);
        output.WriteMessage(TranslucenceDepth);
      }
      if (propertyCase_ == PropertyOneofCase.TranslucenceFocus) {
        output.WriteRawTag(82);
        output.WriteMessage(TranslucenceFocus);
      }
      if (propertyCase_ == PropertyOneofCase.GlowIntensity) {
        output.WriteRawTag(90);
        output.WriteMessage(GlowIntensity);
      }
      if (propertyCase_ == PropertyOneofCase.SpecularColor) {
        output.WriteRawTag(98);
        output.WriteMessage(SpecularColor);
      }
      if (propertyCase_ == PropertyOneofCase.Reflectivity) {
        output.WriteRawTag(106);
        output.WriteMessage(Reflectivity);
      }
      if (propertyCase_ == PropertyOneofCase.ReflectedColor) {
        output.WriteRawTag(114);
        output.WriteMessage(ReflectedColor);
      }
      if (propertyCase_ == PropertyOneofCase.Roughness) {
        output.WriteRawTag(122);
        output.WriteMessage(Roughness);
      }
      if (propertyCase_ == PropertyOneofCase.CosinePower) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(CosinePower);
      }
      if (propertyCase_ == PropertyOneofCase.HighlightSize) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(HighlightSize);
      }
      if (propertyCase_ == PropertyOneofCase.Whiteness) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Whiteness);
      }
      if (propertyCase_ == PropertyOneofCase.Eccentricity) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Eccentricity);
      }
      if (propertyCase_ == PropertyOneofCase.SpecularRollOff) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SpecularRollOff);
      }
      if (propertyCase_ == PropertyOneofCase.Angle) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Angle);
      }
      if (propertyCase_ == PropertyOneofCase.SpreadX) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SpreadX);
      }
      if (propertyCase_ == PropertyOneofCase.SpreadY) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SpreadY);
      }
      if (propertyCase_ == PropertyOneofCase.FresnelIndex) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(FresnelIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MaterialName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialName);
      }
      if (propertyCase_ == PropertyOneofCase.Color) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (propertyCase_ == PropertyOneofCase.Transparency) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transparency);
      }
      if (propertyCase_ == PropertyOneofCase.AmbientColor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AmbientColor);
      }
      if (propertyCase_ == PropertyOneofCase.Incandescence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Incandescence);
      }
      if (propertyCase_ == PropertyOneofCase.BumpMap) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BumpMap);
      }
      if (propertyCase_ == PropertyOneofCase.DiffuseAmount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiffuseAmount);
      }
      if (propertyCase_ == PropertyOneofCase.Translucence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translucence);
      }
      if (propertyCase_ == PropertyOneofCase.TranslucenceDepth) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TranslucenceDepth);
      }
      if (propertyCase_ == PropertyOneofCase.TranslucenceFocus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TranslucenceFocus);
      }
      if (propertyCase_ == PropertyOneofCase.GlowIntensity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlowIntensity);
      }
      if (propertyCase_ == PropertyOneofCase.SpecularColor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecularColor);
      }
      if (propertyCase_ == PropertyOneofCase.Reflectivity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reflectivity);
      }
      if (propertyCase_ == PropertyOneofCase.ReflectedColor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReflectedColor);
      }
      if (propertyCase_ == PropertyOneofCase.Roughness) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roughness);
      }
      if (propertyCase_ == PropertyOneofCase.CosinePower) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CosinePower);
      }
      if (propertyCase_ == PropertyOneofCase.HighlightSize) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighlightSize);
      }
      if (propertyCase_ == PropertyOneofCase.Whiteness) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Whiteness);
      }
      if (propertyCase_ == PropertyOneofCase.Eccentricity) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Eccentricity);
      }
      if (propertyCase_ == PropertyOneofCase.SpecularRollOff) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpecularRollOff);
      }
      if (propertyCase_ == PropertyOneofCase.Angle) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Angle);
      }
      if (propertyCase_ == PropertyOneofCase.SpreadX) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpreadX);
      }
      if (propertyCase_ == PropertyOneofCase.SpreadY) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpreadY);
      }
      if (propertyCase_ == PropertyOneofCase.FresnelIndex) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FresnelIndex);
      }
      return size;
    }

    public void MergeFrom(MaterialChanged other) {
      if (other == null) {
        return;
      }
      if (other.MaterialName.Length != 0) {
        MaterialName = other.MaterialName;
      }
      switch (other.PropertyCase) {
        case PropertyOneofCase.Color:
          Color = other.Color;
          break;
        case PropertyOneofCase.Transparency:
          Transparency = other.Transparency;
          break;
        case PropertyOneofCase.AmbientColor:
          AmbientColor = other.AmbientColor;
          break;
        case PropertyOneofCase.Incandescence:
          Incandescence = other.Incandescence;
          break;
        case PropertyOneofCase.BumpMap:
          BumpMap = other.BumpMap;
          break;
        case PropertyOneofCase.DiffuseAmount:
          DiffuseAmount = other.DiffuseAmount;
          break;
        case PropertyOneofCase.Translucence:
          Translucence = other.Translucence;
          break;
        case PropertyOneofCase.TranslucenceDepth:
          TranslucenceDepth = other.TranslucenceDepth;
          break;
        case PropertyOneofCase.TranslucenceFocus:
          TranslucenceFocus = other.TranslucenceFocus;
          break;
        case PropertyOneofCase.GlowIntensity:
          GlowIntensity = other.GlowIntensity;
          break;
        case PropertyOneofCase.SpecularColor:
          SpecularColor = other.SpecularColor;
          break;
        case PropertyOneofCase.Reflectivity:
          Reflectivity = other.Reflectivity;
          break;
        case PropertyOneofCase.ReflectedColor:
          ReflectedColor = other.ReflectedColor;
          break;
        case PropertyOneofCase.Roughness:
          Roughness = other.Roughness;
          break;
        case PropertyOneofCase.CosinePower:
          CosinePower = other.CosinePower;
          break;
        case PropertyOneofCase.HighlightSize:
          HighlightSize = other.HighlightSize;
          break;
        case PropertyOneofCase.Whiteness:
          Whiteness = other.Whiteness;
          break;
        case PropertyOneofCase.Eccentricity:
          Eccentricity = other.Eccentricity;
          break;
        case PropertyOneofCase.SpecularRollOff:
          SpecularRollOff = other.SpecularRollOff;
          break;
        case PropertyOneofCase.Angle:
          Angle = other.Angle;
          break;
        case PropertyOneofCase.SpreadX:
          SpreadX = other.SpreadX;
          break;
        case PropertyOneofCase.SpreadY:
          SpreadY = other.SpreadY;
          break;
        case PropertyOneofCase.FresnelIndex:
          FresnelIndex = other.FresnelIndex;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MaterialName = input.ReadString();
            break;
          }
          case 18: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Color) {
              subBuilder.MergeFrom(Color);
            }
            input.ReadMessage(subBuilder);
            Color = subBuilder;
            break;
          }
          case 26: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Transparency) {
              subBuilder.MergeFrom(Transparency);
            }
            input.ReadMessage(subBuilder);
            Transparency = subBuilder;
            break;
          }
          case 34: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.AmbientColor) {
              subBuilder.MergeFrom(AmbientColor);
            }
            input.ReadMessage(subBuilder);
            AmbientColor = subBuilder;
            break;
          }
          case 42: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Incandescence) {
              subBuilder.MergeFrom(Incandescence);
            }
            input.ReadMessage(subBuilder);
            Incandescence = subBuilder;
            break;
          }
          case 50: {
            BumpMap = input.ReadString();
            break;
          }
          case 58: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.DiffuseAmount) {
              subBuilder.MergeFrom(DiffuseAmount);
            }
            input.ReadMessage(subBuilder);
            DiffuseAmount = subBuilder;
            break;
          }
          case 66: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Translucence) {
              subBuilder.MergeFrom(Translucence);
            }
            input.ReadMessage(subBuilder);
            Translucence = subBuilder;
            break;
          }
          case 74: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.TranslucenceDepth) {
              subBuilder.MergeFrom(TranslucenceDepth);
            }
            input.ReadMessage(subBuilder);
            TranslucenceDepth = subBuilder;
            break;
          }
          case 82: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.TranslucenceFocus) {
              subBuilder.MergeFrom(TranslucenceFocus);
            }
            input.ReadMessage(subBuilder);
            TranslucenceFocus = subBuilder;
            break;
          }
          case 90: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.GlowIntensity) {
              subBuilder.MergeFrom(GlowIntensity);
            }
            input.ReadMessage(subBuilder);
            GlowIntensity = subBuilder;
            break;
          }
          case 98: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.SpecularColor) {
              subBuilder.MergeFrom(SpecularColor);
            }
            input.ReadMessage(subBuilder);
            SpecularColor = subBuilder;
            break;
          }
          case 106: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Reflectivity) {
              subBuilder.MergeFrom(Reflectivity);
            }
            input.ReadMessage(subBuilder);
            Reflectivity = subBuilder;
            break;
          }
          case 114: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.ReflectedColor) {
              subBuilder.MergeFrom(ReflectedColor);
            }
            input.ReadMessage(subBuilder);
            ReflectedColor = subBuilder;
            break;
          }
          case 122: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Roughness) {
              subBuilder.MergeFrom(Roughness);
            }
            input.ReadMessage(subBuilder);
            Roughness = subBuilder;
            break;
          }
          case 130: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.CosinePower) {
              subBuilder.MergeFrom(CosinePower);
            }
            input.ReadMessage(subBuilder);
            CosinePower = subBuilder;
            break;
          }
          case 138: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.HighlightSize) {
              subBuilder.MergeFrom(HighlightSize);
            }
            input.ReadMessage(subBuilder);
            HighlightSize = subBuilder;
            break;
          }
          case 146: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Whiteness) {
              subBuilder.MergeFrom(Whiteness);
            }
            input.ReadMessage(subBuilder);
            Whiteness = subBuilder;
            break;
          }
          case 154: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Eccentricity) {
              subBuilder.MergeFrom(Eccentricity);
            }
            input.ReadMessage(subBuilder);
            Eccentricity = subBuilder;
            break;
          }
          case 162: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.SpecularRollOff) {
              subBuilder.MergeFrom(SpecularRollOff);
            }
            input.ReadMessage(subBuilder);
            SpecularRollOff = subBuilder;
            break;
          }
          case 170: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.Angle) {
              subBuilder.MergeFrom(Angle);
            }
            input.ReadMessage(subBuilder);
            Angle = subBuilder;
            break;
          }
          case 178: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.SpreadX) {
              subBuilder.MergeFrom(SpreadX);
            }
            input.ReadMessage(subBuilder);
            SpreadX = subBuilder;
            break;
          }
          case 186: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.SpreadY) {
              subBuilder.MergeFrom(SpreadY);
            }
            input.ReadMessage(subBuilder);
            SpreadY = subBuilder;
            break;
          }
          case 194: {
            global::Atom.Proto.Materials.TexturedParameter subBuilder = new global::Atom.Proto.Materials.TexturedParameter();
            if (propertyCase_ == PropertyOneofCase.FresnelIndex) {
              subBuilder.MergeFrom(FresnelIndex);
            }
            input.ReadMessage(subBuilder);
            FresnelIndex = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
