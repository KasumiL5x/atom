// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/TexturedParameter.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Materials {

  /// <summary>Holder for reflection information generated from materials/TexturedParameter.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TexturedParameterReflection {

    #region Descriptor
    /// <summary>File descriptor for materials/TexturedParameter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TexturedParameterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFtYXRlcmlhbHMvVGV4dHVyZWRQYXJhbWV0ZXIucHJvdG8SFGF0b20ucHJv",
            "dG8ubWF0ZXJpYWxzGgtDb2xvci5wcm90byJqChFUZXh0dXJlZFBhcmFtZXRl",
            "chIPCgdUZXh0dXJlGAEgASgJEhEKB0FzRmxvYXQYAiABKAJIABIkCgdBc0Nv",
            "bG9yGAMgASgLMhEuYXRvbS5wcm90by5Db2xvckgAQgsKCVBhcmFtZXRlcmIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.ColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Materials.TexturedParameter), global::Atom.Proto.Materials.TexturedParameter.Parser, new[]{ "Texture", "AsFloat", "AsColor" }, new[]{ "Parameter" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexturedParameter : pb::IMessage<TexturedParameter> {
    private static readonly pb::MessageParser<TexturedParameter> _parser = new pb::MessageParser<TexturedParameter>(() => new TexturedParameter());
    public static pb::MessageParser<TexturedParameter> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Materials.TexturedParameterReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TexturedParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TexturedParameter(TexturedParameter other) : this() {
      texture_ = other.texture_;
      switch (other.ParameterCase) {
        case ParameterOneofCase.AsFloat:
          AsFloat = other.AsFloat;
          break;
        case ParameterOneofCase.AsColor:
          AsColor = other.AsColor.Clone();
          break;
      }

    }

    public TexturedParameter Clone() {
      return new TexturedParameter(this);
    }

    /// <summary>Field number for the "Texture" field.</summary>
    public const int TextureFieldNumber = 1;
    private string texture_ = "";
    /// <summary>
    /// *&lt; Name of the texture, if present. 
    /// </summary>
    public string Texture {
      get { return texture_; }
      set {
        texture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AsFloat" field.</summary>
    public const int AsFloatFieldNumber = 2;
    /// <summary>
    /// *&lt; Parameter as a float. 
    /// </summary>
    public float AsFloat {
      get { return parameterCase_ == ParameterOneofCase.AsFloat ? (float) parameter_ : 0F; }
      set {
        parameter_ = value;
        parameterCase_ = ParameterOneofCase.AsFloat;
      }
    }

    /// <summary>Field number for the "AsColor" field.</summary>
    public const int AsColorFieldNumber = 3;
    /// <summary>
    /// *&lt; Parameter as a Color. 
    /// </summary>
    public global::Atom.Proto.Color AsColor {
      get { return parameterCase_ == ParameterOneofCase.AsColor ? (global::Atom.Proto.Color) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.AsColor;
      }
    }

    private object parameter_;
    /// <summary>Enum of possible cases for the "Parameter" oneof.</summary>
    public enum ParameterOneofCase {
      None = 0,
      AsFloat = 2,
      AsColor = 3,
    }
    private ParameterOneofCase parameterCase_ = ParameterOneofCase.None;
    public ParameterOneofCase ParameterCase {
      get { return parameterCase_; }
    }

    public void ClearParameter() {
      parameterCase_ = ParameterOneofCase.None;
      parameter_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as TexturedParameter);
    }

    public bool Equals(TexturedParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Texture != other.Texture) return false;
      if (AsFloat != other.AsFloat) return false;
      if (!object.Equals(AsColor, other.AsColor)) return false;
      if (ParameterCase != other.ParameterCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Texture.Length != 0) hash ^= Texture.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.AsFloat) hash ^= AsFloat.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.AsColor) hash ^= AsColor.GetHashCode();
      hash ^= (int) parameterCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Texture.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Texture);
      }
      if (parameterCase_ == ParameterOneofCase.AsFloat) {
        output.WriteRawTag(21);
        output.WriteFloat(AsFloat);
      }
      if (parameterCase_ == ParameterOneofCase.AsColor) {
        output.WriteRawTag(26);
        output.WriteMessage(AsColor);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Texture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Texture);
      }
      if (parameterCase_ == ParameterOneofCase.AsFloat) {
        size += 1 + 4;
      }
      if (parameterCase_ == ParameterOneofCase.AsColor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AsColor);
      }
      return size;
    }

    public void MergeFrom(TexturedParameter other) {
      if (other == null) {
        return;
      }
      if (other.Texture.Length != 0) {
        Texture = other.Texture;
      }
      switch (other.ParameterCase) {
        case ParameterOneofCase.AsFloat:
          AsFloat = other.AsFloat;
          break;
        case ParameterOneofCase.AsColor:
          AsColor = other.AsColor;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Texture = input.ReadString();
            break;
          }
          case 21: {
            AsFloat = input.ReadFloat();
            break;
          }
          case 26: {
            global::Atom.Proto.Color subBuilder = new global::Atom.Proto.Color();
            if (parameterCase_ == ParameterOneofCase.AsColor) {
              subBuilder.MergeFrom(AsColor);
            }
            input.ReadMessage(subBuilder);
            AsColor = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
