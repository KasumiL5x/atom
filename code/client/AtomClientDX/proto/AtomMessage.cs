// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AtomMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto {

  /// <summary>Holder for reflection information generated from AtomMessage.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class AtomMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for AtomMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AtomMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFBdG9tTWVzc2FnZS5wcm90bxIKYXRvbS5wcm90bxoLU2NlbmUucHJvdG8a",
            "EW1lc2hlcy9NZXNoLnByb3RvGh5tZXNoZXMvTWVzaFBvaW50c0NoYW5nZWQu",
            "cHJvdG8aIG1lc2hlcy9NZXNoR2VvbWV0cnlDaGFuZ2VkLnByb3RvGiBtZXNo",
            "ZXMvTWVzaE1hdGVyaWFsQ2hhbmdlZC5wcm90bxoMQ2FtZXJhLnByb3RvGhJs",
            "aWdodHMvTGlnaHQucHJvdG8aGWxpZ2h0cy9MaWdodENoYW5nZWQucHJvdG8a",
            "GG1hdGVyaWFscy9NYXRlcmlhbC5wcm90bxofbWF0ZXJpYWxzL01hdGVyaWFs",
            "Q2hhbmdlZC5wcm90bxoXbWF0ZXJpYWxzL1RleHR1cmUucHJvdG8aHm1hdGVy",
            "aWFscy9UZXh0dXJlQ2hhbmdlZC5wcm90bxoRTmFtZUNoYW5nZWQucHJvdG8a",
            "D1RyYW5zZm9ybS5wcm90bxoQQW5ub3RhdGlvbi5wcm90bxoLQ3VydmUucHJv",
            "dG8aE01hdHJpeENoYW5nZWQucHJvdG8aF1Zpc2liaWxpdHlDaGFuZ2VkLnBy",
            "b3RvItoHCgtBdG9tTWVzc2FnZRIWCgxEZWJ1Z01lc3NhZ2UYASABKAlIABIi",
            "CgVTY2VuZRgCIAEoCzIRLmF0b20ucHJvdG8uU2NlbmVIABInCgRNZXNoGAMg",
            "ASgLMhcuYXRvbS5wcm90by5tZXNoZXMuTWVzaEgAEkEKEU1lc2hQb2ludHND",
            "aGFuZ2VkGAQgASgLMiQuYXRvbS5wcm90by5tZXNoZXMuTWVzaFBvaW50c0No",
            "YW5nZWRIABJFChNNZXNoR2VvbWV0cnlDaGFuZ2VkGAUgASgLMiYuYXRvbS5w",
            "cm90by5tZXNoZXMuTWVzaEdlb21ldHJ5Q2hhbmdlZEgAEkUKE01lc2hNYXRl",
            "cmlhbENoYW5nZWQYBiABKAsyJi5hdG9tLnByb3RvLm1lc2hlcy5NZXNoTWF0",
            "ZXJpYWxDaGFuZ2VkSAASJAoGQ2FtZXJhGAcgASgLMhIuYXRvbS5wcm90by5D",
            "YW1lcmFIABIpCgVMaWdodBgIIAEoCzIYLmF0b20ucHJvdG8ubGlnaHRzLkxp",
            "Z2h0SAASNwoMTGlnaHRDaGFuZ2VkGAkgASgLMh8uYXRvbS5wcm90by5saWdo",
            "dHMuTGlnaHRDaGFuZ2VkSAASMgoITWF0ZXJpYWwYCiABKAsyHi5hdG9tLnBy",
            "b3RvLm1hdGVyaWFscy5NYXRlcmlhbEgAEkAKD01hdGVyaWFsQ2hhbmdlZBgL",
            "IAEoCzIlLmF0b20ucHJvdG8ubWF0ZXJpYWxzLk1hdGVyaWFsQ2hhbmdlZEgA",
            "EjAKB1RleHR1cmUYDCABKAsyHS5hdG9tLnByb3RvLm1hdGVyaWFscy5UZXh0",
            "dXJlSAASPgoOVGV4dHVyZUNoYW5nZWQYDSABKAsyJC5hdG9tLnByb3RvLm1h",
            "dGVyaWFscy5UZXh0dXJlQ2hhbmdlZEgAEi4KC05hbWVDaGFuZ2VkGA4gASgL",
            "MhcuYXRvbS5wcm90by5OYW1lQ2hhbmdlZEgAEioKCVRyYW5zZm9ybRgPIAEo",
            "CzIVLmF0b20ucHJvdG8uVHJhbnNmb3JtSAASLAoKQW5ub3RhdGlvbhgQIAEo",
            "CzIWLmF0b20ucHJvdG8uQW5ub3RhdGlvbkgAEiIKBUN1cnZlGBEgASgLMhEu",
            "YXRvbS5wcm90by5DdXJ2ZUgAEjIKDU1hdHJpeENoYW5nZWQYEiABKAsyGS5h",
            "dG9tLnByb3RvLk1hdHJpeENoYW5nZWRIABI6ChFWaXNpYmlsaXR5Q2hhbmdl",
            "ZBgTIAEoCzIdLmF0b20ucHJvdG8uVmlzaWJpbGl0eUNoYW5nZWRIAEIFCgNN",
            "c2diBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.SceneReflection.Descriptor, global::Atom.Proto.Meshes.MeshReflection.Descriptor, global::Atom.Proto.Meshes.MeshPointsChangedReflection.Descriptor, global::Atom.Proto.Meshes.MeshGeometryChangedReflection.Descriptor, global::Atom.Proto.Meshes.MeshMaterialChangedReflection.Descriptor, global::Atom.Proto.CameraReflection.Descriptor, global::Atom.Proto.Lights.LightReflection.Descriptor, global::Atom.Proto.Lights.LightChangedReflection.Descriptor, global::Atom.Proto.Materials.MaterialReflection.Descriptor, global::Atom.Proto.Materials.MaterialChangedReflection.Descriptor, global::Atom.Proto.Materials.TextureReflection.Descriptor, global::Atom.Proto.Materials.TextureChangedReflection.Descriptor, global::Atom.Proto.NameChangedReflection.Descriptor, global::Atom.Proto.TransformReflection.Descriptor, global::Atom.Proto.AnnotationReflection.Descriptor, global::Atom.Proto.CurveReflection.Descriptor, global::Atom.Proto.MatrixChangedReflection.Descriptor, global::Atom.Proto.VisibilityChangedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.AtomMessage), global::Atom.Proto.AtomMessage.Parser, new[]{ "DebugMessage", "Scene", "Mesh", "MeshPointsChanged", "MeshGeometryChanged", "MeshMaterialChanged", "Camera", "Light", "LightChanged", "Material", "MaterialChanged", "Texture", "TextureChanged", "NameChanged", "Transform", "Annotation", "Curve", "MatrixChanged", "VisibilityChanged" }, new[]{ "Msg" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AtomMessage : pb::IMessage<AtomMessage> {
    private static readonly pb::MessageParser<AtomMessage> _parser = new pb::MessageParser<AtomMessage>(() => new AtomMessage());
    public static pb::MessageParser<AtomMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.AtomMessageReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AtomMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AtomMessage(AtomMessage other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.DebugMessage:
          DebugMessage = other.DebugMessage;
          break;
        case MsgOneofCase.Scene:
          Scene = other.Scene.Clone();
          break;
        case MsgOneofCase.Mesh:
          Mesh = other.Mesh.Clone();
          break;
        case MsgOneofCase.MeshPointsChanged:
          MeshPointsChanged = other.MeshPointsChanged.Clone();
          break;
        case MsgOneofCase.MeshGeometryChanged:
          MeshGeometryChanged = other.MeshGeometryChanged.Clone();
          break;
        case MsgOneofCase.MeshMaterialChanged:
          MeshMaterialChanged = other.MeshMaterialChanged.Clone();
          break;
        case MsgOneofCase.Camera:
          Camera = other.Camera.Clone();
          break;
        case MsgOneofCase.Light:
          Light = other.Light.Clone();
          break;
        case MsgOneofCase.LightChanged:
          LightChanged = other.LightChanged.Clone();
          break;
        case MsgOneofCase.Material:
          Material = other.Material.Clone();
          break;
        case MsgOneofCase.MaterialChanged:
          MaterialChanged = other.MaterialChanged.Clone();
          break;
        case MsgOneofCase.Texture:
          Texture = other.Texture.Clone();
          break;
        case MsgOneofCase.TextureChanged:
          TextureChanged = other.TextureChanged.Clone();
          break;
        case MsgOneofCase.NameChanged:
          NameChanged = other.NameChanged.Clone();
          break;
        case MsgOneofCase.Transform:
          Transform = other.Transform.Clone();
          break;
        case MsgOneofCase.Annotation:
          Annotation = other.Annotation.Clone();
          break;
        case MsgOneofCase.Curve:
          Curve = other.Curve.Clone();
          break;
        case MsgOneofCase.MatrixChanged:
          MatrixChanged = other.MatrixChanged.Clone();
          break;
        case MsgOneofCase.VisibilityChanged:
          VisibilityChanged = other.VisibilityChanged.Clone();
          break;
      }

    }

    public AtomMessage Clone() {
      return new AtomMessage(this);
    }

    /// <summary>Field number for the "DebugMessage" field.</summary>
    public const int DebugMessageFieldNumber = 1;
    public string DebugMessage {
      get { return msgCase_ == MsgOneofCase.DebugMessage ? (string) msg_ : ""; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        msgCase_ = MsgOneofCase.DebugMessage;
      }
    }

    /// <summary>Field number for the "Scene" field.</summary>
    public const int SceneFieldNumber = 2;
    public global::Atom.Proto.Scene Scene {
      get { return msgCase_ == MsgOneofCase.Scene ? (global::Atom.Proto.Scene) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Scene;
      }
    }

    /// <summary>Field number for the "Mesh" field.</summary>
    public const int MeshFieldNumber = 3;
    public global::Atom.Proto.Meshes.Mesh Mesh {
      get { return msgCase_ == MsgOneofCase.Mesh ? (global::Atom.Proto.Meshes.Mesh) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Mesh;
      }
    }

    /// <summary>Field number for the "MeshPointsChanged" field.</summary>
    public const int MeshPointsChangedFieldNumber = 4;
    public global::Atom.Proto.Meshes.MeshPointsChanged MeshPointsChanged {
      get { return msgCase_ == MsgOneofCase.MeshPointsChanged ? (global::Atom.Proto.Meshes.MeshPointsChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.MeshPointsChanged;
      }
    }

    /// <summary>Field number for the "MeshGeometryChanged" field.</summary>
    public const int MeshGeometryChangedFieldNumber = 5;
    public global::Atom.Proto.Meshes.MeshGeometryChanged MeshGeometryChanged {
      get { return msgCase_ == MsgOneofCase.MeshGeometryChanged ? (global::Atom.Proto.Meshes.MeshGeometryChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.MeshGeometryChanged;
      }
    }

    /// <summary>Field number for the "MeshMaterialChanged" field.</summary>
    public const int MeshMaterialChangedFieldNumber = 6;
    public global::Atom.Proto.Meshes.MeshMaterialChanged MeshMaterialChanged {
      get { return msgCase_ == MsgOneofCase.MeshMaterialChanged ? (global::Atom.Proto.Meshes.MeshMaterialChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.MeshMaterialChanged;
      }
    }

    /// <summary>Field number for the "Camera" field.</summary>
    public const int CameraFieldNumber = 7;
    public global::Atom.Proto.Camera Camera {
      get { return msgCase_ == MsgOneofCase.Camera ? (global::Atom.Proto.Camera) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Camera;
      }
    }

    /// <summary>Field number for the "Light" field.</summary>
    public const int LightFieldNumber = 8;
    public global::Atom.Proto.Lights.Light Light {
      get { return msgCase_ == MsgOneofCase.Light ? (global::Atom.Proto.Lights.Light) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Light;
      }
    }

    /// <summary>Field number for the "LightChanged" field.</summary>
    public const int LightChangedFieldNumber = 9;
    public global::Atom.Proto.Lights.LightChanged LightChanged {
      get { return msgCase_ == MsgOneofCase.LightChanged ? (global::Atom.Proto.Lights.LightChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LightChanged;
      }
    }

    /// <summary>Field number for the "Material" field.</summary>
    public const int MaterialFieldNumber = 10;
    public global::Atom.Proto.Materials.Material Material {
      get { return msgCase_ == MsgOneofCase.Material ? (global::Atom.Proto.Materials.Material) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Material;
      }
    }

    /// <summary>Field number for the "MaterialChanged" field.</summary>
    public const int MaterialChangedFieldNumber = 11;
    public global::Atom.Proto.Materials.MaterialChanged MaterialChanged {
      get { return msgCase_ == MsgOneofCase.MaterialChanged ? (global::Atom.Proto.Materials.MaterialChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.MaterialChanged;
      }
    }

    /// <summary>Field number for the "Texture" field.</summary>
    public const int TextureFieldNumber = 12;
    public global::Atom.Proto.Materials.Texture Texture {
      get { return msgCase_ == MsgOneofCase.Texture ? (global::Atom.Proto.Materials.Texture) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Texture;
      }
    }

    /// <summary>Field number for the "TextureChanged" field.</summary>
    public const int TextureChangedFieldNumber = 13;
    public global::Atom.Proto.Materials.TextureChanged TextureChanged {
      get { return msgCase_ == MsgOneofCase.TextureChanged ? (global::Atom.Proto.Materials.TextureChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TextureChanged;
      }
    }

    /// <summary>Field number for the "NameChanged" field.</summary>
    public const int NameChangedFieldNumber = 14;
    public global::Atom.Proto.NameChanged NameChanged {
      get { return msgCase_ == MsgOneofCase.NameChanged ? (global::Atom.Proto.NameChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.NameChanged;
      }
    }

    /// <summary>Field number for the "Transform" field.</summary>
    public const int TransformFieldNumber = 15;
    public global::Atom.Proto.Transform Transform {
      get { return msgCase_ == MsgOneofCase.Transform ? (global::Atom.Proto.Transform) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Transform;
      }
    }

    /// <summary>Field number for the "Annotation" field.</summary>
    public const int AnnotationFieldNumber = 16;
    public global::Atom.Proto.Annotation Annotation {
      get { return msgCase_ == MsgOneofCase.Annotation ? (global::Atom.Proto.Annotation) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Annotation;
      }
    }

    /// <summary>Field number for the "Curve" field.</summary>
    public const int CurveFieldNumber = 17;
    public global::Atom.Proto.Curve Curve {
      get { return msgCase_ == MsgOneofCase.Curve ? (global::Atom.Proto.Curve) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Curve;
      }
    }

    /// <summary>Field number for the "MatrixChanged" field.</summary>
    public const int MatrixChangedFieldNumber = 18;
    public global::Atom.Proto.MatrixChanged MatrixChanged {
      get { return msgCase_ == MsgOneofCase.MatrixChanged ? (global::Atom.Proto.MatrixChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.MatrixChanged;
      }
    }

    /// <summary>Field number for the "VisibilityChanged" field.</summary>
    public const int VisibilityChangedFieldNumber = 19;
    public global::Atom.Proto.VisibilityChanged VisibilityChanged {
      get { return msgCase_ == MsgOneofCase.VisibilityChanged ? (global::Atom.Proto.VisibilityChanged) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.VisibilityChanged;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "Msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      DebugMessage = 1,
      Scene = 2,
      Mesh = 3,
      MeshPointsChanged = 4,
      MeshGeometryChanged = 5,
      MeshMaterialChanged = 6,
      Camera = 7,
      Light = 8,
      LightChanged = 9,
      Material = 10,
      MaterialChanged = 11,
      Texture = 12,
      TextureChanged = 13,
      NameChanged = 14,
      Transform = 15,
      Annotation = 16,
      Curve = 17,
      MatrixChanged = 18,
      VisibilityChanged = 19,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as AtomMessage);
    }

    public bool Equals(AtomMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebugMessage != other.DebugMessage) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if (!object.Equals(MeshPointsChanged, other.MeshPointsChanged)) return false;
      if (!object.Equals(MeshGeometryChanged, other.MeshGeometryChanged)) return false;
      if (!object.Equals(MeshMaterialChanged, other.MeshMaterialChanged)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(Light, other.Light)) return false;
      if (!object.Equals(LightChanged, other.LightChanged)) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (!object.Equals(MaterialChanged, other.MaterialChanged)) return false;
      if (!object.Equals(Texture, other.Texture)) return false;
      if (!object.Equals(TextureChanged, other.TextureChanged)) return false;
      if (!object.Equals(NameChanged, other.NameChanged)) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      if (!object.Equals(Curve, other.Curve)) return false;
      if (!object.Equals(MatrixChanged, other.MatrixChanged)) return false;
      if (!object.Equals(VisibilityChanged, other.VisibilityChanged)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.DebugMessage) hash ^= DebugMessage.GetHashCode();
      if (msgCase_ == MsgOneofCase.Scene) hash ^= Scene.GetHashCode();
      if (msgCase_ == MsgOneofCase.Mesh) hash ^= Mesh.GetHashCode();
      if (msgCase_ == MsgOneofCase.MeshPointsChanged) hash ^= MeshPointsChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.MeshGeometryChanged) hash ^= MeshGeometryChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.MeshMaterialChanged) hash ^= MeshMaterialChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.Camera) hash ^= Camera.GetHashCode();
      if (msgCase_ == MsgOneofCase.Light) hash ^= Light.GetHashCode();
      if (msgCase_ == MsgOneofCase.LightChanged) hash ^= LightChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.Material) hash ^= Material.GetHashCode();
      if (msgCase_ == MsgOneofCase.MaterialChanged) hash ^= MaterialChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.Texture) hash ^= Texture.GetHashCode();
      if (msgCase_ == MsgOneofCase.TextureChanged) hash ^= TextureChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.NameChanged) hash ^= NameChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.Transform) hash ^= Transform.GetHashCode();
      if (msgCase_ == MsgOneofCase.Annotation) hash ^= Annotation.GetHashCode();
      if (msgCase_ == MsgOneofCase.Curve) hash ^= Curve.GetHashCode();
      if (msgCase_ == MsgOneofCase.MatrixChanged) hash ^= MatrixChanged.GetHashCode();
      if (msgCase_ == MsgOneofCase.VisibilityChanged) hash ^= VisibilityChanged.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.DebugMessage) {
        output.WriteRawTag(10);
        output.WriteString(DebugMessage);
      }
      if (msgCase_ == MsgOneofCase.Scene) {
        output.WriteRawTag(18);
        output.WriteMessage(Scene);
      }
      if (msgCase_ == MsgOneofCase.Mesh) {
        output.WriteRawTag(26);
        output.WriteMessage(Mesh);
      }
      if (msgCase_ == MsgOneofCase.MeshPointsChanged) {
        output.WriteRawTag(34);
        output.WriteMessage(MeshPointsChanged);
      }
      if (msgCase_ == MsgOneofCase.MeshGeometryChanged) {
        output.WriteRawTag(42);
        output.WriteMessage(MeshGeometryChanged);
      }
      if (msgCase_ == MsgOneofCase.MeshMaterialChanged) {
        output.WriteRawTag(50);
        output.WriteMessage(MeshMaterialChanged);
      }
      if (msgCase_ == MsgOneofCase.Camera) {
        output.WriteRawTag(58);
        output.WriteMessage(Camera);
      }
      if (msgCase_ == MsgOneofCase.Light) {
        output.WriteRawTag(66);
        output.WriteMessage(Light);
      }
      if (msgCase_ == MsgOneofCase.LightChanged) {
        output.WriteRawTag(74);
        output.WriteMessage(LightChanged);
      }
      if (msgCase_ == MsgOneofCase.Material) {
        output.WriteRawTag(82);
        output.WriteMessage(Material);
      }
      if (msgCase_ == MsgOneofCase.MaterialChanged) {
        output.WriteRawTag(90);
        output.WriteMessage(MaterialChanged);
      }
      if (msgCase_ == MsgOneofCase.Texture) {
        output.WriteRawTag(98);
        output.WriteMessage(Texture);
      }
      if (msgCase_ == MsgOneofCase.TextureChanged) {
        output.WriteRawTag(106);
        output.WriteMessage(TextureChanged);
      }
      if (msgCase_ == MsgOneofCase.NameChanged) {
        output.WriteRawTag(114);
        output.WriteMessage(NameChanged);
      }
      if (msgCase_ == MsgOneofCase.Transform) {
        output.WriteRawTag(122);
        output.WriteMessage(Transform);
      }
      if (msgCase_ == MsgOneofCase.Annotation) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Annotation);
      }
      if (msgCase_ == MsgOneofCase.Curve) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Curve);
      }
      if (msgCase_ == MsgOneofCase.MatrixChanged) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MatrixChanged);
      }
      if (msgCase_ == MsgOneofCase.VisibilityChanged) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(VisibilityChanged);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.DebugMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugMessage);
      }
      if (msgCase_ == MsgOneofCase.Scene) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      if (msgCase_ == MsgOneofCase.Mesh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      if (msgCase_ == MsgOneofCase.MeshPointsChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeshPointsChanged);
      }
      if (msgCase_ == MsgOneofCase.MeshGeometryChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeshGeometryChanged);
      }
      if (msgCase_ == MsgOneofCase.MeshMaterialChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeshMaterialChanged);
      }
      if (msgCase_ == MsgOneofCase.Camera) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (msgCase_ == MsgOneofCase.Light) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Light);
      }
      if (msgCase_ == MsgOneofCase.LightChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightChanged);
      }
      if (msgCase_ == MsgOneofCase.Material) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (msgCase_ == MsgOneofCase.MaterialChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaterialChanged);
      }
      if (msgCase_ == MsgOneofCase.Texture) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Texture);
      }
      if (msgCase_ == MsgOneofCase.TextureChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureChanged);
      }
      if (msgCase_ == MsgOneofCase.NameChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameChanged);
      }
      if (msgCase_ == MsgOneofCase.Transform) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (msgCase_ == MsgOneofCase.Annotation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (msgCase_ == MsgOneofCase.Curve) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Curve);
      }
      if (msgCase_ == MsgOneofCase.MatrixChanged) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatrixChanged);
      }
      if (msgCase_ == MsgOneofCase.VisibilityChanged) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VisibilityChanged);
      }
      return size;
    }

    public void MergeFrom(AtomMessage other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.DebugMessage:
          DebugMessage = other.DebugMessage;
          break;
        case MsgOneofCase.Scene:
          Scene = other.Scene;
          break;
        case MsgOneofCase.Mesh:
          Mesh = other.Mesh;
          break;
        case MsgOneofCase.MeshPointsChanged:
          MeshPointsChanged = other.MeshPointsChanged;
          break;
        case MsgOneofCase.MeshGeometryChanged:
          MeshGeometryChanged = other.MeshGeometryChanged;
          break;
        case MsgOneofCase.MeshMaterialChanged:
          MeshMaterialChanged = other.MeshMaterialChanged;
          break;
        case MsgOneofCase.Camera:
          Camera = other.Camera;
          break;
        case MsgOneofCase.Light:
          Light = other.Light;
          break;
        case MsgOneofCase.LightChanged:
          LightChanged = other.LightChanged;
          break;
        case MsgOneofCase.Material:
          Material = other.Material;
          break;
        case MsgOneofCase.MaterialChanged:
          MaterialChanged = other.MaterialChanged;
          break;
        case MsgOneofCase.Texture:
          Texture = other.Texture;
          break;
        case MsgOneofCase.TextureChanged:
          TextureChanged = other.TextureChanged;
          break;
        case MsgOneofCase.NameChanged:
          NameChanged = other.NameChanged;
          break;
        case MsgOneofCase.Transform:
          Transform = other.Transform;
          break;
        case MsgOneofCase.Annotation:
          Annotation = other.Annotation;
          break;
        case MsgOneofCase.Curve:
          Curve = other.Curve;
          break;
        case MsgOneofCase.MatrixChanged:
          MatrixChanged = other.MatrixChanged;
          break;
        case MsgOneofCase.VisibilityChanged:
          VisibilityChanged = other.VisibilityChanged;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebugMessage = input.ReadString();
            break;
          }
          case 18: {
            global::Atom.Proto.Scene subBuilder = new global::Atom.Proto.Scene();
            if (msgCase_ == MsgOneofCase.Scene) {
              subBuilder.MergeFrom(Scene);
            }
            input.ReadMessage(subBuilder);
            Scene = subBuilder;
            break;
          }
          case 26: {
            global::Atom.Proto.Meshes.Mesh subBuilder = new global::Atom.Proto.Meshes.Mesh();
            if (msgCase_ == MsgOneofCase.Mesh) {
              subBuilder.MergeFrom(Mesh);
            }
            input.ReadMessage(subBuilder);
            Mesh = subBuilder;
            break;
          }
          case 34: {
            global::Atom.Proto.Meshes.MeshPointsChanged subBuilder = new global::Atom.Proto.Meshes.MeshPointsChanged();
            if (msgCase_ == MsgOneofCase.MeshPointsChanged) {
              subBuilder.MergeFrom(MeshPointsChanged);
            }
            input.ReadMessage(subBuilder);
            MeshPointsChanged = subBuilder;
            break;
          }
          case 42: {
            global::Atom.Proto.Meshes.MeshGeometryChanged subBuilder = new global::Atom.Proto.Meshes.MeshGeometryChanged();
            if (msgCase_ == MsgOneofCase.MeshGeometryChanged) {
              subBuilder.MergeFrom(MeshGeometryChanged);
            }
            input.ReadMessage(subBuilder);
            MeshGeometryChanged = subBuilder;
            break;
          }
          case 50: {
            global::Atom.Proto.Meshes.MeshMaterialChanged subBuilder = new global::Atom.Proto.Meshes.MeshMaterialChanged();
            if (msgCase_ == MsgOneofCase.MeshMaterialChanged) {
              subBuilder.MergeFrom(MeshMaterialChanged);
            }
            input.ReadMessage(subBuilder);
            MeshMaterialChanged = subBuilder;
            break;
          }
          case 58: {
            global::Atom.Proto.Camera subBuilder = new global::Atom.Proto.Camera();
            if (msgCase_ == MsgOneofCase.Camera) {
              subBuilder.MergeFrom(Camera);
            }
            input.ReadMessage(subBuilder);
            Camera = subBuilder;
            break;
          }
          case 66: {
            global::Atom.Proto.Lights.Light subBuilder = new global::Atom.Proto.Lights.Light();
            if (msgCase_ == MsgOneofCase.Light) {
              subBuilder.MergeFrom(Light);
            }
            input.ReadMessage(subBuilder);
            Light = subBuilder;
            break;
          }
          case 74: {
            global::Atom.Proto.Lights.LightChanged subBuilder = new global::Atom.Proto.Lights.LightChanged();
            if (msgCase_ == MsgOneofCase.LightChanged) {
              subBuilder.MergeFrom(LightChanged);
            }
            input.ReadMessage(subBuilder);
            LightChanged = subBuilder;
            break;
          }
          case 82: {
            global::Atom.Proto.Materials.Material subBuilder = new global::Atom.Proto.Materials.Material();
            if (msgCase_ == MsgOneofCase.Material) {
              subBuilder.MergeFrom(Material);
            }
            input.ReadMessage(subBuilder);
            Material = subBuilder;
            break;
          }
          case 90: {
            global::Atom.Proto.Materials.MaterialChanged subBuilder = new global::Atom.Proto.Materials.MaterialChanged();
            if (msgCase_ == MsgOneofCase.MaterialChanged) {
              subBuilder.MergeFrom(MaterialChanged);
            }
            input.ReadMessage(subBuilder);
            MaterialChanged = subBuilder;
            break;
          }
          case 98: {
            global::Atom.Proto.Materials.Texture subBuilder = new global::Atom.Proto.Materials.Texture();
            if (msgCase_ == MsgOneofCase.Texture) {
              subBuilder.MergeFrom(Texture);
            }
            input.ReadMessage(subBuilder);
            Texture = subBuilder;
            break;
          }
          case 106: {
            global::Atom.Proto.Materials.TextureChanged subBuilder = new global::Atom.Proto.Materials.TextureChanged();
            if (msgCase_ == MsgOneofCase.TextureChanged) {
              subBuilder.MergeFrom(TextureChanged);
            }
            input.ReadMessage(subBuilder);
            TextureChanged = subBuilder;
            break;
          }
          case 114: {
            global::Atom.Proto.NameChanged subBuilder = new global::Atom.Proto.NameChanged();
            if (msgCase_ == MsgOneofCase.NameChanged) {
              subBuilder.MergeFrom(NameChanged);
            }
            input.ReadMessage(subBuilder);
            NameChanged = subBuilder;
            break;
          }
          case 122: {
            global::Atom.Proto.Transform subBuilder = new global::Atom.Proto.Transform();
            if (msgCase_ == MsgOneofCase.Transform) {
              subBuilder.MergeFrom(Transform);
            }
            input.ReadMessage(subBuilder);
            Transform = subBuilder;
            break;
          }
          case 130: {
            global::Atom.Proto.Annotation subBuilder = new global::Atom.Proto.Annotation();
            if (msgCase_ == MsgOneofCase.Annotation) {
              subBuilder.MergeFrom(Annotation);
            }
            input.ReadMessage(subBuilder);
            Annotation = subBuilder;
            break;
          }
          case 138: {
            global::Atom.Proto.Curve subBuilder = new global::Atom.Proto.Curve();
            if (msgCase_ == MsgOneofCase.Curve) {
              subBuilder.MergeFrom(Curve);
            }
            input.ReadMessage(subBuilder);
            Curve = subBuilder;
            break;
          }
          case 146: {
            global::Atom.Proto.MatrixChanged subBuilder = new global::Atom.Proto.MatrixChanged();
            if (msgCase_ == MsgOneofCase.MatrixChanged) {
              subBuilder.MergeFrom(MatrixChanged);
            }
            input.ReadMessage(subBuilder);
            MatrixChanged = subBuilder;
            break;
          }
          case 154: {
            global::Atom.Proto.VisibilityChanged subBuilder = new global::Atom.Proto.VisibilityChanged();
            if (msgCase_ == MsgOneofCase.VisibilityChanged) {
              subBuilder.MergeFrom(VisibilityChanged);
            }
            input.ReadMessage(subBuilder);
            VisibilityChanged = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
