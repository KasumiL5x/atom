// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshes/MeshMaterialChanged.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Meshes {

  /// <summary>Holder for reflection information generated from meshes/MeshMaterialChanged.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MeshMaterialChangedReflection {

    #region Descriptor
    /// <summary>File descriptor for meshes/MeshMaterialChanged.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeshMaterialChangedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBtZXNoZXMvTWVzaE1hdGVyaWFsQ2hhbmdlZC5wcm90bxIRYXRvbS5wcm90",
            "by5tZXNoZXMiPQoTTWVzaE1hdGVyaWFsQ2hhbmdlZBIQCghNZXNoTmFtZRgB",
            "IAEoCRIUCgxNYXRlcmlhbE5hbWUYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Meshes.MeshMaterialChanged), global::Atom.Proto.Meshes.MeshMaterialChanged.Parser, new[]{ "MeshName", "MaterialName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// *
  ///  Sent when a mesh's material is re/assigned.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MeshMaterialChanged : pb::IMessage<MeshMaterialChanged> {
    private static readonly pb::MessageParser<MeshMaterialChanged> _parser = new pb::MessageParser<MeshMaterialChanged>(() => new MeshMaterialChanged());
    public static pb::MessageParser<MeshMaterialChanged> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Meshes.MeshMaterialChangedReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MeshMaterialChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MeshMaterialChanged(MeshMaterialChanged other) : this() {
      meshName_ = other.meshName_;
      materialName_ = other.materialName_;
    }

    public MeshMaterialChanged Clone() {
      return new MeshMaterialChanged(this);
    }

    /// <summary>Field number for the "MeshName" field.</summary>
    public const int MeshNameFieldNumber = 1;
    private string meshName_ = "";
    /// <summary>
    /// *&lt; Name of the mesh that changed. 
    /// </summary>
    public string MeshName {
      get { return meshName_; }
      set {
        meshName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaterialName" field.</summary>
    public const int MaterialNameFieldNumber = 2;
    private string materialName_ = "";
    /// <summary>
    /// *&lt; Name of the newly assigned material. 
    /// </summary>
    public string MaterialName {
      get { return materialName_; }
      set {
        materialName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MeshMaterialChanged);
    }

    public bool Equals(MeshMaterialChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeshName != other.MeshName) return false;
      if (MaterialName != other.MaterialName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MeshName.Length != 0) hash ^= MeshName.GetHashCode();
      if (MaterialName.Length != 0) hash ^= MaterialName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MeshName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeshName);
      }
      if (MaterialName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MaterialName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MeshName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshName);
      }
      if (MaterialName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialName);
      }
      return size;
    }

    public void MergeFrom(MeshMaterialChanged other) {
      if (other == null) {
        return;
      }
      if (other.MeshName.Length != 0) {
        MeshName = other.MeshName;
      }
      if (other.MaterialName.Length != 0) {
        MaterialName = other.MaterialName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MeshName = input.ReadString();
            break;
          }
          case 18: {
            MaterialName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
