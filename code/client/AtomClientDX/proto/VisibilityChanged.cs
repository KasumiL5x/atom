// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisibilityChanged.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto {

  /// <summary>Holder for reflection information generated from VisibilityChanged.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class VisibilityChangedReflection {

    #region Descriptor
    /// <summary>File descriptor for VisibilityChanged.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VisibilityChangedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdWaXNpYmlsaXR5Q2hhbmdlZC5wcm90bxIKYXRvbS5wcm90byI4ChFWaXNp",
            "YmlsaXR5Q2hhbmdlZBISCgpPYmplY3ROYW1lGAEgASgJEg8KB1Zpc2libGUY",
            "AiABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.VisibilityChanged), global::Atom.Proto.VisibilityChanged.Parser, new[]{ "ObjectName", "Visible" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VisibilityChanged : pb::IMessage<VisibilityChanged> {
    private static readonly pb::MessageParser<VisibilityChanged> _parser = new pb::MessageParser<VisibilityChanged>(() => new VisibilityChanged());
    public static pb::MessageParser<VisibilityChanged> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.VisibilityChangedReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VisibilityChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VisibilityChanged(VisibilityChanged other) : this() {
      objectName_ = other.objectName_;
      visible_ = other.visible_;
    }

    public VisibilityChanged Clone() {
      return new VisibilityChanged(this);
    }

    /// <summary>Field number for the "ObjectName" field.</summary>
    public const int ObjectNameFieldNumber = 1;
    private string objectName_ = "";
    public string ObjectName {
      get { return objectName_; }
      set {
        objectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Visible" field.</summary>
    public const int VisibleFieldNumber = 2;
    private bool visible_;
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VisibilityChanged);
    }

    public bool Equals(VisibilityChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectName != other.ObjectName) return false;
      if (Visible != other.Visible) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectName.Length != 0) hash ^= ObjectName.GetHashCode();
      if (Visible != false) hash ^= Visible.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectName);
      }
      if (Visible != false) {
        output.WriteRawTag(16);
        output.WriteBool(Visible);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectName);
      }
      if (Visible != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(VisibilityChanged other) {
      if (other == null) {
        return;
      }
      if (other.ObjectName.Length != 0) {
        ObjectName = other.ObjectName;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ObjectName = input.ReadString();
            break;
          }
          case 16: {
            Visible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
