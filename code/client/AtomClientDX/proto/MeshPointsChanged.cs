// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshes/MeshPointsChanged.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Meshes {

  /// <summary>Holder for reflection information generated from meshes/MeshPointsChanged.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MeshPointsChangedReflection {

    #region Descriptor
    /// <summary>File descriptor for meshes/MeshPointsChanged.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeshPointsChangedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5tZXNoZXMvTWVzaFBvaW50c0NoYW5nZWQucHJvdG8SEWF0b20ucHJvdG8u",
            "bWVzaGVzGgxWZXJ0ZXgucHJvdG8iSwoRTWVzaFBvaW50c0NoYW5nZWQSEAoI",
            "TWVzaE5hbWUYASABKAkSJAoIVmVydGljZXMYAiADKAsyEi5hdG9tLnByb3Rv",
            "LlZlcnRleGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.VertexReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Meshes.MeshPointsChanged), global::Atom.Proto.Meshes.MeshPointsChanged.Parser, new[]{ "MeshName", "Vertices" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// *
  ///  Sent when a number of vertices change in-place
  ///  without disrupting the order or vertex count.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MeshPointsChanged : pb::IMessage<MeshPointsChanged> {
    private static readonly pb::MessageParser<MeshPointsChanged> _parser = new pb::MessageParser<MeshPointsChanged>(() => new MeshPointsChanged());
    public static pb::MessageParser<MeshPointsChanged> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Meshes.MeshPointsChangedReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MeshPointsChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MeshPointsChanged(MeshPointsChanged other) : this() {
      meshName_ = other.meshName_;
      vertices_ = other.vertices_.Clone();
    }

    public MeshPointsChanged Clone() {
      return new MeshPointsChanged(this);
    }

    /// <summary>Field number for the "MeshName" field.</summary>
    public const int MeshNameFieldNumber = 1;
    private string meshName_ = "";
    /// <summary>
    /// *&lt; Name of the mesh that changed. 
    /// </summary>
    public string MeshName {
      get { return meshName_; }
      set {
        meshName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Vertices" field.</summary>
    public const int VerticesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Atom.Proto.Vertex> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(18, global::Atom.Proto.Vertex.Parser);
    private readonly pbc::RepeatedField<global::Atom.Proto.Vertex> vertices_ = new pbc::RepeatedField<global::Atom.Proto.Vertex>();
    /// <summary>
    /// *&lt; List of vertices that changed. 
    /// </summary>
    public pbc::RepeatedField<global::Atom.Proto.Vertex> Vertices {
      get { return vertices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as MeshPointsChanged);
    }

    public bool Equals(MeshPointsChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeshName != other.MeshName) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MeshName.Length != 0) hash ^= MeshName.GetHashCode();
      hash ^= vertices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MeshName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeshName);
      }
      vertices_.WriteTo(output, _repeated_vertices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MeshName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshName);
      }
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      return size;
    }

    public void MergeFrom(MeshPointsChanged other) {
      if (other == null) {
        return;
      }
      if (other.MeshName.Length != 0) {
        MeshName = other.MeshName;
      }
      vertices_.Add(other.vertices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MeshName = input.ReadString();
            break;
          }
          case 18: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
