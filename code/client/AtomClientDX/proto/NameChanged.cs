// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameChanged.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto {

  /// <summary>Holder for reflection information generated from NameChanged.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class NameChangedReflection {

    #region Descriptor
    /// <summary>File descriptor for NameChanged.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NameChangedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFOYW1lQ2hhbmdlZC5wcm90bxIKYXRvbS5wcm90byIvCgtOYW1lQ2hhbmdl",
            "ZBIPCgdPbGROYW1lGAEgASgJEg8KB05ld05hbWUYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.NameChanged), global::Atom.Proto.NameChanged.Parser, new[]{ "OldName", "NewName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NameChanged : pb::IMessage<NameChanged> {
    private static readonly pb::MessageParser<NameChanged> _parser = new pb::MessageParser<NameChanged>(() => new NameChanged());
    public static pb::MessageParser<NameChanged> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.NameChangedReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NameChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NameChanged(NameChanged other) : this() {
      oldName_ = other.oldName_;
      newName_ = other.newName_;
    }

    public NameChanged Clone() {
      return new NameChanged(this);
    }

    /// <summary>Field number for the "OldName" field.</summary>
    public const int OldNameFieldNumber = 1;
    private string oldName_ = "";
    public string OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NewName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private string newName_ = "";
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NameChanged);
    }

    public bool Equals(NameChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldName != other.OldName) return false;
      if (NewName != other.NewName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (OldName.Length != 0) hash ^= OldName.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OldName);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldName);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      return size;
    }

    public void MergeFrom(NameChanged other) {
      if (other == null) {
        return;
      }
      if (other.OldName.Length != 0) {
        OldName = other.OldName;
      }
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OldName = input.ReadString();
            break;
          }
          case 18: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
