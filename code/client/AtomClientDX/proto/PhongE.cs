// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/PhongE.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Materials {

  /// <summary>Holder for reflection information generated from materials/PhongE.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PhongEReflection {

    #region Descriptor
    /// <summary>File descriptor for materials/PhongE.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PhongEReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZtYXRlcmlhbHMvUGhvbmdFLnByb3RvEhRhdG9tLnByb3RvLm1hdGVyaWFs",
            "cxohbWF0ZXJpYWxzL1RleHR1cmVkUGFyYW1ldGVyLnByb3RvIs4HCgZQaG9u",
            "Z0USNgoFQ29sb3IYASABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFscy5UZXh0",
            "dXJlZFBhcmFtZXRlchI9CgxUcmFuc3BhcmVuY3kYAiABKAsyJy5hdG9tLnBy",
            "b3RvLm1hdGVyaWFscy5UZXh0dXJlZFBhcmFtZXRlchI9CgxBbWJpZW50Q29s",
            "b3IYAyABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFscy5UZXh0dXJlZFBhcmFt",
            "ZXRlchI+Cg1JbmNhbmRlc2NlbmNlGAQgASgLMicuYXRvbS5wcm90by5tYXRl",
            "cmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXISDwoHQnVtcE1hcBgFIAEoCRI+Cg1E",
            "aWZmdXNlQW1vdW50GAYgASgLMicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4",
            "dHVyZWRQYXJhbWV0ZXISPQoMVHJhbnNsdWNlbmNlGAcgASgLMicuYXRvbS5w",
            "cm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXISQgoRVHJhbnNsdWNl",
            "bmNlRGVwdGgYCCABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFscy5UZXh0dXJl",
            "ZFBhcmFtZXRlchJCChFUcmFuc2x1Y2VuY2VGb2N1cxgJIAEoCzInLmF0b20u",
            "cHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1ldGVyEj4KDUdsb3dJbnRl",
            "bnNpdHkYCiABKAsyJy5hdG9tLnByb3RvLm1hdGVyaWFscy5UZXh0dXJlZFBh",
            "cmFtZXRlchI6CglSb3VnaG5lc3MYCyABKAsyJy5hdG9tLnByb3RvLm1hdGVy",
            "aWFscy5UZXh0dXJlZFBhcmFtZXRlchI+Cg1IaWdobGlnaHRTaXplGAwgASgL",
            "MicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXISOgoJ",
            "V2hpdGVuZXNzGA0gASgLMicuYXRvbS5wcm90by5tYXRlcmlhbHMuVGV4dHVy",
            "ZWRQYXJhbWV0ZXISPgoNU3BlY3VsYXJDb2xvchgOIAEoCzInLmF0b20ucHJv",
            "dG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1ldGVyEj0KDFJlZmxlY3Rpdml0",
            "eRgPIAEoCzInLmF0b20ucHJvdG8ubWF0ZXJpYWxzLlRleHR1cmVkUGFyYW1l",
            "dGVyEj8KDlJlZmxlY3RlZENvbG9yGBAgASgLMicuYXRvbS5wcm90by5tYXRl",
            "cmlhbHMuVGV4dHVyZWRQYXJhbWV0ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.Materials.TexturedParameterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Materials.PhongE), global::Atom.Proto.Materials.PhongE.Parser, new[]{ "Color", "Transparency", "AmbientColor", "Incandescence", "BumpMap", "DiffuseAmount", "Translucence", "TranslucenceDepth", "TranslucenceFocus", "GlowIntensity", "Roughness", "HighlightSize", "Whiteness", "SpecularColor", "Reflectivity", "ReflectedColor" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///  lambert stuff
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PhongE : pb::IMessage<PhongE> {
    private static readonly pb::MessageParser<PhongE> _parser = new pb::MessageParser<PhongE>(() => new PhongE());
    public static pb::MessageParser<PhongE> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Materials.PhongEReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PhongE() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PhongE(PhongE other) : this() {
      Color = other.color_ != null ? other.Color.Clone() : null;
      Transparency = other.transparency_ != null ? other.Transparency.Clone() : null;
      AmbientColor = other.ambientColor_ != null ? other.AmbientColor.Clone() : null;
      Incandescence = other.incandescence_ != null ? other.Incandescence.Clone() : null;
      bumpMap_ = other.bumpMap_;
      DiffuseAmount = other.diffuseAmount_ != null ? other.DiffuseAmount.Clone() : null;
      Translucence = other.translucence_ != null ? other.Translucence.Clone() : null;
      TranslucenceDepth = other.translucenceDepth_ != null ? other.TranslucenceDepth.Clone() : null;
      TranslucenceFocus = other.translucenceFocus_ != null ? other.TranslucenceFocus.Clone() : null;
      GlowIntensity = other.glowIntensity_ != null ? other.GlowIntensity.Clone() : null;
      Roughness = other.roughness_ != null ? other.Roughness.Clone() : null;
      HighlightSize = other.highlightSize_ != null ? other.HighlightSize.Clone() : null;
      Whiteness = other.whiteness_ != null ? other.Whiteness.Clone() : null;
      SpecularColor = other.specularColor_ != null ? other.SpecularColor.Clone() : null;
      Reflectivity = other.reflectivity_ != null ? other.Reflectivity.Clone() : null;
      ReflectedColor = other.reflectedColor_ != null ? other.ReflectedColor.Clone() : null;
    }

    public PhongE Clone() {
      return new PhongE(this);
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Atom.Proto.Materials.TexturedParameter color_;
    /// <summary>
    /// *&lt; Base color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Transparency" field.</summary>
    public const int TransparencyFieldNumber = 2;
    private global::Atom.Proto.Materials.TexturedParameter transparency_;
    /// <summary>
    /// *&lt; Transparent color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Transparency {
      get { return transparency_; }
      set {
        transparency_ = value;
      }
    }

    /// <summary>Field number for the "AmbientColor" field.</summary>
    public const int AmbientColorFieldNumber = 3;
    private global::Atom.Proto.Materials.TexturedParameter ambientColor_;
    /// <summary>
    /// *&lt; Ambient color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter AmbientColor {
      get { return ambientColor_; }
      set {
        ambientColor_ = value;
      }
    }

    /// <summary>Field number for the "Incandescence" field.</summary>
    public const int IncandescenceFieldNumber = 4;
    private global::Atom.Proto.Materials.TexturedParameter incandescence_;
    /// <summary>
    /// *&lt; Incandescent color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Incandescence {
      get { return incandescence_; }
      set {
        incandescence_ = value;
      }
    }

    /// <summary>Field number for the "BumpMap" field.</summary>
    public const int BumpMapFieldNumber = 5;
    private string bumpMap_ = "";
    /// <summary>
    /// *&lt; Name of bump map texture. 
    /// </summary>
    public string BumpMap {
      get { return bumpMap_; }
      set {
        bumpMap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiffuseAmount" field.</summary>
    public const int DiffuseAmountFieldNumber = 6;
    private global::Atom.Proto.Materials.TexturedParameter diffuseAmount_;
    /// <summary>
    /// *&lt; Diffuse intensity, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter DiffuseAmount {
      get { return diffuseAmount_; }
      set {
        diffuseAmount_ = value;
      }
    }

    /// <summary>Field number for the "Translucence" field.</summary>
    public const int TranslucenceFieldNumber = 7;
    private global::Atom.Proto.Materials.TexturedParameter translucence_;
    /// <summary>
    /// *&lt; Translucent amount, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Translucence {
      get { return translucence_; }
      set {
        translucence_ = value;
      }
    }

    /// <summary>Field number for the "TranslucenceDepth" field.</summary>
    public const int TranslucenceDepthFieldNumber = 8;
    private global::Atom.Proto.Materials.TexturedParameter translucenceDepth_;
    /// <summary>
    /// *&lt; Translucent depth, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter TranslucenceDepth {
      get { return translucenceDepth_; }
      set {
        translucenceDepth_ = value;
      }
    }

    /// <summary>Field number for the "TranslucenceFocus" field.</summary>
    public const int TranslucenceFocusFieldNumber = 9;
    private global::Atom.Proto.Materials.TexturedParameter translucenceFocus_;
    /// <summary>
    /// *&lt; Translucent focus, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter TranslucenceFocus {
      get { return translucenceFocus_; }
      set {
        translucenceFocus_ = value;
      }
    }

    /// <summary>Field number for the "GlowIntensity" field.</summary>
    public const int GlowIntensityFieldNumber = 10;
    private global::Atom.Proto.Materials.TexturedParameter glowIntensity_;
    /// <summary>
    /// *&lt; Glow intensity, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter GlowIntensity {
      get { return glowIntensity_; }
      set {
        glowIntensity_ = value;
      }
    }

    /// <summary>Field number for the "Roughness" field.</summary>
    public const int RoughnessFieldNumber = 11;
    private global::Atom.Proto.Materials.TexturedParameter roughness_;
    /// <summary>
    /// *&lt; Surface roughness, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Roughness {
      get { return roughness_; }
      set {
        roughness_ = value;
      }
    }

    /// <summary>Field number for the "HighlightSize" field.</summary>
    public const int HighlightSizeFieldNumber = 12;
    private global::Atom.Proto.Materials.TexturedParameter highlightSize_;
    /// <summary>
    /// *&lt; Size of highlight, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter HighlightSize {
      get { return highlightSize_; }
      set {
        highlightSize_ = value;
      }
    }

    /// <summary>Field number for the "Whiteness" field.</summary>
    public const int WhitenessFieldNumber = 13;
    private global::Atom.Proto.Materials.TexturedParameter whiteness_;
    /// <summary>
    /// *&lt; Whiteness, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Whiteness {
      get { return whiteness_; }
      set {
        whiteness_ = value;
      }
    }

    /// <summary>Field number for the "SpecularColor" field.</summary>
    public const int SpecularColorFieldNumber = 14;
    private global::Atom.Proto.Materials.TexturedParameter specularColor_;
    /// <summary>
    /// *&lt; Specular color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter SpecularColor {
      get { return specularColor_; }
      set {
        specularColor_ = value;
      }
    }

    /// <summary>Field number for the "Reflectivity" field.</summary>
    public const int ReflectivityFieldNumber = 15;
    private global::Atom.Proto.Materials.TexturedParameter reflectivity_;
    /// <summary>
    /// *&lt; Reflectivity amount, as float. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter Reflectivity {
      get { return reflectivity_; }
      set {
        reflectivity_ = value;
      }
    }

    /// <summary>Field number for the "ReflectedColor" field.</summary>
    public const int ReflectedColorFieldNumber = 16;
    private global::Atom.Proto.Materials.TexturedParameter reflectedColor_;
    /// <summary>
    /// *&lt; Reflected color, as Color. 
    /// </summary>
    public global::Atom.Proto.Materials.TexturedParameter ReflectedColor {
      get { return reflectedColor_; }
      set {
        reflectedColor_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PhongE);
    }

    public bool Equals(PhongE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Transparency, other.Transparency)) return false;
      if (!object.Equals(AmbientColor, other.AmbientColor)) return false;
      if (!object.Equals(Incandescence, other.Incandescence)) return false;
      if (BumpMap != other.BumpMap) return false;
      if (!object.Equals(DiffuseAmount, other.DiffuseAmount)) return false;
      if (!object.Equals(Translucence, other.Translucence)) return false;
      if (!object.Equals(TranslucenceDepth, other.TranslucenceDepth)) return false;
      if (!object.Equals(TranslucenceFocus, other.TranslucenceFocus)) return false;
      if (!object.Equals(GlowIntensity, other.GlowIntensity)) return false;
      if (!object.Equals(Roughness, other.Roughness)) return false;
      if (!object.Equals(HighlightSize, other.HighlightSize)) return false;
      if (!object.Equals(Whiteness, other.Whiteness)) return false;
      if (!object.Equals(SpecularColor, other.SpecularColor)) return false;
      if (!object.Equals(Reflectivity, other.Reflectivity)) return false;
      if (!object.Equals(ReflectedColor, other.ReflectedColor)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (transparency_ != null) hash ^= Transparency.GetHashCode();
      if (ambientColor_ != null) hash ^= AmbientColor.GetHashCode();
      if (incandescence_ != null) hash ^= Incandescence.GetHashCode();
      if (BumpMap.Length != 0) hash ^= BumpMap.GetHashCode();
      if (diffuseAmount_ != null) hash ^= DiffuseAmount.GetHashCode();
      if (translucence_ != null) hash ^= Translucence.GetHashCode();
      if (translucenceDepth_ != null) hash ^= TranslucenceDepth.GetHashCode();
      if (translucenceFocus_ != null) hash ^= TranslucenceFocus.GetHashCode();
      if (glowIntensity_ != null) hash ^= GlowIntensity.GetHashCode();
      if (roughness_ != null) hash ^= Roughness.GetHashCode();
      if (highlightSize_ != null) hash ^= HighlightSize.GetHashCode();
      if (whiteness_ != null) hash ^= Whiteness.GetHashCode();
      if (specularColor_ != null) hash ^= SpecularColor.GetHashCode();
      if (reflectivity_ != null) hash ^= Reflectivity.GetHashCode();
      if (reflectedColor_ != null) hash ^= ReflectedColor.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (transparency_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transparency);
      }
      if (ambientColor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AmbientColor);
      }
      if (incandescence_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Incandescence);
      }
      if (BumpMap.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BumpMap);
      }
      if (diffuseAmount_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DiffuseAmount);
      }
      if (translucence_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Translucence);
      }
      if (translucenceDepth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TranslucenceDepth);
      }
      if (translucenceFocus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TranslucenceFocus);
      }
      if (glowIntensity_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(GlowIntensity);
      }
      if (roughness_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Roughness);
      }
      if (highlightSize_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(HighlightSize);
      }
      if (whiteness_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Whiteness);
      }
      if (specularColor_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SpecularColor);
      }
      if (reflectivity_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Reflectivity);
      }
      if (reflectedColor_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ReflectedColor);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (transparency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transparency);
      }
      if (ambientColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AmbientColor);
      }
      if (incandescence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Incandescence);
      }
      if (BumpMap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BumpMap);
      }
      if (diffuseAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiffuseAmount);
      }
      if (translucence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translucence);
      }
      if (translucenceDepth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TranslucenceDepth);
      }
      if (translucenceFocus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TranslucenceFocus);
      }
      if (glowIntensity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlowIntensity);
      }
      if (roughness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roughness);
      }
      if (highlightSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighlightSize);
      }
      if (whiteness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Whiteness);
      }
      if (specularColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecularColor);
      }
      if (reflectivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reflectivity);
      }
      if (reflectedColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReflectedColor);
      }
      return size;
    }

    public void MergeFrom(PhongE other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.transparency_ != null) {
        if (transparency_ == null) {
          transparency_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Transparency.MergeFrom(other.Transparency);
      }
      if (other.ambientColor_ != null) {
        if (ambientColor_ == null) {
          ambientColor_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        AmbientColor.MergeFrom(other.AmbientColor);
      }
      if (other.incandescence_ != null) {
        if (incandescence_ == null) {
          incandescence_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Incandescence.MergeFrom(other.Incandescence);
      }
      if (other.BumpMap.Length != 0) {
        BumpMap = other.BumpMap;
      }
      if (other.diffuseAmount_ != null) {
        if (diffuseAmount_ == null) {
          diffuseAmount_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        DiffuseAmount.MergeFrom(other.DiffuseAmount);
      }
      if (other.translucence_ != null) {
        if (translucence_ == null) {
          translucence_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Translucence.MergeFrom(other.Translucence);
      }
      if (other.translucenceDepth_ != null) {
        if (translucenceDepth_ == null) {
          translucenceDepth_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        TranslucenceDepth.MergeFrom(other.TranslucenceDepth);
      }
      if (other.translucenceFocus_ != null) {
        if (translucenceFocus_ == null) {
          translucenceFocus_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        TranslucenceFocus.MergeFrom(other.TranslucenceFocus);
      }
      if (other.glowIntensity_ != null) {
        if (glowIntensity_ == null) {
          glowIntensity_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        GlowIntensity.MergeFrom(other.GlowIntensity);
      }
      if (other.roughness_ != null) {
        if (roughness_ == null) {
          roughness_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Roughness.MergeFrom(other.Roughness);
      }
      if (other.highlightSize_ != null) {
        if (highlightSize_ == null) {
          highlightSize_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        HighlightSize.MergeFrom(other.HighlightSize);
      }
      if (other.whiteness_ != null) {
        if (whiteness_ == null) {
          whiteness_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Whiteness.MergeFrom(other.Whiteness);
      }
      if (other.specularColor_ != null) {
        if (specularColor_ == null) {
          specularColor_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        SpecularColor.MergeFrom(other.SpecularColor);
      }
      if (other.reflectivity_ != null) {
        if (reflectivity_ == null) {
          reflectivity_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        Reflectivity.MergeFrom(other.Reflectivity);
      }
      if (other.reflectedColor_ != null) {
        if (reflectedColor_ == null) {
          reflectedColor_ = new global::Atom.Proto.Materials.TexturedParameter();
        }
        ReflectedColor.MergeFrom(other.ReflectedColor);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (color_ == null) {
              color_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(color_);
            break;
          }
          case 18: {
            if (transparency_ == null) {
              transparency_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(transparency_);
            break;
          }
          case 26: {
            if (ambientColor_ == null) {
              ambientColor_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(ambientColor_);
            break;
          }
          case 34: {
            if (incandescence_ == null) {
              incandescence_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(incandescence_);
            break;
          }
          case 42: {
            BumpMap = input.ReadString();
            break;
          }
          case 50: {
            if (diffuseAmount_ == null) {
              diffuseAmount_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(diffuseAmount_);
            break;
          }
          case 58: {
            if (translucence_ == null) {
              translucence_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(translucence_);
            break;
          }
          case 66: {
            if (translucenceDepth_ == null) {
              translucenceDepth_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(translucenceDepth_);
            break;
          }
          case 74: {
            if (translucenceFocus_ == null) {
              translucenceFocus_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(translucenceFocus_);
            break;
          }
          case 82: {
            if (glowIntensity_ == null) {
              glowIntensity_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(glowIntensity_);
            break;
          }
          case 90: {
            if (roughness_ == null) {
              roughness_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(roughness_);
            break;
          }
          case 98: {
            if (highlightSize_ == null) {
              highlightSize_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(highlightSize_);
            break;
          }
          case 106: {
            if (whiteness_ == null) {
              whiteness_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(whiteness_);
            break;
          }
          case 114: {
            if (specularColor_ == null) {
              specularColor_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(specularColor_);
            break;
          }
          case 122: {
            if (reflectivity_ == null) {
              reflectivity_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(reflectivity_);
            break;
          }
          case 130: {
            if (reflectedColor_ == null) {
              reflectedColor_ = new global::Atom.Proto.Materials.TexturedParameter();
            }
            input.ReadMessage(reflectedColor_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
