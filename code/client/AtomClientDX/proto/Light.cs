// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights/Light.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Lights {

  /// <summary>Holder for reflection information generated from lights/Light.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LightReflection {

    #region Descriptor
    /// <summary>File descriptor for lights/Light.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LightReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJsaWdodHMvTGlnaHQucHJvdG8SEWF0b20ucHJvdG8ubGlnaHRzGhZsaWdo",
            "dHMvTGlnaHRUeXBlLnByb3RvGg1WZWN0b3IzLnByb3RvGgtDb2xvci5wcm90",
            "byKRAwoFTGlnaHQSDAoETmFtZRgBIAEoCRIqCgRUeXBlGAIgASgOMhwuYXRv",
            "bS5wcm90by5saWdodHMuTGlnaHRUeXBlEiUKCFBvc2l0aW9uGAMgASgLMhMu",
            "YXRvbS5wcm90by5WZWN0b3IzEiYKCURpcmVjdGlvbhgEIAEoCzITLmF0b20u",
            "cHJvdG8uVmVjdG9yMxINCgVSYW5nZRgFIAEoAhIgCgVDb2xvchgGIAEoCzIR",
            "LmF0b20ucHJvdG8uQ29sb3ISEQoJSW50ZW5zaXR5GAcgASgCEhEKCUNvbmVB",
            "bmdsZRgIIAEoAhIVCg1QZW51bWJyYUFuZ2xlGAkgASgCEg8KB0Ryb3BvZmYY",
            "CiABKAISDwoHU2hhZG93cxgLIAEoCBIYChBTaGFkb3dSZXNvbHV0aW9uGAwg",
            "ASgFEhIKClNoYWRvd0JpYXMYDSABKAISJgoLU2hhZG93Q29sb3IYDiABKAsy",
            "ES5hdG9tLnByb3RvLkNvbG9yEhkKEUluaXRpYWxWaXNpYmlsaXR5GA8gASgI",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.Lights.LightTypeReflection.Descriptor, global::Atom.Proto.Vector3Reflection.Descriptor, global::Atom.Proto.ColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Lights.Light), global::Atom.Proto.Lights.Light.Parser, new[]{ "Name", "Type", "Position", "Direction", "Range", "Color", "Intensity", "ConeAngle", "PenumbraAngle", "Dropoff", "Shadows", "ShadowResolution", "ShadowBias", "ShadowColor", "InitialVisibility" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Light : pb::IMessage<Light> {
    private static readonly pb::MessageParser<Light> _parser = new pb::MessageParser<Light>(() => new Light());
    public static pb::MessageParser<Light> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Lights.LightReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Light() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Light(Light other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Direction = other.direction_ != null ? other.Direction.Clone() : null;
      range_ = other.range_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      intensity_ = other.intensity_;
      coneAngle_ = other.coneAngle_;
      penumbraAngle_ = other.penumbraAngle_;
      dropoff_ = other.dropoff_;
      shadows_ = other.shadows_;
      shadowResolution_ = other.shadowResolution_;
      shadowBias_ = other.shadowBias_;
      ShadowColor = other.shadowColor_ != null ? other.ShadowColor.Clone() : null;
      initialVisibility_ = other.initialVisibility_;
    }

    public Light Clone() {
      return new Light(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// *&lt; Name of the light. 
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Atom.Proto.Lights.LightType type_ = global::Atom.Proto.Lights.LightType.kLightTypeAmbient;
    /// <summary>
    /// *&lt; Type of light source. 
    /// </summary>
    public global::Atom.Proto.Lights.LightType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Atom.Proto.Vector3 position_;
    /// <summary>
    /// *&lt; World-space position (point, spot). 
    /// </summary>
    public global::Atom.Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::Atom.Proto.Vector3 direction_;
    /// <summary>
    /// *&lt; World-space direction (directional, spot). 
    /// </summary>
    public global::Atom.Proto.Vector3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Range" field.</summary>
    public const int RangeFieldNumber = 5;
    private float range_;
    /// <summary>
    /// *&lt; Light range (point, spot). 
    /// </summary>
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 6;
    private global::Atom.Proto.Color color_;
    /// <summary>
    /// *&lt; Light color. 
    /// </summary>
    public global::Atom.Proto.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Intensity" field.</summary>
    public const int IntensityFieldNumber = 7;
    private float intensity_;
    /// <summary>
    /// *&lt; Light intensity. 
    /// </summary>
    public float Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "ConeAngle" field.</summary>
    public const int ConeAngleFieldNumber = 8;
    private float coneAngle_;
    /// <summary>
    /// *&lt; Interior cone angle in degrees (spot). 
    /// </summary>
    public float ConeAngle {
      get { return coneAngle_; }
      set {
        coneAngle_ = value;
      }
    }

    /// <summary>Field number for the "PenumbraAngle" field.</summary>
    public const int PenumbraAngleFieldNumber = 9;
    private float penumbraAngle_;
    /// <summary>
    /// *&lt; Penumbra angle in degrees (spot). 
    /// </summary>
    public float PenumbraAngle {
      get { return penumbraAngle_; }
      set {
        penumbraAngle_ = value;
      }
    }

    /// <summary>Field number for the "Dropoff" field.</summary>
    public const int DropoffFieldNumber = 10;
    private float dropoff_;
    /// <summary>
    /// *&lt; Light dropoff (spot). 
    /// </summary>
    public float Dropoff {
      get { return dropoff_; }
      set {
        dropoff_ = value;
      }
    }

    /// <summary>Field number for the "Shadows" field.</summary>
    public const int ShadowsFieldNumber = 11;
    private bool shadows_;
    /// <summary>
    /// *&lt; Whether shadows are enabled. 
    /// </summary>
    public bool Shadows {
      get { return shadows_; }
      set {
        shadows_ = value;
      }
    }

    /// <summary>Field number for the "ShadowResolution" field.</summary>
    public const int ShadowResolutionFieldNumber = 12;
    private int shadowResolution_;
    /// <summary>
    /// *&lt; Shadow resolution. 
    /// </summary>
    public int ShadowResolution {
      get { return shadowResolution_; }
      set {
        shadowResolution_ = value;
      }
    }

    /// <summary>Field number for the "ShadowBias" field.</summary>
    public const int ShadowBiasFieldNumber = 13;
    private float shadowBias_;
    /// <summary>
    /// *&lt; Shadow bias. 
    /// </summary>
    public float ShadowBias {
      get { return shadowBias_; }
      set {
        shadowBias_ = value;
      }
    }

    /// <summary>Field number for the "ShadowColor" field.</summary>
    public const int ShadowColorFieldNumber = 14;
    private global::Atom.Proto.Color shadowColor_;
    /// <summary>
    /// *&lt; Shadow color. 
    /// </summary>
    public global::Atom.Proto.Color ShadowColor {
      get { return shadowColor_; }
      set {
        shadowColor_ = value;
      }
    }

    /// <summary>Field number for the "InitialVisibility" field.</summary>
    public const int InitialVisibilityFieldNumber = 15;
    private bool initialVisibility_;
    /// <summary>
    /// *&lt; Visibility upon creation. 
    /// </summary>
    public bool InitialVisibility {
      get { return initialVisibility_; }
      set {
        initialVisibility_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Light);
    }

    public bool Equals(Light other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (Range != other.Range) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Intensity != other.Intensity) return false;
      if (ConeAngle != other.ConeAngle) return false;
      if (PenumbraAngle != other.PenumbraAngle) return false;
      if (Dropoff != other.Dropoff) return false;
      if (Shadows != other.Shadows) return false;
      if (ShadowResolution != other.ShadowResolution) return false;
      if (ShadowBias != other.ShadowBias) return false;
      if (!object.Equals(ShadowColor, other.ShadowColor)) return false;
      if (InitialVisibility != other.InitialVisibility) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != global::Atom.Proto.Lights.LightType.kLightTypeAmbient) hash ^= Type.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Range != 0F) hash ^= Range.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Intensity != 0F) hash ^= Intensity.GetHashCode();
      if (ConeAngle != 0F) hash ^= ConeAngle.GetHashCode();
      if (PenumbraAngle != 0F) hash ^= PenumbraAngle.GetHashCode();
      if (Dropoff != 0F) hash ^= Dropoff.GetHashCode();
      if (Shadows != false) hash ^= Shadows.GetHashCode();
      if (ShadowResolution != 0) hash ^= ShadowResolution.GetHashCode();
      if (ShadowBias != 0F) hash ^= ShadowBias.GetHashCode();
      if (shadowColor_ != null) hash ^= ShadowColor.GetHashCode();
      if (InitialVisibility != false) hash ^= InitialVisibility.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Atom.Proto.Lights.LightType.kLightTypeAmbient) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Direction);
      }
      if (Range != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Range);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (Intensity != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Intensity);
      }
      if (ConeAngle != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ConeAngle);
      }
      if (PenumbraAngle != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PenumbraAngle);
      }
      if (Dropoff != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Dropoff);
      }
      if (Shadows != false) {
        output.WriteRawTag(88);
        output.WriteBool(Shadows);
      }
      if (ShadowResolution != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShadowResolution);
      }
      if (ShadowBias != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(ShadowBias);
      }
      if (shadowColor_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ShadowColor);
      }
      if (InitialVisibility != false) {
        output.WriteRawTag(120);
        output.WriteBool(InitialVisibility);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != global::Atom.Proto.Lights.LightType.kLightTypeAmbient) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Intensity != 0F) {
        size += 1 + 4;
      }
      if (ConeAngle != 0F) {
        size += 1 + 4;
      }
      if (PenumbraAngle != 0F) {
        size += 1 + 4;
      }
      if (Dropoff != 0F) {
        size += 1 + 4;
      }
      if (Shadows != false) {
        size += 1 + 1;
      }
      if (ShadowResolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShadowResolution);
      }
      if (ShadowBias != 0F) {
        size += 1 + 4;
      }
      if (shadowColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShadowColor);
      }
      if (InitialVisibility != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Light other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != global::Atom.Proto.Lights.LightType.kLightTypeAmbient) {
        Type = other.Type;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Atom.Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Atom.Proto.Vector3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Atom.Proto.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Intensity != 0F) {
        Intensity = other.Intensity;
      }
      if (other.ConeAngle != 0F) {
        ConeAngle = other.ConeAngle;
      }
      if (other.PenumbraAngle != 0F) {
        PenumbraAngle = other.PenumbraAngle;
      }
      if (other.Dropoff != 0F) {
        Dropoff = other.Dropoff;
      }
      if (other.Shadows != false) {
        Shadows = other.Shadows;
      }
      if (other.ShadowResolution != 0) {
        ShadowResolution = other.ShadowResolution;
      }
      if (other.ShadowBias != 0F) {
        ShadowBias = other.ShadowBias;
      }
      if (other.shadowColor_ != null) {
        if (shadowColor_ == null) {
          shadowColor_ = new global::Atom.Proto.Color();
        }
        ShadowColor.MergeFrom(other.ShadowColor);
      }
      if (other.InitialVisibility != false) {
        InitialVisibility = other.InitialVisibility;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Atom.Proto.Lights.LightType) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Atom.Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (direction_ == null) {
              direction_ = new global::Atom.Proto.Vector3();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 45: {
            Range = input.ReadFloat();
            break;
          }
          case 50: {
            if (color_ == null) {
              color_ = new global::Atom.Proto.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 61: {
            Intensity = input.ReadFloat();
            break;
          }
          case 69: {
            ConeAngle = input.ReadFloat();
            break;
          }
          case 77: {
            PenumbraAngle = input.ReadFloat();
            break;
          }
          case 85: {
            Dropoff = input.ReadFloat();
            break;
          }
          case 88: {
            Shadows = input.ReadBool();
            break;
          }
          case 96: {
            ShadowResolution = input.ReadInt32();
            break;
          }
          case 109: {
            ShadowBias = input.ReadFloat();
            break;
          }
          case 114: {
            if (shadowColor_ == null) {
              shadowColor_ = new global::Atom.Proto.Color();
            }
            input.ReadMessage(shadowColor_);
            break;
          }
          case 120: {
            InitialVisibility = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
