// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto {

  /// <summary>Holder for reflection information generated from Camera.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for Camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDYW1lcmEucHJvdG8SCmF0b20ucHJvdG8aDVZlY3RvcjMucHJvdG8i7QEK",
            "BkNhbWVyYRIMCgROYW1lGAEgASgJEiUKCFBvc2l0aW9uGAIgASgLMhMuYXRv",
            "bS5wcm90by5WZWN0b3IzEiMKBlRhcmdldBgDIAEoCzITLmF0b20ucHJvdG8u",
            "VmVjdG9yMxIfCgJVcBgEIAEoCzITLmF0b20ucHJvdG8uVmVjdG9yMxITCgtG",
            "aWVsZE9mVmlldxgFIAEoAhITCgtBc3BlY3RSYXRpbxgGIAEoAhIRCglOZWFy",
            "UGxhbmUYByABKAISEAoIRmFyUGxhbmUYCCABKAISGQoRSW5pdGlhbFZpc2li",
            "aWxpdHkYCSABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.Vector3Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Camera), global::Atom.Proto.Camera.Parser, new[]{ "Name", "Position", "Target", "Up", "FieldOfView", "AspectRatio", "NearPlane", "FarPlane", "InitialVisibility" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Camera : pb::IMessage<Camera> {
    private static readonly pb::MessageParser<Camera> _parser = new pb::MessageParser<Camera>(() => new Camera());
    public static pb::MessageParser<Camera> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Camera() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Camera(Camera other) : this() {
      name_ = other.name_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
      Up = other.up_ != null ? other.Up.Clone() : null;
      fieldOfView_ = other.fieldOfView_;
      aspectRatio_ = other.aspectRatio_;
      nearPlane_ = other.nearPlane_;
      farPlane_ = other.farPlane_;
      initialVisibility_ = other.initialVisibility_;
    }

    public Camera Clone() {
      return new Camera(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Atom.Proto.Vector3 position_;
    /// <summary>
    ///  view matrix
    /// </summary>
    public global::Atom.Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Atom.Proto.Vector3 target_;
    public global::Atom.Proto.Vector3 Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "Up" field.</summary>
    public const int UpFieldNumber = 4;
    private global::Atom.Proto.Vector3 up_;
    public global::Atom.Proto.Vector3 Up {
      get { return up_; }
      set {
        up_ = value;
      }
    }

    /// <summary>Field number for the "FieldOfView" field.</summary>
    public const int FieldOfViewFieldNumber = 5;
    private float fieldOfView_;
    /// <summary>
    ///  projection matrix
    /// </summary>
    public float FieldOfView {
      get { return fieldOfView_; }
      set {
        fieldOfView_ = value;
      }
    }

    /// <summary>Field number for the "AspectRatio" field.</summary>
    public const int AspectRatioFieldNumber = 6;
    private float aspectRatio_;
    public float AspectRatio {
      get { return aspectRatio_; }
      set {
        aspectRatio_ = value;
      }
    }

    /// <summary>Field number for the "NearPlane" field.</summary>
    public const int NearPlaneFieldNumber = 7;
    private float nearPlane_;
    public float NearPlane {
      get { return nearPlane_; }
      set {
        nearPlane_ = value;
      }
    }

    /// <summary>Field number for the "FarPlane" field.</summary>
    public const int FarPlaneFieldNumber = 8;
    private float farPlane_;
    public float FarPlane {
      get { return farPlane_; }
      set {
        farPlane_ = value;
      }
    }

    /// <summary>Field number for the "InitialVisibility" field.</summary>
    public const int InitialVisibilityFieldNumber = 9;
    private bool initialVisibility_;
    /// <summary>
    /// *&lt; Visibility upon creation. 
    /// </summary>
    public bool InitialVisibility {
      get { return initialVisibility_; }
      set {
        initialVisibility_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Camera);
    }

    public bool Equals(Camera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (!object.Equals(Up, other.Up)) return false;
      if (FieldOfView != other.FieldOfView) return false;
      if (AspectRatio != other.AspectRatio) return false;
      if (NearPlane != other.NearPlane) return false;
      if (FarPlane != other.FarPlane) return false;
      if (InitialVisibility != other.InitialVisibility) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (up_ != null) hash ^= Up.GetHashCode();
      if (FieldOfView != 0F) hash ^= FieldOfView.GetHashCode();
      if (AspectRatio != 0F) hash ^= AspectRatio.GetHashCode();
      if (NearPlane != 0F) hash ^= NearPlane.GetHashCode();
      if (FarPlane != 0F) hash ^= FarPlane.GetHashCode();
      if (InitialVisibility != false) hash ^= InitialVisibility.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (up_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Up);
      }
      if (FieldOfView != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FieldOfView);
      }
      if (AspectRatio != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AspectRatio);
      }
      if (NearPlane != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(NearPlane);
      }
      if (FarPlane != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(FarPlane);
      }
      if (InitialVisibility != false) {
        output.WriteRawTag(72);
        output.WriteBool(InitialVisibility);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (up_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Up);
      }
      if (FieldOfView != 0F) {
        size += 1 + 4;
      }
      if (AspectRatio != 0F) {
        size += 1 + 4;
      }
      if (NearPlane != 0F) {
        size += 1 + 4;
      }
      if (FarPlane != 0F) {
        size += 1 + 4;
      }
      if (InitialVisibility != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Camera other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Atom.Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Atom.Proto.Vector3();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.up_ != null) {
        if (up_ == null) {
          up_ = new global::Atom.Proto.Vector3();
        }
        Up.MergeFrom(other.Up);
      }
      if (other.FieldOfView != 0F) {
        FieldOfView = other.FieldOfView;
      }
      if (other.AspectRatio != 0F) {
        AspectRatio = other.AspectRatio;
      }
      if (other.NearPlane != 0F) {
        NearPlane = other.NearPlane;
      }
      if (other.FarPlane != 0F) {
        FarPlane = other.FarPlane;
      }
      if (other.InitialVisibility != false) {
        InitialVisibility = other.InitialVisibility;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Atom.Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (target_ == null) {
              target_ = new global::Atom.Proto.Vector3();
            }
            input.ReadMessage(target_);
            break;
          }
          case 34: {
            if (up_ == null) {
              up_ = new global::Atom.Proto.Vector3();
            }
            input.ReadMessage(up_);
            break;
          }
          case 45: {
            FieldOfView = input.ReadFloat();
            break;
          }
          case 53: {
            AspectRatio = input.ReadFloat();
            break;
          }
          case 61: {
            NearPlane = input.ReadFloat();
            break;
          }
          case 69: {
            FarPlane = input.ReadFloat();
            break;
          }
          case 72: {
            InitialVisibility = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
