// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshes/Mesh.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom.Proto.Meshes {

  /// <summary>Holder for reflection information generated from meshes/Mesh.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MeshReflection {

    #region Descriptor
    /// <summary>File descriptor for meshes/Mesh.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeshReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFtZXNoZXMvTWVzaC5wcm90bxIRYXRvbS5wcm90by5tZXNoZXMaDFZlcnRl",
            "eC5wcm90bxoMTWF0cml4LnByb3RvIr0BCgRNZXNoEgwKBE5hbWUYASABKAkS",
            "JAoIVmVydGljZXMYAiADKAsyEi5hdG9tLnByb3RvLlZlcnRleBITCgdJbmRp",
            "Y2VzGAMgAygFQgIQARIYChBUZXhjb29yZFNldE5hbWVzGAQgAygJEhQKDE1h",
            "dGVyaWFsTmFtZRgFIAEoCRIhCgVXb3JsZBgGIAEoCzISLmF0b20ucHJvdG8u",
            "TWF0cml4EhkKEUluaXRpYWxWaXNpYmlsaXR5GAcgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Atom.Proto.VertexReflection.Descriptor, global::Atom.Proto.MatrixReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Proto.Meshes.Mesh), global::Atom.Proto.Meshes.Mesh.Parser, new[]{ "Name", "Vertices", "Indices", "TexcoordSetNames", "MaterialName", "World", "InitialVisibility" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.Proto.Meshes.MeshReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mesh(Mesh other) : this() {
      name_ = other.name_;
      vertices_ = other.vertices_.Clone();
      indices_ = other.indices_.Clone();
      texcoordSetNames_ = other.texcoordSetNames_.Clone();
      materialName_ = other.materialName_;
      World = other.world_ != null ? other.World.Clone() : null;
      initialVisibility_ = other.initialVisibility_;
    }

    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// *&lt; Name of the mesh. 
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Vertices" field.</summary>
    public const int VerticesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Atom.Proto.Vertex> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(18, global::Atom.Proto.Vertex.Parser);
    private readonly pbc::RepeatedField<global::Atom.Proto.Vertex> vertices_ = new pbc::RepeatedField<global::Atom.Proto.Vertex>();
    /// <summary>
    /// *&lt; List of vertices. 
    /// </summary>
    public pbc::RepeatedField<global::Atom.Proto.Vertex> Vertices {
      get { return vertices_; }
    }

    /// <summary>Field number for the "Indices" field.</summary>
    public const int IndicesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_indices_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> indices_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// *&lt; List of indices. 
    /// </summary>
    public pbc::RepeatedField<int> Indices {
      get { return indices_; }
    }

    /// <summary>Field number for the "TexcoordSetNames" field.</summary>
    public const int TexcoordSetNamesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_texcoordSetNames_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> texcoordSetNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// *&lt; List of texcoord set names.  Vertex Texcoord/Tangent/Binormal are the same length as this. 
    /// </summary>
    public pbc::RepeatedField<string> TexcoordSetNames {
      get { return texcoordSetNames_; }
    }

    /// <summary>Field number for the "MaterialName" field.</summary>
    public const int MaterialNameFieldNumber = 5;
    private string materialName_ = "";
    /// <summary>
    /// *&lt; Material name. 
    /// </summary>
    public string MaterialName {
      get { return materialName_; }
      set {
        materialName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "World" field.</summary>
    public const int WorldFieldNumber = 6;
    private global::Atom.Proto.Matrix world_;
    /// <summary>
    /// *&lt; World matrix for using the mesh standalone without an object. 
    /// </summary>
    public global::Atom.Proto.Matrix World {
      get { return world_; }
      set {
        world_ = value;
      }
    }

    /// <summary>Field number for the "InitialVisibility" field.</summary>
    public const int InitialVisibilityFieldNumber = 7;
    private bool initialVisibility_;
    /// <summary>
    /// *&lt; Visibility upon creation. 
    /// </summary>
    public bool InitialVisibility {
      get { return initialVisibility_; }
      set {
        initialVisibility_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      if(!indices_.Equals(other.indices_)) return false;
      if(!texcoordSetNames_.Equals(other.texcoordSetNames_)) return false;
      if (MaterialName != other.MaterialName) return false;
      if (!object.Equals(World, other.World)) return false;
      if (InitialVisibility != other.InitialVisibility) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= vertices_.GetHashCode();
      hash ^= indices_.GetHashCode();
      hash ^= texcoordSetNames_.GetHashCode();
      if (MaterialName.Length != 0) hash ^= MaterialName.GetHashCode();
      if (world_ != null) hash ^= World.GetHashCode();
      if (InitialVisibility != false) hash ^= InitialVisibility.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      vertices_.WriteTo(output, _repeated_vertices_codec);
      indices_.WriteTo(output, _repeated_indices_codec);
      texcoordSetNames_.WriteTo(output, _repeated_texcoordSetNames_codec);
      if (MaterialName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MaterialName);
      }
      if (world_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(World);
      }
      if (InitialVisibility != false) {
        output.WriteRawTag(56);
        output.WriteBool(InitialVisibility);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      size += indices_.CalculateSize(_repeated_indices_codec);
      size += texcoordSetNames_.CalculateSize(_repeated_texcoordSetNames_codec);
      if (MaterialName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialName);
      }
      if (world_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(World);
      }
      if (InitialVisibility != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      vertices_.Add(other.vertices_);
      indices_.Add(other.indices_);
      texcoordSetNames_.Add(other.texcoordSetNames_);
      if (other.MaterialName.Length != 0) {
        MaterialName = other.MaterialName;
      }
      if (other.world_ != null) {
        if (world_ == null) {
          world_ = new global::Atom.Proto.Matrix();
        }
        World.MergeFrom(other.World);
      }
      if (other.InitialVisibility != false) {
        InitialVisibility = other.InitialVisibility;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
          case 26:
          case 24: {
            indices_.AddEntriesFrom(input, _repeated_indices_codec);
            break;
          }
          case 34: {
            texcoordSetNames_.AddEntriesFrom(input, _repeated_texcoordSetNames_codec);
            break;
          }
          case 42: {
            MaterialName = input.ReadString();
            break;
          }
          case 50: {
            if (world_ == null) {
              world_ = new global::Atom.Proto.Matrix();
            }
            input.ReadMessage(world_);
            break;
          }
          case 56: {
            InitialVisibility = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
