// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatrixChanged.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MatrixChanged.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MatrixChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixChanged_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MatrixChanged_2eproto() {
  protobuf_AddDesc_MatrixChanged_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MatrixChanged.proto");
  GOOGLE_CHECK(file != NULL);
  MatrixChanged_descriptor_ = file->message_type(0);
  static const int MatrixChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixChanged, objectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixChanged, matrix_),
  };
  MatrixChanged_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatrixChanged_descriptor_,
      MatrixChanged::default_instance_,
      MatrixChanged_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatrixChanged),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixChanged, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixChanged, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MatrixChanged_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatrixChanged_descriptor_, &MatrixChanged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MatrixChanged_2eproto() {
  delete MatrixChanged::default_instance_;
  delete MatrixChanged_reflection_;
}

void protobuf_AddDesc_MatrixChanged_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::protobuf_AddDesc_Matrix_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MatrixChanged.proto\022\natom.proto\032\014Matri"
    "x.proto\"G\n\rMatrixChanged\022\022\n\nObjectName\030\001"
    " \001(\t\022\"\n\006Matrix\030\002 \001(\0132\022.atom.proto.Matrix"
    "b\006proto3", 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MatrixChanged.proto", &protobuf_RegisterTypes);
  MatrixChanged::default_instance_ = new MatrixChanged();
  MatrixChanged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MatrixChanged_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MatrixChanged_2eproto {
  StaticDescriptorInitializer_MatrixChanged_2eproto() {
    protobuf_AddDesc_MatrixChanged_2eproto();
  }
} static_descriptor_initializer_MatrixChanged_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatrixChanged::kObjectNameFieldNumber;
const int MatrixChanged::kMatrixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatrixChanged::MatrixChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.MatrixChanged)
}

void MatrixChanged::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  matrix_ = const_cast< ::atom::proto::Matrix*>(&::atom::proto::Matrix::default_instance());
}

MatrixChanged::MatrixChanged(const MatrixChanged& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.MatrixChanged)
}

void MatrixChanged::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matrix_ = NULL;
}

MatrixChanged::~MatrixChanged() {
  // @@protoc_insertion_point(destructor:atom.proto.MatrixChanged)
  SharedDtor();
}

void MatrixChanged::SharedDtor() {
  objectname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete matrix_;
  }
}

void MatrixChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixChanged_descriptor_;
}

const MatrixChanged& MatrixChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatrixChanged_2eproto();
  return *default_instance_;
}

MatrixChanged* MatrixChanged::default_instance_ = NULL;

MatrixChanged* MatrixChanged::New(::google::protobuf::Arena* arena) const {
  MatrixChanged* n = new MatrixChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatrixChanged::Clear() {
  objectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && matrix_ != NULL) delete matrix_;
  matrix_ = NULL;
}

bool MatrixChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.MatrixChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ObjectName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.MatrixChanged.ObjectName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Matrix;
        break;
      }

      // optional .atom.proto.Matrix Matrix = 2;
      case 2: {
        if (tag == 18) {
         parse_Matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.MatrixChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.MatrixChanged)
  return false;
#undef DO_
}

void MatrixChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.MatrixChanged)
  // optional string ObjectName = 1;
  if (this->objectname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.MatrixChanged.ObjectName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->objectname(), output);
  }

  // optional .atom.proto.Matrix Matrix = 2;
  if (this->has_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->matrix_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.MatrixChanged)
}

::google::protobuf::uint8* MatrixChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.MatrixChanged)
  // optional string ObjectName = 1;
  if (this->objectname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.MatrixChanged.ObjectName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objectname(), target);
  }

  // optional .atom.proto.Matrix Matrix = 2;
  if (this->has_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->matrix_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.MatrixChanged)
  return target;
}

int MatrixChanged::ByteSize() const {
  int total_size = 0;

  // optional string ObjectName = 1;
  if (this->objectname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objectname());
  }

  // optional .atom.proto.Matrix Matrix = 2;
  if (this->has_matrix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matrix_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixChanged::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatrixChanged* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatrixChanged>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixChanged::MergeFrom(const MatrixChanged& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.objectname().size() > 0) {

    objectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.has_matrix()) {
    mutable_matrix()->::atom::proto::Matrix::MergeFrom(from.matrix());
  }
}

void MatrixChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixChanged::CopyFrom(const MatrixChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixChanged::IsInitialized() const {

  return true;
}

void MatrixChanged::Swap(MatrixChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatrixChanged::InternalSwap(MatrixChanged* other) {
  objectname_.Swap(&other->objectname_);
  std::swap(matrix_, other->matrix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatrixChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixChanged_descriptor_;
  metadata.reflection = MatrixChanged_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatrixChanged

// optional string ObjectName = 1;
void MatrixChanged::clear_objectname() {
  objectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MatrixChanged::objectname() const {
  // @@protoc_insertion_point(field_get:atom.proto.MatrixChanged.ObjectName)
  return objectname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatrixChanged::set_objectname(const ::std::string& value) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.MatrixChanged.ObjectName)
}
 void MatrixChanged::set_objectname(const char* value) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.MatrixChanged.ObjectName)
}
 void MatrixChanged::set_objectname(const char* value, size_t size) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.MatrixChanged.ObjectName)
}
 ::std::string* MatrixChanged::mutable_objectname() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.MatrixChanged.ObjectName)
  return objectname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatrixChanged::release_objectname() {
  
  return objectname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatrixChanged::set_allocated_objectname(::std::string* objectname) {
  if (objectname != NULL) {
    
  } else {
    
  }
  objectname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectname);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.MatrixChanged.ObjectName)
}

// optional .atom.proto.Matrix Matrix = 2;
bool MatrixChanged::has_matrix() const {
  return !_is_default_instance_ && matrix_ != NULL;
}
void MatrixChanged::clear_matrix() {
  if (GetArenaNoVirtual() == NULL && matrix_ != NULL) delete matrix_;
  matrix_ = NULL;
}
const ::atom::proto::Matrix& MatrixChanged::matrix() const {
  // @@protoc_insertion_point(field_get:atom.proto.MatrixChanged.Matrix)
  return matrix_ != NULL ? *matrix_ : *default_instance_->matrix_;
}
::atom::proto::Matrix* MatrixChanged::mutable_matrix() {
  
  if (matrix_ == NULL) {
    matrix_ = new ::atom::proto::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.MatrixChanged.Matrix)
  return matrix_;
}
::atom::proto::Matrix* MatrixChanged::release_matrix() {
  
  ::atom::proto::Matrix* temp = matrix_;
  matrix_ = NULL;
  return temp;
}
void MatrixChanged::set_allocated_matrix(::atom::proto::Matrix* matrix) {
  delete matrix_;
  matrix_ = matrix;
  if (matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.MatrixChanged.Matrix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
