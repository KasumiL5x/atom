// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camera_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Camera_2eproto() {
  protobuf_AddDesc_Camera_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Camera.proto");
  GOOGLE_CHECK(file != NULL);
  Camera_descriptor_ = file->message_type(0);
  static const int Camera_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, fieldofview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, aspectratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, nearplane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, farplane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, initialvisibility_),
  };
  Camera_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Camera_descriptor_,
      Camera::default_instance_,
      Camera_offsets_,
      -1,
      -1,
      -1,
      sizeof(Camera),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Camera_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Camera_descriptor_, &Camera::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Camera_2eproto() {
  delete Camera::default_instance_;
  delete Camera_reflection_;
}

void protobuf_AddDesc_Camera_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::protobuf_AddDesc_Vector3_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Camera.proto\022\natom.proto\032\rVector3.prot"
    "o\"\355\001\n\006Camera\022\014\n\004Name\030\001 \001(\t\022%\n\010Position\030\002"
    " \001(\0132\023.atom.proto.Vector3\022#\n\006Target\030\003 \001("
    "\0132\023.atom.proto.Vector3\022\037\n\002Up\030\004 \001(\0132\023.ato"
    "m.proto.Vector3\022\023\n\013FieldOfView\030\005 \001(\002\022\023\n\013"
    "AspectRatio\030\006 \001(\002\022\021\n\tNearPlane\030\007 \001(\002\022\020\n\010"
    "FarPlane\030\010 \001(\002\022\031\n\021InitialVisibility\030\t \001("
    "\010b\006proto3", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Camera.proto", &protobuf_RegisterTypes);
  Camera::default_instance_ = new Camera();
  Camera::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Camera_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Camera_2eproto {
  StaticDescriptorInitializer_Camera_2eproto() {
    protobuf_AddDesc_Camera_2eproto();
  }
} static_descriptor_initializer_Camera_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Camera::kNameFieldNumber;
const int Camera::kPositionFieldNumber;
const int Camera::kTargetFieldNumber;
const int Camera::kUpFieldNumber;
const int Camera::kFieldOfViewFieldNumber;
const int Camera::kAspectRatioFieldNumber;
const int Camera::kNearPlaneFieldNumber;
const int Camera::kFarPlaneFieldNumber;
const int Camera::kInitialVisibilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Camera::Camera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.Camera)
}

void Camera::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
  target_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
  up_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
}

Camera::Camera(const Camera& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.Camera)
}

void Camera::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  target_ = NULL;
  up_ = NULL;
  fieldofview_ = 0;
  aspectratio_ = 0;
  nearplane_ = 0;
  farplane_ = 0;
  initialvisibility_ = false;
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:atom.proto.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete target_;
    delete up_;
  }
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_descriptor_;
}

const Camera& Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Camera_2eproto();
  return *default_instance_;
}

Camera* Camera::default_instance_ = NULL;

Camera* Camera::New(::google::protobuf::Arena* arena) const {
  Camera* n = new Camera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Camera::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Camera*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fieldofview_, farplane_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
  if (GetArenaNoVirtual() == NULL && up_ != NULL) delete up_;
  up_ = NULL;
  initialvisibility_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.Camera.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // optional .atom.proto.Vector3 Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Target;
        break;
      }

      // optional .atom.proto.Vector3 Target = 3;
      case 3: {
        if (tag == 26) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Up;
        break;
      }

      // optional .atom.proto.Vector3 Up = 4;
      case 4: {
        if (tag == 34) {
         parse_Up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_FieldOfView;
        break;
      }

      // optional float FieldOfView = 5;
      case 5: {
        if (tag == 45) {
         parse_FieldOfView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldofview_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_AspectRatio;
        break;
      }

      // optional float AspectRatio = 6;
      case 6: {
        if (tag == 53) {
         parse_AspectRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspectratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_NearPlane;
        break;
      }

      // optional float NearPlane = 7;
      case 7: {
        if (tag == 61) {
         parse_NearPlane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nearplane_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_FarPlane;
        break;
      }

      // optional float FarPlane = 8;
      case 8: {
        if (tag == 69) {
         parse_FarPlane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farplane_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_InitialVisibility;
        break;
      }

      // optional bool InitialVisibility = 9;
      case 9: {
        if (tag == 72) {
         parse_InitialVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialvisibility_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.Camera)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.Camera.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .atom.proto.Vector3 Position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .atom.proto.Vector3 Target = 3;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->target_, output);
  }

  // optional .atom.proto.Vector3 Up = 4;
  if (this->has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->up_, output);
  }

  // optional float FieldOfView = 5;
  if (this->fieldofview() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fieldofview(), output);
  }

  // optional float AspectRatio = 6;
  if (this->aspectratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->aspectratio(), output);
  }

  // optional float NearPlane = 7;
  if (this->nearplane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->nearplane(), output);
  }

  // optional float FarPlane = 8;
  if (this->farplane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->farplane(), output);
  }

  // optional bool InitialVisibility = 9;
  if (this->initialvisibility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->initialvisibility(), output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.Camera)
}

::google::protobuf::uint8* Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.Camera)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.Camera.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .atom.proto.Vector3 Position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->position_, target);
  }

  // optional .atom.proto.Vector3 Target = 3;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->target_, target);
  }

  // optional .atom.proto.Vector3 Up = 4;
  if (this->has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->up_, target);
  }

  // optional float FieldOfView = 5;
  if (this->fieldofview() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fieldofview(), target);
  }

  // optional float AspectRatio = 6;
  if (this->aspectratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->aspectratio(), target);
  }

  // optional float NearPlane = 7;
  if (this->nearplane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->nearplane(), target);
  }

  // optional float FarPlane = 8;
  if (this->farplane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->farplane(), target);
  }

  // optional bool InitialVisibility = 9;
  if (this->initialvisibility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->initialvisibility(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.Camera)
  return target;
}

int Camera::ByteSize() const {
  int total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .atom.proto.Vector3 Position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .atom.proto.Vector3 Target = 3;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  // optional .atom.proto.Vector3 Up = 4;
  if (this->has_up()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->up_);
  }

  // optional float FieldOfView = 5;
  if (this->fieldofview() != 0) {
    total_size += 1 + 4;
  }

  // optional float AspectRatio = 6;
  if (this->aspectratio() != 0) {
    total_size += 1 + 4;
  }

  // optional float NearPlane = 7;
  if (this->nearplane() != 0) {
    total_size += 1 + 4;
  }

  // optional float FarPlane = 8;
  if (this->farplane() != 0) {
    total_size += 1 + 4;
  }

  // optional bool InitialVisibility = 9;
  if (this->initialvisibility() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Camera* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Camera>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::atom::proto::Vector3::MergeFrom(from.position());
  }
  if (from.has_target()) {
    mutable_target()->::atom::proto::Vector3::MergeFrom(from.target());
  }
  if (from.has_up()) {
    mutable_up()->::atom::proto::Vector3::MergeFrom(from.up());
  }
  if (from.fieldofview() != 0) {
    set_fieldofview(from.fieldofview());
  }
  if (from.aspectratio() != 0) {
    set_aspectratio(from.aspectratio());
  }
  if (from.nearplane() != 0) {
    set_nearplane(from.nearplane());
  }
  if (from.farplane() != 0) {
    set_farplane(from.farplane());
  }
  if (from.initialvisibility() != 0) {
    set_initialvisibility(from.initialvisibility());
  }
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {

  return true;
}

void Camera::Swap(Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera::InternalSwap(Camera* other) {
  name_.Swap(&other->name_);
  std::swap(position_, other->position_);
  std::swap(target_, other->target_);
  std::swap(up_, other->up_);
  std::swap(fieldofview_, other->fieldofview_);
  std::swap(aspectratio_, other->aspectratio_);
  std::swap(nearplane_, other->nearplane_);
  std::swap(farplane_, other->farplane_);
  std::swap(initialvisibility_, other->initialvisibility_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camera_descriptor_;
  metadata.reflection = Camera_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Camera

// optional string Name = 1;
void Camera::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Camera::name() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Camera::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.Camera.Name)
}
 void Camera::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.Camera.Name)
}
 void Camera::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.Camera.Name)
}
 ::std::string* Camera::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.Camera.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Camera::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Camera::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Camera.Name)
}

// optional .atom.proto.Vector3 Position = 2;
bool Camera::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Camera::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::atom::proto::Vector3& Camera::position() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::atom::proto::Vector3* Camera::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Camera.Position)
  return position_;
}
::atom::proto::Vector3* Camera::release_position() {
  
  ::atom::proto::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
void Camera::set_allocated_position(::atom::proto::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Camera.Position)
}

// optional .atom.proto.Vector3 Target = 3;
bool Camera::has_target() const {
  return !_is_default_instance_ && target_ != NULL;
}
void Camera::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::atom::proto::Vector3& Camera::target() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.Target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
::atom::proto::Vector3* Camera::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Camera.Target)
  return target_;
}
::atom::proto::Vector3* Camera::release_target() {
  
  ::atom::proto::Vector3* temp = target_;
  target_ = NULL;
  return temp;
}
void Camera::set_allocated_target(::atom::proto::Vector3* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Camera.Target)
}

// optional .atom.proto.Vector3 Up = 4;
bool Camera::has_up() const {
  return !_is_default_instance_ && up_ != NULL;
}
void Camera::clear_up() {
  if (GetArenaNoVirtual() == NULL && up_ != NULL) delete up_;
  up_ = NULL;
}
const ::atom::proto::Vector3& Camera::up() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.Up)
  return up_ != NULL ? *up_ : *default_instance_->up_;
}
::atom::proto::Vector3* Camera::mutable_up() {
  
  if (up_ == NULL) {
    up_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Camera.Up)
  return up_;
}
::atom::proto::Vector3* Camera::release_up() {
  
  ::atom::proto::Vector3* temp = up_;
  up_ = NULL;
  return temp;
}
void Camera::set_allocated_up(::atom::proto::Vector3* up) {
  delete up_;
  up_ = up;
  if (up) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Camera.Up)
}

// optional float FieldOfView = 5;
void Camera::clear_fieldofview() {
  fieldofview_ = 0;
}
 float Camera::fieldofview() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.FieldOfView)
  return fieldofview_;
}
 void Camera::set_fieldofview(float value) {
  
  fieldofview_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Camera.FieldOfView)
}

// optional float AspectRatio = 6;
void Camera::clear_aspectratio() {
  aspectratio_ = 0;
}
 float Camera::aspectratio() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.AspectRatio)
  return aspectratio_;
}
 void Camera::set_aspectratio(float value) {
  
  aspectratio_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Camera.AspectRatio)
}

// optional float NearPlane = 7;
void Camera::clear_nearplane() {
  nearplane_ = 0;
}
 float Camera::nearplane() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.NearPlane)
  return nearplane_;
}
 void Camera::set_nearplane(float value) {
  
  nearplane_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Camera.NearPlane)
}

// optional float FarPlane = 8;
void Camera::clear_farplane() {
  farplane_ = 0;
}
 float Camera::farplane() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.FarPlane)
  return farplane_;
}
 void Camera::set_farplane(float value) {
  
  farplane_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Camera.FarPlane)
}

// optional bool InitialVisibility = 9;
void Camera::clear_initialvisibility() {
  initialvisibility_ = false;
}
 bool Camera::initialvisibility() const {
  // @@protoc_insertion_point(field_get:atom.proto.Camera.InitialVisibility)
  return initialvisibility_;
}
 void Camera::set_initialvisibility(bool value) {
  
  initialvisibility_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Camera.InitialVisibility)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
