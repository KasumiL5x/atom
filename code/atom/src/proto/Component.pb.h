// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Component.proto

#ifndef PROTOBUF_Component_2eproto__INCLUDED
#define PROTOBUF_Component_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Component_2eproto();
void protobuf_AssignDesc_Component_2eproto();
void protobuf_ShutdownFile_Component_2eproto();

class Component;

enum Component_ComponentType {
  Component_ComponentType_kMesh = 0,
  Component_ComponentType_kLight = 2,
  Component_ComponentType_kCamera = 3,
  Component_ComponentType_kAnnotation = 4,
  Component_ComponentType_kCurve = 5,
  Component_ComponentType_Component_ComponentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Component_ComponentType_Component_ComponentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Component_ComponentType_IsValid(int value);
const Component_ComponentType Component_ComponentType_ComponentType_MIN = Component_ComponentType_kMesh;
const Component_ComponentType Component_ComponentType_ComponentType_MAX = Component_ComponentType_kCurve;
const int Component_ComponentType_ComponentType_ARRAYSIZE = Component_ComponentType_ComponentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Component_ComponentType_descriptor();
inline const ::std::string& Component_ComponentType_Name(Component_ComponentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Component_ComponentType_descriptor(), value);
}
inline bool Component_ComponentType_Parse(
    const ::std::string& name, Component_ComponentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Component_ComponentType>(
    Component_ComponentType_descriptor(), name, value);
}
// ===================================================================

class Component : public ::google::protobuf::Message {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Component& default_instance();

  void Swap(Component* other);

  // implements Message ----------------------------------------------

  inline Component* New() const { return New(NULL); }

  Component* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Component* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Component_ComponentType ComponentType;
  static const ComponentType kMesh = Component_ComponentType_kMesh;
  static const ComponentType kLight = Component_ComponentType_kLight;
  static const ComponentType kCamera = Component_ComponentType_kCamera;
  static const ComponentType kAnnotation = Component_ComponentType_kAnnotation;
  static const ComponentType kCurve = Component_ComponentType_kCurve;
  static inline bool ComponentType_IsValid(int value) {
    return Component_ComponentType_IsValid(value);
  }
  static const ComponentType ComponentType_MIN =
    Component_ComponentType_ComponentType_MIN;
  static const ComponentType ComponentType_MAX =
    Component_ComponentType_ComponentType_MAX;
  static const int ComponentType_ARRAYSIZE =
    Component_ComponentType_ComponentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ComponentType_descriptor() {
    return Component_ComponentType_descriptor();
  }
  static inline const ::std::string& ComponentType_Name(ComponentType value) {
    return Component_ComponentType_Name(value);
  }
  static inline bool ComponentType_Parse(const ::std::string& name,
      ComponentType* value) {
    return Component_ComponentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .atom.proto.Component.ComponentType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::atom::proto::Component_ComponentType type() const;
  void set_type(::atom::proto::Component_ComponentType value);

  // optional string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:atom.proto.Component)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Component_2eproto();
  friend void protobuf_AssignDesc_Component_2eproto();
  friend void protobuf_ShutdownFile_Component_2eproto();

  void InitAsDefaultInstance();
  static Component* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Component

// optional .atom.proto.Component.ComponentType Type = 1;
inline void Component::clear_type() {
  type_ = 0;
}
inline ::atom::proto::Component_ComponentType Component::type() const {
  // @@protoc_insertion_point(field_get:atom.proto.Component.Type)
  return static_cast< ::atom::proto::Component_ComponentType >(type_);
}
inline void Component::set_type(::atom::proto::Component_ComponentType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Component.Type)
}

// optional string Name = 2;
inline void Component::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Component::name() const {
  // @@protoc_insertion_point(field_get:atom.proto.Component.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.Component.Name)
}
inline void Component::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.Component.Name)
}
inline void Component::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.Component.Name)
}
inline ::std::string* Component::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.Component.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Component.Name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atom::proto::Component_ComponentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atom::proto::Component_ComponentType>() {
  return ::atom::proto::Component_ComponentType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Component_2eproto__INCLUDED
