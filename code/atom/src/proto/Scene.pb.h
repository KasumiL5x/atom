// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#ifndef PROTOBUF_Scene_2eproto__INCLUDED
#define PROTOBUF_Scene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "SceneObject.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Scene_2eproto();
void protobuf_AssignDesc_Scene_2eproto();
void protobuf_ShutdownFile_Scene_2eproto();

class Scene;

enum Scene_Reason {
  Scene_Reason_kRebuildOnConnected = 0,
  Scene_Reason_kRebuildOnNew = 1,
  Scene_Reason_kRebuildOnOpen = 2,
  Scene_Reason_kAdded = 3,
  Scene_Reason_kRemoved = 4,
  Scene_Reason_Scene_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Scene_Reason_Scene_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Scene_Reason_IsValid(int value);
const Scene_Reason Scene_Reason_Reason_MIN = Scene_Reason_kRebuildOnConnected;
const Scene_Reason Scene_Reason_Reason_MAX = Scene_Reason_kRemoved;
const int Scene_Reason_Reason_ARRAYSIZE = Scene_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scene_Reason_descriptor();
inline const ::std::string& Scene_Reason_Name(Scene_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scene_Reason_descriptor(), value);
}
inline bool Scene_Reason_Parse(
    const ::std::string& name, Scene_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scene_Reason>(
    Scene_Reason_descriptor(), name, value);
}
// ===================================================================

class Scene : public ::google::protobuf::Message {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  void Swap(Scene* other);

  // implements Message ----------------------------------------------

  inline Scene* New() const { return New(NULL); }

  Scene* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Scene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Scene_Reason Reason;
  static const Reason kRebuildOnConnected = Scene_Reason_kRebuildOnConnected;
  static const Reason kRebuildOnNew = Scene_Reason_kRebuildOnNew;
  static const Reason kRebuildOnOpen = Scene_Reason_kRebuildOnOpen;
  static const Reason kAdded = Scene_Reason_kAdded;
  static const Reason kRemoved = Scene_Reason_kRemoved;
  static inline bool Reason_IsValid(int value) {
    return Scene_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    Scene_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    Scene_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    Scene_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return Scene_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return Scene_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return Scene_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .atom.proto.Scene.Reason TransferReason = 1;
  void clear_transferreason();
  static const int kTransferReasonFieldNumber = 1;
  ::atom::proto::Scene_Reason transferreason() const;
  void set_transferreason(::atom::proto::Scene_Reason value);

  // repeated .atom.proto.SceneObject Meshes = 2;
  int meshes_size() const;
  void clear_meshes();
  static const int kMeshesFieldNumber = 2;
  const ::atom::proto::SceneObject& meshes(int index) const;
  ::atom::proto::SceneObject* mutable_meshes(int index);
  ::atom::proto::SceneObject* add_meshes();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_meshes();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      meshes() const;

  // repeated .atom.proto.SceneObject Lights = 3;
  int lights_size() const;
  void clear_lights();
  static const int kLightsFieldNumber = 3;
  const ::atom::proto::SceneObject& lights(int index) const;
  ::atom::proto::SceneObject* mutable_lights(int index);
  ::atom::proto::SceneObject* add_lights();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_lights();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      lights() const;

  // repeated .atom.proto.SceneObject Cameras = 4;
  int cameras_size() const;
  void clear_cameras();
  static const int kCamerasFieldNumber = 4;
  const ::atom::proto::SceneObject& cameras(int index) const;
  ::atom::proto::SceneObject* mutable_cameras(int index);
  ::atom::proto::SceneObject* add_cameras();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_cameras();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      cameras() const;

  // repeated .atom.proto.SceneObject Materials = 5;
  int materials_size() const;
  void clear_materials();
  static const int kMaterialsFieldNumber = 5;
  const ::atom::proto::SceneObject& materials(int index) const;
  ::atom::proto::SceneObject* mutable_materials(int index);
  ::atom::proto::SceneObject* add_materials();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_materials();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      materials() const;

  // repeated .atom.proto.SceneObject Textures = 6;
  int textures_size() const;
  void clear_textures();
  static const int kTexturesFieldNumber = 6;
  const ::atom::proto::SceneObject& textures(int index) const;
  ::atom::proto::SceneObject* mutable_textures(int index);
  ::atom::proto::SceneObject* add_textures();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_textures();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      textures() const;

  // repeated .atom.proto.SceneObject Transforms = 7;
  int transforms_size() const;
  void clear_transforms();
  static const int kTransformsFieldNumber = 7;
  const ::atom::proto::SceneObject& transforms(int index) const;
  ::atom::proto::SceneObject* mutable_transforms(int index);
  ::atom::proto::SceneObject* add_transforms();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_transforms();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      transforms() const;

  // repeated .atom.proto.SceneObject Annotations = 8;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 8;
  const ::atom::proto::SceneObject& annotations(int index) const;
  ::atom::proto::SceneObject* mutable_annotations(int index);
  ::atom::proto::SceneObject* add_annotations();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_annotations();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      annotations() const;

  // repeated .atom.proto.SceneObject Curves = 9;
  int curves_size() const;
  void clear_curves();
  static const int kCurvesFieldNumber = 9;
  const ::atom::proto::SceneObject& curves(int index) const;
  ::atom::proto::SceneObject* mutable_curves(int index);
  ::atom::proto::SceneObject* add_curves();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
      mutable_curves();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
      curves() const;

  // @@protoc_insertion_point(class_scope:atom.proto.Scene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > meshes_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > lights_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > cameras_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > materials_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > textures_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > transforms_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > annotations_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject > curves_;
  int transferreason_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Scene_2eproto();
  friend void protobuf_AssignDesc_Scene_2eproto();
  friend void protobuf_ShutdownFile_Scene_2eproto();

  void InitAsDefaultInstance();
  static Scene* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Scene

// optional .atom.proto.Scene.Reason TransferReason = 1;
inline void Scene::clear_transferreason() {
  transferreason_ = 0;
}
inline ::atom::proto::Scene_Reason Scene::transferreason() const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.TransferReason)
  return static_cast< ::atom::proto::Scene_Reason >(transferreason_);
}
inline void Scene::set_transferreason(::atom::proto::Scene_Reason value) {
  
  transferreason_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Scene.TransferReason)
}

// repeated .atom.proto.SceneObject Meshes = 2;
inline int Scene::meshes_size() const {
  return meshes_.size();
}
inline void Scene::clear_meshes() {
  meshes_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::meshes(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Meshes)
  return meshes_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Meshes)
  return meshes_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_meshes() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Meshes)
  return meshes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Meshes)
  return &meshes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::meshes() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Meshes)
  return meshes_;
}

// repeated .atom.proto.SceneObject Lights = 3;
inline int Scene::lights_size() const {
  return lights_.size();
}
inline void Scene::clear_lights() {
  lights_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::lights(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Lights)
  return lights_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Lights)
  return lights_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_lights() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Lights)
  return lights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Lights)
  return &lights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::lights() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Lights)
  return lights_;
}

// repeated .atom.proto.SceneObject Cameras = 4;
inline int Scene::cameras_size() const {
  return cameras_.size();
}
inline void Scene::clear_cameras() {
  cameras_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::cameras(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Cameras)
  return cameras_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Cameras)
  return cameras_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_cameras() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Cameras)
  return cameras_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Cameras)
  return &cameras_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::cameras() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Cameras)
  return cameras_;
}

// repeated .atom.proto.SceneObject Materials = 5;
inline int Scene::materials_size() const {
  return materials_.size();
}
inline void Scene::clear_materials() {
  materials_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::materials(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Materials)
  return materials_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Materials)
  return materials_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_materials() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Materials)
  return materials_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Materials)
  return &materials_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::materials() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Materials)
  return materials_;
}

// repeated .atom.proto.SceneObject Textures = 6;
inline int Scene::textures_size() const {
  return textures_.size();
}
inline void Scene::clear_textures() {
  textures_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::textures(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Textures)
  return textures_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Textures)
  return textures_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_textures() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Textures)
  return textures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Textures)
  return &textures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::textures() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Textures)
  return textures_;
}

// repeated .atom.proto.SceneObject Transforms = 7;
inline int Scene::transforms_size() const {
  return transforms_.size();
}
inline void Scene::clear_transforms() {
  transforms_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::transforms(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Transforms)
  return transforms_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Transforms)
  return transforms_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_transforms() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Transforms)
  return transforms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_transforms() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Transforms)
  return &transforms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::transforms() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Transforms)
  return transforms_;
}

// repeated .atom.proto.SceneObject Annotations = 8;
inline int Scene::annotations_size() const {
  return annotations_.size();
}
inline void Scene::clear_annotations() {
  annotations_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::annotations(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Annotations)
  return annotations_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Annotations)
  return annotations_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_annotations() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Annotations)
  return annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Annotations)
  return &annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::annotations() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Annotations)
  return annotations_;
}

// repeated .atom.proto.SceneObject Curves = 9;
inline int Scene::curves_size() const {
  return curves_.size();
}
inline void Scene::clear_curves() {
  curves_.Clear();
}
inline const ::atom::proto::SceneObject& Scene::curves(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Scene.Curves)
  return curves_.Get(index);
}
inline ::atom::proto::SceneObject* Scene::mutable_curves(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Scene.Curves)
  return curves_.Mutable(index);
}
inline ::atom::proto::SceneObject* Scene::add_curves() {
  // @@protoc_insertion_point(field_add:atom.proto.Scene.Curves)
  return curves_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >*
Scene::mutable_curves() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Scene.Curves)
  return &curves_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::SceneObject >&
Scene::curves() const {
  // @@protoc_insertion_point(field_list:atom.proto.Scene.Curves)
  return curves_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atom::proto::Scene_Reason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atom::proto::Scene_Reason>() {
  return ::atom::proto::Scene_Reason_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Scene_2eproto__INCLUDED
