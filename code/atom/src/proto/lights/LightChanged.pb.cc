// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights/LightChanged.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lights/LightChanged.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace lights {

namespace {

const ::google::protobuf::Descriptor* LightChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightChanged_reflection_ = NULL;
struct LightChangedOneofInstance {
  int type_;
  const ::atom::proto::Vector3* position_;
  const ::atom::proto::Vector3* direction_;
  float range_;
  const ::atom::proto::Color* color_;
  float intensity_;
  float coneangle_;
  float penumbraangle_;
  float dropoff_;
  bool shadows_;
  ::google::protobuf::int32 shadowresolution_;
  float shadowbias_;
  const ::atom::proto::Color* shadowcolor_;
}* LightChanged_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_lights_2fLightChanged_2eproto() {
  protobuf_AddDesc_lights_2fLightChanged_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lights/LightChanged.proto");
  GOOGLE_CHECK(file != NULL);
  LightChanged_descriptor_ = file->message_type(0);
  static const int LightChanged_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightChanged, lightname_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, position_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, direction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, color_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, intensity_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, coneangle_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, penumbraangle_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, dropoff_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, shadows_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, shadowresolution_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, shadowbias_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LightChanged_default_oneof_instance_, shadowcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightChanged, Property_),
  };
  LightChanged_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LightChanged_descriptor_,
      LightChanged::default_instance_,
      LightChanged_offsets_,
      -1,
      -1,
      -1,
      LightChanged_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightChanged, _oneof_case_[0]),
      sizeof(LightChanged),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightChanged, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightChanged, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lights_2fLightChanged_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LightChanged_descriptor_, &LightChanged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lights_2fLightChanged_2eproto() {
  delete LightChanged::default_instance_;
  delete LightChanged_default_oneof_instance_;
  delete LightChanged_reflection_;
}

void protobuf_AddDesc_lights_2fLightChanged_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::lights::protobuf_AddDesc_lights_2fLightType_2eproto();
  ::atom::proto::protobuf_AddDesc_Vector3_2eproto();
  ::atom::proto::protobuf_AddDesc_Color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031lights/LightChanged.proto\022\021atom.proto."
    "lights\032\026lights/LightType.proto\032\rVector3."
    "proto\032\013Color.proto\"\250\003\n\014LightChanged\022\021\n\tL"
    "ightName\030\001 \001(\t\022,\n\004Type\030\002 \001(\0162\034.atom.prot"
    "o.lights.LightTypeH\000\022\'\n\010Position\030\003 \001(\0132\023"
    ".atom.proto.Vector3H\000\022(\n\tDirection\030\004 \001(\013"
    "2\023.atom.proto.Vector3H\000\022\017\n\005Range\030\005 \001(\002H\000"
    "\022\"\n\005Color\030\006 \001(\0132\021.atom.proto.ColorH\000\022\023\n\t"
    "Intensity\030\007 \001(\002H\000\022\023\n\tConeAngle\030\010 \001(\002H\000\022\027"
    "\n\rPenumbraAngle\030\t \001(\002H\000\022\021\n\007Dropoff\030\n \001(\002"
    "H\000\022\021\n\007Shadows\030\013 \001(\010H\000\022\032\n\020ShadowResolutio"
    "n\030\014 \001(\005H\000\022\024\n\nShadowBias\030\r \001(\002H\000\022(\n\013Shado"
    "wColor\030\016 \001(\0132\021.atom.proto.ColorH\000B\n\n\010Pro"
    "pertyb\006proto3", 533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lights/LightChanged.proto", &protobuf_RegisterTypes);
  LightChanged::default_instance_ = new LightChanged();
  LightChanged_default_oneof_instance_ = new LightChangedOneofInstance();
  LightChanged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lights_2fLightChanged_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lights_2fLightChanged_2eproto {
  StaticDescriptorInitializer_lights_2fLightChanged_2eproto() {
    protobuf_AddDesc_lights_2fLightChanged_2eproto();
  }
} static_descriptor_initializer_lights_2fLightChanged_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightChanged::kLightNameFieldNumber;
const int LightChanged::kTypeFieldNumber;
const int LightChanged::kPositionFieldNumber;
const int LightChanged::kDirectionFieldNumber;
const int LightChanged::kRangeFieldNumber;
const int LightChanged::kColorFieldNumber;
const int LightChanged::kIntensityFieldNumber;
const int LightChanged::kConeAngleFieldNumber;
const int LightChanged::kPenumbraAngleFieldNumber;
const int LightChanged::kDropoffFieldNumber;
const int LightChanged::kShadowsFieldNumber;
const int LightChanged::kShadowResolutionFieldNumber;
const int LightChanged::kShadowBiasFieldNumber;
const int LightChanged::kShadowColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightChanged::LightChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.lights.LightChanged)
}

void LightChanged::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  LightChanged_default_oneof_instance_->type_ = 0;
  LightChanged_default_oneof_instance_->position_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
  LightChanged_default_oneof_instance_->direction_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
  LightChanged_default_oneof_instance_->range_ = 0;
  LightChanged_default_oneof_instance_->color_ = const_cast< ::atom::proto::Color*>(&::atom::proto::Color::default_instance());
  LightChanged_default_oneof_instance_->intensity_ = 0;
  LightChanged_default_oneof_instance_->coneangle_ = 0;
  LightChanged_default_oneof_instance_->penumbraangle_ = 0;
  LightChanged_default_oneof_instance_->dropoff_ = 0;
  LightChanged_default_oneof_instance_->shadows_ = false;
  LightChanged_default_oneof_instance_->shadowresolution_ = 0;
  LightChanged_default_oneof_instance_->shadowbias_ = 0;
  LightChanged_default_oneof_instance_->shadowcolor_ = const_cast< ::atom::proto::Color*>(&::atom::proto::Color::default_instance());
}

LightChanged::LightChanged(const LightChanged& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.lights.LightChanged)
}

void LightChanged::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lightname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_Property();
}

LightChanged::~LightChanged() {
  // @@protoc_insertion_point(destructor:atom.proto.lights.LightChanged)
  SharedDtor();
}

void LightChanged::SharedDtor() {
  lightname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Property()) {
    clear_Property();
  }
  if (this != default_instance_) {
  }
}

void LightChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightChanged_descriptor_;
}

const LightChanged& LightChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lights_2fLightChanged_2eproto();
  return *default_instance_;
}

LightChanged* LightChanged::default_instance_ = NULL;

LightChanged* LightChanged::New(::google::protobuf::Arena* arena) const {
  LightChanged* n = new LightChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LightChanged::clear_Property() {
  switch(Property_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kPosition: {
      delete Property_.position_;
      break;
    }
    case kDirection: {
      delete Property_.direction_;
      break;
    }
    case kRange: {
      // No need to clear
      break;
    }
    case kColor: {
      delete Property_.color_;
      break;
    }
    case kIntensity: {
      // No need to clear
      break;
    }
    case kConeAngle: {
      // No need to clear
      break;
    }
    case kPenumbraAngle: {
      // No need to clear
      break;
    }
    case kDropoff: {
      // No need to clear
      break;
    }
    case kShadows: {
      // No need to clear
      break;
    }
    case kShadowResolution: {
      // No need to clear
      break;
    }
    case kShadowBias: {
      // No need to clear
      break;
    }
    case kShadowColor: {
      delete Property_.shadowcolor_;
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void LightChanged::Clear() {
  lightname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_Property();
}

bool LightChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.lights.LightChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string LightName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lightname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lightname().data(), this->lightname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.lights.LightChanged.LightName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .atom.proto.lights.LightType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::atom::proto::lights::LightType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // optional .atom.proto.Vector3 Position = 3;
      case 3: {
        if (tag == 26) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Direction;
        break;
      }

      // optional .atom.proto.Vector3 Direction = 4;
      case 4: {
        if (tag == 34) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Range;
        break;
      }

      // optional float Range = 5;
      case 5: {
        if (tag == 45) {
         parse_Range:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Color;
        break;
      }

      // optional .atom.proto.Color Color = 6;
      case 6: {
        if (tag == 50) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Intensity;
        break;
      }

      // optional float Intensity = 7;
      case 7: {
        if (tag == 61) {
         parse_Intensity:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.intensity_)));
          set_has_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_ConeAngle;
        break;
      }

      // optional float ConeAngle = 8;
      case 8: {
        if (tag == 69) {
         parse_ConeAngle:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.coneangle_)));
          set_has_coneangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_PenumbraAngle;
        break;
      }

      // optional float PenumbraAngle = 9;
      case 9: {
        if (tag == 77) {
         parse_PenumbraAngle:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.penumbraangle_)));
          set_has_penumbraangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_Dropoff;
        break;
      }

      // optional float Dropoff = 10;
      case 10: {
        if (tag == 85) {
         parse_Dropoff:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.dropoff_)));
          set_has_dropoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Shadows;
        break;
      }

      // optional bool Shadows = 11;
      case 11: {
        if (tag == 88) {
         parse_Shadows:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Property_.shadows_)));
          set_has_shadows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ShadowResolution;
        break;
      }

      // optional int32 ShadowResolution = 12;
      case 12: {
        if (tag == 96) {
         parse_ShadowResolution:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Property_.shadowresolution_)));
          set_has_shadowresolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_ShadowBias;
        break;
      }

      // optional float ShadowBias = 13;
      case 13: {
        if (tag == 109) {
         parse_ShadowBias:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.shadowbias_)));
          set_has_shadowbias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ShadowColor;
        break;
      }

      // optional .atom.proto.Color ShadowColor = 14;
      case 14: {
        if (tag == 114) {
         parse_ShadowColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.lights.LightChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.lights.LightChanged)
  return false;
#undef DO_
}

void LightChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.lights.LightChanged)
  // optional string LightName = 1;
  if (this->lightname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lightname().data(), this->lightname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.lights.LightChanged.LightName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lightname(), output);
  }

  // optional .atom.proto.lights.LightType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .atom.proto.Vector3 Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Property_.position_, output);
  }

  // optional .atom.proto.Vector3 Direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *Property_.direction_, output);
  }

  // optional float Range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // optional .atom.proto.Color Color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *Property_.color_, output);
  }

  // optional float Intensity = 7;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->intensity(), output);
  }

  // optional float ConeAngle = 8;
  if (has_coneangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->coneangle(), output);
  }

  // optional float PenumbraAngle = 9;
  if (has_penumbraangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->penumbraangle(), output);
  }

  // optional float Dropoff = 10;
  if (has_dropoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dropoff(), output);
  }

  // optional bool Shadows = 11;
  if (has_shadows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->shadows(), output);
  }

  // optional int32 ShadowResolution = 12;
  if (has_shadowresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->shadowresolution(), output);
  }

  // optional float ShadowBias = 13;
  if (has_shadowbias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->shadowbias(), output);
  }

  // optional .atom.proto.Color ShadowColor = 14;
  if (has_shadowcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *Property_.shadowcolor_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.lights.LightChanged)
}

::google::protobuf::uint8* LightChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.lights.LightChanged)
  // optional string LightName = 1;
  if (this->lightname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lightname().data(), this->lightname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.lights.LightChanged.LightName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lightname(), target);
  }

  // optional .atom.proto.lights.LightType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .atom.proto.Vector3 Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *Property_.position_, target);
  }

  // optional .atom.proto.Vector3 Direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *Property_.direction_, target);
  }

  // optional float Range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // optional .atom.proto.Color Color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *Property_.color_, target);
  }

  // optional float Intensity = 7;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->intensity(), target);
  }

  // optional float ConeAngle = 8;
  if (has_coneangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->coneangle(), target);
  }

  // optional float PenumbraAngle = 9;
  if (has_penumbraangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->penumbraangle(), target);
  }

  // optional float Dropoff = 10;
  if (has_dropoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dropoff(), target);
  }

  // optional bool Shadows = 11;
  if (has_shadows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->shadows(), target);
  }

  // optional int32 ShadowResolution = 12;
  if (has_shadowresolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->shadowresolution(), target);
  }

  // optional float ShadowBias = 13;
  if (has_shadowbias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->shadowbias(), target);
  }

  // optional .atom.proto.Color ShadowColor = 14;
  if (has_shadowcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *Property_.shadowcolor_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.lights.LightChanged)
  return target;
}

int LightChanged::ByteSize() const {
  int total_size = 0;

  // optional string LightName = 1;
  if (this->lightname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lightname());
  }

  switch (Property_case()) {
    // optional .atom.proto.lights.LightType Type = 2;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    // optional .atom.proto.Vector3 Position = 3;
    case kPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.position_);
      break;
    }
    // optional .atom.proto.Vector3 Direction = 4;
    case kDirection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.direction_);
      break;
    }
    // optional float Range = 5;
    case kRange: {
      total_size += 1 + 4;
      break;
    }
    // optional .atom.proto.Color Color = 6;
    case kColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.color_);
      break;
    }
    // optional float Intensity = 7;
    case kIntensity: {
      total_size += 1 + 4;
      break;
    }
    // optional float ConeAngle = 8;
    case kConeAngle: {
      total_size += 1 + 4;
      break;
    }
    // optional float PenumbraAngle = 9;
    case kPenumbraAngle: {
      total_size += 1 + 4;
      break;
    }
    // optional float Dropoff = 10;
    case kDropoff: {
      total_size += 1 + 4;
      break;
    }
    // optional bool Shadows = 11;
    case kShadows: {
      total_size += 1 + 1;
      break;
    }
    // optional int32 ShadowResolution = 12;
    case kShadowResolution: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shadowresolution());
      break;
    }
    // optional float ShadowBias = 13;
    case kShadowBias: {
      total_size += 1 + 4;
      break;
    }
    // optional .atom.proto.Color ShadowColor = 14;
    case kShadowColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.shadowcolor_);
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightChanged::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LightChanged* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LightChanged>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightChanged::MergeFrom(const LightChanged& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Property_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case kPosition: {
      mutable_position()->::atom::proto::Vector3::MergeFrom(from.position());
      break;
    }
    case kDirection: {
      mutable_direction()->::atom::proto::Vector3::MergeFrom(from.direction());
      break;
    }
    case kRange: {
      set_range(from.range());
      break;
    }
    case kColor: {
      mutable_color()->::atom::proto::Color::MergeFrom(from.color());
      break;
    }
    case kIntensity: {
      set_intensity(from.intensity());
      break;
    }
    case kConeAngle: {
      set_coneangle(from.coneangle());
      break;
    }
    case kPenumbraAngle: {
      set_penumbraangle(from.penumbraangle());
      break;
    }
    case kDropoff: {
      set_dropoff(from.dropoff());
      break;
    }
    case kShadows: {
      set_shadows(from.shadows());
      break;
    }
    case kShadowResolution: {
      set_shadowresolution(from.shadowresolution());
      break;
    }
    case kShadowBias: {
      set_shadowbias(from.shadowbias());
      break;
    }
    case kShadowColor: {
      mutable_shadowcolor()->::atom::proto::Color::MergeFrom(from.shadowcolor());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  if (from.lightname().size() > 0) {

    lightname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lightname_);
  }
}

void LightChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightChanged::CopyFrom(const LightChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightChanged::IsInitialized() const {

  return true;
}

void LightChanged::Swap(LightChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightChanged::InternalSwap(LightChanged* other) {
  lightname_.Swap(&other->lightname_);
  std::swap(Property_, other->Property_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LightChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightChanged_descriptor_;
  metadata.reflection = LightChanged_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LightChanged

// optional string LightName = 1;
void LightChanged::clear_lightname() {
  lightname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LightChanged::lightname() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.LightName)
  return lightname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LightChanged::set_lightname(const ::std::string& value) {
  
  lightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.LightName)
}
 void LightChanged::set_lightname(const char* value) {
  
  lightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.lights.LightChanged.LightName)
}
 void LightChanged::set_lightname(const char* value, size_t size) {
  
  lightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.lights.LightChanged.LightName)
}
 ::std::string* LightChanged::mutable_lightname() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.LightName)
  return lightname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LightChanged::release_lightname() {
  
  return lightname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LightChanged::set_allocated_lightname(::std::string* lightname) {
  if (lightname != NULL) {
    
  } else {
    
  }
  lightname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lightname);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.LightName)
}

// optional .atom.proto.lights.LightType Type = 2;
bool LightChanged::has_type() const {
  return Property_case() == kType;
}
void LightChanged::set_has_type() {
  _oneof_case_[0] = kType;
}
void LightChanged::clear_type() {
  if (has_type()) {
    Property_.type_ = 0;
    clear_has_Property();
  }
}
 ::atom::proto::lights::LightType LightChanged::type() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Type)
  if (has_type()) {
    return static_cast< ::atom::proto::lights::LightType >(Property_.type_);
  }
  return static_cast< ::atom::proto::lights::LightType >(0);
}
 void LightChanged::set_type(::atom::proto::lights::LightType value) {
  if (!has_type()) {
    clear_Property();
    set_has_type();
  }
  Property_.type_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Type)
}

// optional .atom.proto.Vector3 Position = 3;
bool LightChanged::has_position() const {
  return Property_case() == kPosition;
}
void LightChanged::set_has_position() {
  _oneof_case_[0] = kPosition;
}
void LightChanged::clear_position() {
  if (has_position()) {
    delete Property_.position_;
    clear_has_Property();
  }
}
 const ::atom::proto::Vector3& LightChanged::position() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Position)
  return has_position()
      ? *Property_.position_
      : ::atom::proto::Vector3::default_instance();
}
::atom::proto::Vector3* LightChanged::mutable_position() {
  if (!has_position()) {
    clear_Property();
    set_has_position();
    Property_.position_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.Position)
  return Property_.position_;
}
::atom::proto::Vector3* LightChanged::release_position() {
  if (has_position()) {
    clear_has_Property();
    ::atom::proto::Vector3* temp = Property_.position_;
    Property_.position_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LightChanged::set_allocated_position(::atom::proto::Vector3* position) {
  clear_Property();
  if (position) {
    set_has_position();
    Property_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.Position)
}

// optional .atom.proto.Vector3 Direction = 4;
bool LightChanged::has_direction() const {
  return Property_case() == kDirection;
}
void LightChanged::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
void LightChanged::clear_direction() {
  if (has_direction()) {
    delete Property_.direction_;
    clear_has_Property();
  }
}
 const ::atom::proto::Vector3& LightChanged::direction() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Direction)
  return has_direction()
      ? *Property_.direction_
      : ::atom::proto::Vector3::default_instance();
}
::atom::proto::Vector3* LightChanged::mutable_direction() {
  if (!has_direction()) {
    clear_Property();
    set_has_direction();
    Property_.direction_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.Direction)
  return Property_.direction_;
}
::atom::proto::Vector3* LightChanged::release_direction() {
  if (has_direction()) {
    clear_has_Property();
    ::atom::proto::Vector3* temp = Property_.direction_;
    Property_.direction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LightChanged::set_allocated_direction(::atom::proto::Vector3* direction) {
  clear_Property();
  if (direction) {
    set_has_direction();
    Property_.direction_ = direction;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.Direction)
}

// optional float Range = 5;
bool LightChanged::has_range() const {
  return Property_case() == kRange;
}
void LightChanged::set_has_range() {
  _oneof_case_[0] = kRange;
}
void LightChanged::clear_range() {
  if (has_range()) {
    Property_.range_ = 0;
    clear_has_Property();
  }
}
 float LightChanged::range() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Range)
  if (has_range()) {
    return Property_.range_;
  }
  return 0;
}
 void LightChanged::set_range(float value) {
  if (!has_range()) {
    clear_Property();
    set_has_range();
  }
  Property_.range_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Range)
}

// optional .atom.proto.Color Color = 6;
bool LightChanged::has_color() const {
  return Property_case() == kColor;
}
void LightChanged::set_has_color() {
  _oneof_case_[0] = kColor;
}
void LightChanged::clear_color() {
  if (has_color()) {
    delete Property_.color_;
    clear_has_Property();
  }
}
 const ::atom::proto::Color& LightChanged::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Color)
  return has_color()
      ? *Property_.color_
      : ::atom::proto::Color::default_instance();
}
::atom::proto::Color* LightChanged::mutable_color() {
  if (!has_color()) {
    clear_Property();
    set_has_color();
    Property_.color_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.Color)
  return Property_.color_;
}
::atom::proto::Color* LightChanged::release_color() {
  if (has_color()) {
    clear_has_Property();
    ::atom::proto::Color* temp = Property_.color_;
    Property_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LightChanged::set_allocated_color(::atom::proto::Color* color) {
  clear_Property();
  if (color) {
    set_has_color();
    Property_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.Color)
}

// optional float Intensity = 7;
bool LightChanged::has_intensity() const {
  return Property_case() == kIntensity;
}
void LightChanged::set_has_intensity() {
  _oneof_case_[0] = kIntensity;
}
void LightChanged::clear_intensity() {
  if (has_intensity()) {
    Property_.intensity_ = 0;
    clear_has_Property();
  }
}
 float LightChanged::intensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Intensity)
  if (has_intensity()) {
    return Property_.intensity_;
  }
  return 0;
}
 void LightChanged::set_intensity(float value) {
  if (!has_intensity()) {
    clear_Property();
    set_has_intensity();
  }
  Property_.intensity_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Intensity)
}

// optional float ConeAngle = 8;
bool LightChanged::has_coneangle() const {
  return Property_case() == kConeAngle;
}
void LightChanged::set_has_coneangle() {
  _oneof_case_[0] = kConeAngle;
}
void LightChanged::clear_coneangle() {
  if (has_coneangle()) {
    Property_.coneangle_ = 0;
    clear_has_Property();
  }
}
 float LightChanged::coneangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ConeAngle)
  if (has_coneangle()) {
    return Property_.coneangle_;
  }
  return 0;
}
 void LightChanged::set_coneangle(float value) {
  if (!has_coneangle()) {
    clear_Property();
    set_has_coneangle();
  }
  Property_.coneangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.ConeAngle)
}

// optional float PenumbraAngle = 9;
bool LightChanged::has_penumbraangle() const {
  return Property_case() == kPenumbraAngle;
}
void LightChanged::set_has_penumbraangle() {
  _oneof_case_[0] = kPenumbraAngle;
}
void LightChanged::clear_penumbraangle() {
  if (has_penumbraangle()) {
    Property_.penumbraangle_ = 0;
    clear_has_Property();
  }
}
 float LightChanged::penumbraangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.PenumbraAngle)
  if (has_penumbraangle()) {
    return Property_.penumbraangle_;
  }
  return 0;
}
 void LightChanged::set_penumbraangle(float value) {
  if (!has_penumbraangle()) {
    clear_Property();
    set_has_penumbraangle();
  }
  Property_.penumbraangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.PenumbraAngle)
}

// optional float Dropoff = 10;
bool LightChanged::has_dropoff() const {
  return Property_case() == kDropoff;
}
void LightChanged::set_has_dropoff() {
  _oneof_case_[0] = kDropoff;
}
void LightChanged::clear_dropoff() {
  if (has_dropoff()) {
    Property_.dropoff_ = 0;
    clear_has_Property();
  }
}
 float LightChanged::dropoff() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Dropoff)
  if (has_dropoff()) {
    return Property_.dropoff_;
  }
  return 0;
}
 void LightChanged::set_dropoff(float value) {
  if (!has_dropoff()) {
    clear_Property();
    set_has_dropoff();
  }
  Property_.dropoff_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Dropoff)
}

// optional bool Shadows = 11;
bool LightChanged::has_shadows() const {
  return Property_case() == kShadows;
}
void LightChanged::set_has_shadows() {
  _oneof_case_[0] = kShadows;
}
void LightChanged::clear_shadows() {
  if (has_shadows()) {
    Property_.shadows_ = false;
    clear_has_Property();
  }
}
 bool LightChanged::shadows() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Shadows)
  if (has_shadows()) {
    return Property_.shadows_;
  }
  return false;
}
 void LightChanged::set_shadows(bool value) {
  if (!has_shadows()) {
    clear_Property();
    set_has_shadows();
  }
  Property_.shadows_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Shadows)
}

// optional int32 ShadowResolution = 12;
bool LightChanged::has_shadowresolution() const {
  return Property_case() == kShadowResolution;
}
void LightChanged::set_has_shadowresolution() {
  _oneof_case_[0] = kShadowResolution;
}
void LightChanged::clear_shadowresolution() {
  if (has_shadowresolution()) {
    Property_.shadowresolution_ = 0;
    clear_has_Property();
  }
}
 ::google::protobuf::int32 LightChanged::shadowresolution() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ShadowResolution)
  if (has_shadowresolution()) {
    return Property_.shadowresolution_;
  }
  return 0;
}
 void LightChanged::set_shadowresolution(::google::protobuf::int32 value) {
  if (!has_shadowresolution()) {
    clear_Property();
    set_has_shadowresolution();
  }
  Property_.shadowresolution_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.ShadowResolution)
}

// optional float ShadowBias = 13;
bool LightChanged::has_shadowbias() const {
  return Property_case() == kShadowBias;
}
void LightChanged::set_has_shadowbias() {
  _oneof_case_[0] = kShadowBias;
}
void LightChanged::clear_shadowbias() {
  if (has_shadowbias()) {
    Property_.shadowbias_ = 0;
    clear_has_Property();
  }
}
 float LightChanged::shadowbias() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ShadowBias)
  if (has_shadowbias()) {
    return Property_.shadowbias_;
  }
  return 0;
}
 void LightChanged::set_shadowbias(float value) {
  if (!has_shadowbias()) {
    clear_Property();
    set_has_shadowbias();
  }
  Property_.shadowbias_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.ShadowBias)
}

// optional .atom.proto.Color ShadowColor = 14;
bool LightChanged::has_shadowcolor() const {
  return Property_case() == kShadowColor;
}
void LightChanged::set_has_shadowcolor() {
  _oneof_case_[0] = kShadowColor;
}
void LightChanged::clear_shadowcolor() {
  if (has_shadowcolor()) {
    delete Property_.shadowcolor_;
    clear_has_Property();
  }
}
 const ::atom::proto::Color& LightChanged::shadowcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ShadowColor)
  return has_shadowcolor()
      ? *Property_.shadowcolor_
      : ::atom::proto::Color::default_instance();
}
::atom::proto::Color* LightChanged::mutable_shadowcolor() {
  if (!has_shadowcolor()) {
    clear_Property();
    set_has_shadowcolor();
    Property_.shadowcolor_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.ShadowColor)
  return Property_.shadowcolor_;
}
::atom::proto::Color* LightChanged::release_shadowcolor() {
  if (has_shadowcolor()) {
    clear_has_Property();
    ::atom::proto::Color* temp = Property_.shadowcolor_;
    Property_.shadowcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LightChanged::set_allocated_shadowcolor(::atom::proto::Color* shadowcolor) {
  clear_Property();
  if (shadowcolor) {
    set_has_shadowcolor();
    Property_.shadowcolor_ = shadowcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.ShadowColor)
}

bool LightChanged::has_Property() const {
  return Property_case() != PROPERTY_NOT_SET;
}
void LightChanged::clear_has_Property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
LightChanged::PropertyCase LightChanged::Property_case() const {
  return LightChanged::PropertyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lights
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
