// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights/LightChanged.proto

#ifndef PROTOBUF_lights_2fLightChanged_2eproto__INCLUDED
#define PROTOBUF_lights_2fLightChanged_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "lights/LightType.pb.h"
#include "Vector3.pb.h"
#include "Color.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace lights {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lights_2fLightChanged_2eproto();
void protobuf_AssignDesc_lights_2fLightChanged_2eproto();
void protobuf_ShutdownFile_lights_2fLightChanged_2eproto();

class LightChanged;

// ===================================================================

class LightChanged : public ::google::protobuf::Message {
 public:
  LightChanged();
  virtual ~LightChanged();

  LightChanged(const LightChanged& from);

  inline LightChanged& operator=(const LightChanged& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightChanged& default_instance();

  enum PropertyCase {
    kType = 2,
    kPosition = 3,
    kDirection = 4,
    kRange = 5,
    kColor = 6,
    kIntensity = 7,
    kConeAngle = 8,
    kPenumbraAngle = 9,
    kDropoff = 10,
    kShadows = 11,
    kShadowResolution = 12,
    kShadowBias = 13,
    kShadowColor = 14,
    PROPERTY_NOT_SET = 0,
  };

  void Swap(LightChanged* other);

  // implements Message ----------------------------------------------

  inline LightChanged* New() const { return New(NULL); }

  LightChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightChanged& from);
  void MergeFrom(const LightChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LightChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LightName = 1;
  void clear_lightname();
  static const int kLightNameFieldNumber = 1;
  const ::std::string& lightname() const;
  void set_lightname(const ::std::string& value);
  void set_lightname(const char* value);
  void set_lightname(const char* value, size_t size);
  ::std::string* mutable_lightname();
  ::std::string* release_lightname();
  void set_allocated_lightname(::std::string* lightname);

  // optional .atom.proto.lights.LightType Type = 2;
  private:
  bool has_type() const;
  public:
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::atom::proto::lights::LightType type() const;
  void set_type(::atom::proto::lights::LightType value);

  // optional .atom.proto.Vector3 Position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::atom::proto::Vector3& position() const;
  ::atom::proto::Vector3* mutable_position();
  ::atom::proto::Vector3* release_position();
  void set_allocated_position(::atom::proto::Vector3* position);

  // optional .atom.proto.Vector3 Direction = 4;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::atom::proto::Vector3& direction() const;
  ::atom::proto::Vector3* mutable_direction();
  ::atom::proto::Vector3* release_direction();
  void set_allocated_direction(::atom::proto::Vector3* direction);

  // optional float Range = 5;
  private:
  bool has_range() const;
  public:
  void clear_range();
  static const int kRangeFieldNumber = 5;
  float range() const;
  void set_range(float value);

  // optional .atom.proto.Color Color = 6;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::atom::proto::Color& color() const;
  ::atom::proto::Color* mutable_color();
  ::atom::proto::Color* release_color();
  void set_allocated_color(::atom::proto::Color* color);

  // optional float Intensity = 7;
  private:
  bool has_intensity() const;
  public:
  void clear_intensity();
  static const int kIntensityFieldNumber = 7;
  float intensity() const;
  void set_intensity(float value);

  // optional float ConeAngle = 8;
  private:
  bool has_coneangle() const;
  public:
  void clear_coneangle();
  static const int kConeAngleFieldNumber = 8;
  float coneangle() const;
  void set_coneangle(float value);

  // optional float PenumbraAngle = 9;
  private:
  bool has_penumbraangle() const;
  public:
  void clear_penumbraangle();
  static const int kPenumbraAngleFieldNumber = 9;
  float penumbraangle() const;
  void set_penumbraangle(float value);

  // optional float Dropoff = 10;
  private:
  bool has_dropoff() const;
  public:
  void clear_dropoff();
  static const int kDropoffFieldNumber = 10;
  float dropoff() const;
  void set_dropoff(float value);

  // optional bool Shadows = 11;
  private:
  bool has_shadows() const;
  public:
  void clear_shadows();
  static const int kShadowsFieldNumber = 11;
  bool shadows() const;
  void set_shadows(bool value);

  // optional int32 ShadowResolution = 12;
  private:
  bool has_shadowresolution() const;
  public:
  void clear_shadowresolution();
  static const int kShadowResolutionFieldNumber = 12;
  ::google::protobuf::int32 shadowresolution() const;
  void set_shadowresolution(::google::protobuf::int32 value);

  // optional float ShadowBias = 13;
  private:
  bool has_shadowbias() const;
  public:
  void clear_shadowbias();
  static const int kShadowBiasFieldNumber = 13;
  float shadowbias() const;
  void set_shadowbias(float value);

  // optional .atom.proto.Color ShadowColor = 14;
  bool has_shadowcolor() const;
  void clear_shadowcolor();
  static const int kShadowColorFieldNumber = 14;
  const ::atom::proto::Color& shadowcolor() const;
  ::atom::proto::Color* mutable_shadowcolor();
  ::atom::proto::Color* release_shadowcolor();
  void set_allocated_shadowcolor(::atom::proto::Color* shadowcolor);

  PropertyCase Property_case() const;
  // @@protoc_insertion_point(class_scope:atom.proto.lights.LightChanged)
 private:
  inline void set_has_type();
  inline void set_has_position();
  inline void set_has_direction();
  inline void set_has_range();
  inline void set_has_color();
  inline void set_has_intensity();
  inline void set_has_coneangle();
  inline void set_has_penumbraangle();
  inline void set_has_dropoff();
  inline void set_has_shadows();
  inline void set_has_shadowresolution();
  inline void set_has_shadowbias();
  inline void set_has_shadowcolor();

  inline bool has_Property() const;
  void clear_Property();
  inline void clear_has_Property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr lightname_;
  union PropertyUnion {
    PropertyUnion() {}
    int type_;
    ::atom::proto::Vector3* position_;
    ::atom::proto::Vector3* direction_;
    float range_;
    ::atom::proto::Color* color_;
    float intensity_;
    float coneangle_;
    float penumbraangle_;
    float dropoff_;
    bool shadows_;
    ::google::protobuf::int32 shadowresolution_;
    float shadowbias_;
    ::atom::proto::Color* shadowcolor_;
  } Property_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_lights_2fLightChanged_2eproto();
  friend void protobuf_AssignDesc_lights_2fLightChanged_2eproto();
  friend void protobuf_ShutdownFile_lights_2fLightChanged_2eproto();

  void InitAsDefaultInstance();
  static LightChanged* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LightChanged

// optional string LightName = 1;
inline void LightChanged::clear_lightname() {
  lightname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightChanged::lightname() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.LightName)
  return lightname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightChanged::set_lightname(const ::std::string& value) {
  
  lightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.LightName)
}
inline void LightChanged::set_lightname(const char* value) {
  
  lightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.lights.LightChanged.LightName)
}
inline void LightChanged::set_lightname(const char* value, size_t size) {
  
  lightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.lights.LightChanged.LightName)
}
inline ::std::string* LightChanged::mutable_lightname() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.LightName)
  return lightname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightChanged::release_lightname() {
  
  return lightname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightChanged::set_allocated_lightname(::std::string* lightname) {
  if (lightname != NULL) {
    
  } else {
    
  }
  lightname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lightname);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.LightName)
}

// optional .atom.proto.lights.LightType Type = 2;
inline bool LightChanged::has_type() const {
  return Property_case() == kType;
}
inline void LightChanged::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void LightChanged::clear_type() {
  if (has_type()) {
    Property_.type_ = 0;
    clear_has_Property();
  }
}
inline ::atom::proto::lights::LightType LightChanged::type() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Type)
  if (has_type()) {
    return static_cast< ::atom::proto::lights::LightType >(Property_.type_);
  }
  return static_cast< ::atom::proto::lights::LightType >(0);
}
inline void LightChanged::set_type(::atom::proto::lights::LightType value) {
  if (!has_type()) {
    clear_Property();
    set_has_type();
  }
  Property_.type_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Type)
}

// optional .atom.proto.Vector3 Position = 3;
inline bool LightChanged::has_position() const {
  return Property_case() == kPosition;
}
inline void LightChanged::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void LightChanged::clear_position() {
  if (has_position()) {
    delete Property_.position_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::Vector3& LightChanged::position() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Position)
  return has_position()
      ? *Property_.position_
      : ::atom::proto::Vector3::default_instance();
}
inline ::atom::proto::Vector3* LightChanged::mutable_position() {
  if (!has_position()) {
    clear_Property();
    set_has_position();
    Property_.position_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.Position)
  return Property_.position_;
}
inline ::atom::proto::Vector3* LightChanged::release_position() {
  if (has_position()) {
    clear_has_Property();
    ::atom::proto::Vector3* temp = Property_.position_;
    Property_.position_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LightChanged::set_allocated_position(::atom::proto::Vector3* position) {
  clear_Property();
  if (position) {
    set_has_position();
    Property_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.Position)
}

// optional .atom.proto.Vector3 Direction = 4;
inline bool LightChanged::has_direction() const {
  return Property_case() == kDirection;
}
inline void LightChanged::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
inline void LightChanged::clear_direction() {
  if (has_direction()) {
    delete Property_.direction_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::Vector3& LightChanged::direction() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Direction)
  return has_direction()
      ? *Property_.direction_
      : ::atom::proto::Vector3::default_instance();
}
inline ::atom::proto::Vector3* LightChanged::mutable_direction() {
  if (!has_direction()) {
    clear_Property();
    set_has_direction();
    Property_.direction_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.Direction)
  return Property_.direction_;
}
inline ::atom::proto::Vector3* LightChanged::release_direction() {
  if (has_direction()) {
    clear_has_Property();
    ::atom::proto::Vector3* temp = Property_.direction_;
    Property_.direction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LightChanged::set_allocated_direction(::atom::proto::Vector3* direction) {
  clear_Property();
  if (direction) {
    set_has_direction();
    Property_.direction_ = direction;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.Direction)
}

// optional float Range = 5;
inline bool LightChanged::has_range() const {
  return Property_case() == kRange;
}
inline void LightChanged::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void LightChanged::clear_range() {
  if (has_range()) {
    Property_.range_ = 0;
    clear_has_Property();
  }
}
inline float LightChanged::range() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Range)
  if (has_range()) {
    return Property_.range_;
  }
  return 0;
}
inline void LightChanged::set_range(float value) {
  if (!has_range()) {
    clear_Property();
    set_has_range();
  }
  Property_.range_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Range)
}

// optional .atom.proto.Color Color = 6;
inline bool LightChanged::has_color() const {
  return Property_case() == kColor;
}
inline void LightChanged::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void LightChanged::clear_color() {
  if (has_color()) {
    delete Property_.color_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::Color& LightChanged::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Color)
  return has_color()
      ? *Property_.color_
      : ::atom::proto::Color::default_instance();
}
inline ::atom::proto::Color* LightChanged::mutable_color() {
  if (!has_color()) {
    clear_Property();
    set_has_color();
    Property_.color_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.Color)
  return Property_.color_;
}
inline ::atom::proto::Color* LightChanged::release_color() {
  if (has_color()) {
    clear_has_Property();
    ::atom::proto::Color* temp = Property_.color_;
    Property_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LightChanged::set_allocated_color(::atom::proto::Color* color) {
  clear_Property();
  if (color) {
    set_has_color();
    Property_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.Color)
}

// optional float Intensity = 7;
inline bool LightChanged::has_intensity() const {
  return Property_case() == kIntensity;
}
inline void LightChanged::set_has_intensity() {
  _oneof_case_[0] = kIntensity;
}
inline void LightChanged::clear_intensity() {
  if (has_intensity()) {
    Property_.intensity_ = 0;
    clear_has_Property();
  }
}
inline float LightChanged::intensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Intensity)
  if (has_intensity()) {
    return Property_.intensity_;
  }
  return 0;
}
inline void LightChanged::set_intensity(float value) {
  if (!has_intensity()) {
    clear_Property();
    set_has_intensity();
  }
  Property_.intensity_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Intensity)
}

// optional float ConeAngle = 8;
inline bool LightChanged::has_coneangle() const {
  return Property_case() == kConeAngle;
}
inline void LightChanged::set_has_coneangle() {
  _oneof_case_[0] = kConeAngle;
}
inline void LightChanged::clear_coneangle() {
  if (has_coneangle()) {
    Property_.coneangle_ = 0;
    clear_has_Property();
  }
}
inline float LightChanged::coneangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ConeAngle)
  if (has_coneangle()) {
    return Property_.coneangle_;
  }
  return 0;
}
inline void LightChanged::set_coneangle(float value) {
  if (!has_coneangle()) {
    clear_Property();
    set_has_coneangle();
  }
  Property_.coneangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.ConeAngle)
}

// optional float PenumbraAngle = 9;
inline bool LightChanged::has_penumbraangle() const {
  return Property_case() == kPenumbraAngle;
}
inline void LightChanged::set_has_penumbraangle() {
  _oneof_case_[0] = kPenumbraAngle;
}
inline void LightChanged::clear_penumbraangle() {
  if (has_penumbraangle()) {
    Property_.penumbraangle_ = 0;
    clear_has_Property();
  }
}
inline float LightChanged::penumbraangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.PenumbraAngle)
  if (has_penumbraangle()) {
    return Property_.penumbraangle_;
  }
  return 0;
}
inline void LightChanged::set_penumbraangle(float value) {
  if (!has_penumbraangle()) {
    clear_Property();
    set_has_penumbraangle();
  }
  Property_.penumbraangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.PenumbraAngle)
}

// optional float Dropoff = 10;
inline bool LightChanged::has_dropoff() const {
  return Property_case() == kDropoff;
}
inline void LightChanged::set_has_dropoff() {
  _oneof_case_[0] = kDropoff;
}
inline void LightChanged::clear_dropoff() {
  if (has_dropoff()) {
    Property_.dropoff_ = 0;
    clear_has_Property();
  }
}
inline float LightChanged::dropoff() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Dropoff)
  if (has_dropoff()) {
    return Property_.dropoff_;
  }
  return 0;
}
inline void LightChanged::set_dropoff(float value) {
  if (!has_dropoff()) {
    clear_Property();
    set_has_dropoff();
  }
  Property_.dropoff_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Dropoff)
}

// optional bool Shadows = 11;
inline bool LightChanged::has_shadows() const {
  return Property_case() == kShadows;
}
inline void LightChanged::set_has_shadows() {
  _oneof_case_[0] = kShadows;
}
inline void LightChanged::clear_shadows() {
  if (has_shadows()) {
    Property_.shadows_ = false;
    clear_has_Property();
  }
}
inline bool LightChanged::shadows() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.Shadows)
  if (has_shadows()) {
    return Property_.shadows_;
  }
  return false;
}
inline void LightChanged::set_shadows(bool value) {
  if (!has_shadows()) {
    clear_Property();
    set_has_shadows();
  }
  Property_.shadows_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.Shadows)
}

// optional int32 ShadowResolution = 12;
inline bool LightChanged::has_shadowresolution() const {
  return Property_case() == kShadowResolution;
}
inline void LightChanged::set_has_shadowresolution() {
  _oneof_case_[0] = kShadowResolution;
}
inline void LightChanged::clear_shadowresolution() {
  if (has_shadowresolution()) {
    Property_.shadowresolution_ = 0;
    clear_has_Property();
  }
}
inline ::google::protobuf::int32 LightChanged::shadowresolution() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ShadowResolution)
  if (has_shadowresolution()) {
    return Property_.shadowresolution_;
  }
  return 0;
}
inline void LightChanged::set_shadowresolution(::google::protobuf::int32 value) {
  if (!has_shadowresolution()) {
    clear_Property();
    set_has_shadowresolution();
  }
  Property_.shadowresolution_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.ShadowResolution)
}

// optional float ShadowBias = 13;
inline bool LightChanged::has_shadowbias() const {
  return Property_case() == kShadowBias;
}
inline void LightChanged::set_has_shadowbias() {
  _oneof_case_[0] = kShadowBias;
}
inline void LightChanged::clear_shadowbias() {
  if (has_shadowbias()) {
    Property_.shadowbias_ = 0;
    clear_has_Property();
  }
}
inline float LightChanged::shadowbias() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ShadowBias)
  if (has_shadowbias()) {
    return Property_.shadowbias_;
  }
  return 0;
}
inline void LightChanged::set_shadowbias(float value) {
  if (!has_shadowbias()) {
    clear_Property();
    set_has_shadowbias();
  }
  Property_.shadowbias_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.LightChanged.ShadowBias)
}

// optional .atom.proto.Color ShadowColor = 14;
inline bool LightChanged::has_shadowcolor() const {
  return Property_case() == kShadowColor;
}
inline void LightChanged::set_has_shadowcolor() {
  _oneof_case_[0] = kShadowColor;
}
inline void LightChanged::clear_shadowcolor() {
  if (has_shadowcolor()) {
    delete Property_.shadowcolor_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::Color& LightChanged::shadowcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.LightChanged.ShadowColor)
  return has_shadowcolor()
      ? *Property_.shadowcolor_
      : ::atom::proto::Color::default_instance();
}
inline ::atom::proto::Color* LightChanged::mutable_shadowcolor() {
  if (!has_shadowcolor()) {
    clear_Property();
    set_has_shadowcolor();
    Property_.shadowcolor_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.LightChanged.ShadowColor)
  return Property_.shadowcolor_;
}
inline ::atom::proto::Color* LightChanged::release_shadowcolor() {
  if (has_shadowcolor()) {
    clear_has_Property();
    ::atom::proto::Color* temp = Property_.shadowcolor_;
    Property_.shadowcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LightChanged::set_allocated_shadowcolor(::atom::proto::Color* shadowcolor) {
  clear_Property();
  if (shadowcolor) {
    set_has_shadowcolor();
    Property_.shadowcolor_ = shadowcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.LightChanged.ShadowColor)
}

inline bool LightChanged::has_Property() const {
  return Property_case() != PROPERTY_NOT_SET;
}
inline void LightChanged::clear_has_Property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline LightChanged::PropertyCase LightChanged::Property_case() const {
  return LightChanged::PropertyCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lights
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lights_2fLightChanged_2eproto__INCLUDED
