// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights/Light.proto

#ifndef PROTOBUF_lights_2fLight_2eproto__INCLUDED
#define PROTOBUF_lights_2fLight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "lights/LightType.pb.h"
#include "Vector3.pb.h"
#include "Color.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace lights {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lights_2fLight_2eproto();
void protobuf_AssignDesc_lights_2fLight_2eproto();
void protobuf_ShutdownFile_lights_2fLight_2eproto();

class Light;

// ===================================================================

class Light : public ::google::protobuf::Message {
 public:
  Light();
  virtual ~Light();

  Light(const Light& from);

  inline Light& operator=(const Light& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Light& default_instance();

  void Swap(Light* other);

  // implements Message ----------------------------------------------

  inline Light* New() const { return New(NULL); }

  Light* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Light& from);
  void MergeFrom(const Light& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Light* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .atom.proto.lights.LightType Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::atom::proto::lights::LightType type() const;
  void set_type(::atom::proto::lights::LightType value);

  // optional .atom.proto.Vector3 Position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::atom::proto::Vector3& position() const;
  ::atom::proto::Vector3* mutable_position();
  ::atom::proto::Vector3* release_position();
  void set_allocated_position(::atom::proto::Vector3* position);

  // optional .atom.proto.Vector3 Direction = 4;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::atom::proto::Vector3& direction() const;
  ::atom::proto::Vector3* mutable_direction();
  ::atom::proto::Vector3* release_direction();
  void set_allocated_direction(::atom::proto::Vector3* direction);

  // optional float Range = 5;
  void clear_range();
  static const int kRangeFieldNumber = 5;
  float range() const;
  void set_range(float value);

  // optional .atom.proto.Color Color = 6;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::atom::proto::Color& color() const;
  ::atom::proto::Color* mutable_color();
  ::atom::proto::Color* release_color();
  void set_allocated_color(::atom::proto::Color* color);

  // optional float Intensity = 7;
  void clear_intensity();
  static const int kIntensityFieldNumber = 7;
  float intensity() const;
  void set_intensity(float value);

  // optional float ConeAngle = 8;
  void clear_coneangle();
  static const int kConeAngleFieldNumber = 8;
  float coneangle() const;
  void set_coneangle(float value);

  // optional float PenumbraAngle = 9;
  void clear_penumbraangle();
  static const int kPenumbraAngleFieldNumber = 9;
  float penumbraangle() const;
  void set_penumbraangle(float value);

  // optional float Dropoff = 10;
  void clear_dropoff();
  static const int kDropoffFieldNumber = 10;
  float dropoff() const;
  void set_dropoff(float value);

  // optional bool Shadows = 11;
  void clear_shadows();
  static const int kShadowsFieldNumber = 11;
  bool shadows() const;
  void set_shadows(bool value);

  // optional int32 ShadowResolution = 12;
  void clear_shadowresolution();
  static const int kShadowResolutionFieldNumber = 12;
  ::google::protobuf::int32 shadowresolution() const;
  void set_shadowresolution(::google::protobuf::int32 value);

  // optional float ShadowBias = 13;
  void clear_shadowbias();
  static const int kShadowBiasFieldNumber = 13;
  float shadowbias() const;
  void set_shadowbias(float value);

  // optional .atom.proto.Color ShadowColor = 14;
  bool has_shadowcolor() const;
  void clear_shadowcolor();
  static const int kShadowColorFieldNumber = 14;
  const ::atom::proto::Color& shadowcolor() const;
  ::atom::proto::Color* mutable_shadowcolor();
  ::atom::proto::Color* release_shadowcolor();
  void set_allocated_shadowcolor(::atom::proto::Color* shadowcolor);

  // optional bool InitialVisibility = 15;
  void clear_initialvisibility();
  static const int kInitialVisibilityFieldNumber = 15;
  bool initialvisibility() const;
  void set_initialvisibility(bool value);

  // @@protoc_insertion_point(class_scope:atom.proto.lights.Light)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::atom::proto::Vector3* position_;
  int type_;
  float range_;
  ::atom::proto::Vector3* direction_;
  ::atom::proto::Color* color_;
  float intensity_;
  float coneangle_;
  float penumbraangle_;
  float dropoff_;
  ::google::protobuf::int32 shadowresolution_;
  float shadowbias_;
  ::atom::proto::Color* shadowcolor_;
  bool shadows_;
  bool initialvisibility_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lights_2fLight_2eproto();
  friend void protobuf_AssignDesc_lights_2fLight_2eproto();
  friend void protobuf_ShutdownFile_lights_2fLight_2eproto();

  void InitAsDefaultInstance();
  static Light* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Light

// optional string Name = 1;
inline void Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Light::name() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Light::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Name)
}
inline void Light::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.lights.Light.Name)
}
inline void Light::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.lights.Light.Name)
}
inline ::std::string* Light::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Light::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Name)
}

// optional .atom.proto.lights.LightType Type = 2;
inline void Light::clear_type() {
  type_ = 0;
}
inline ::atom::proto::lights::LightType Light::type() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Type)
  return static_cast< ::atom::proto::lights::LightType >(type_);
}
inline void Light::set_type(::atom::proto::lights::LightType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Type)
}

// optional .atom.proto.Vector3 Position = 3;
inline bool Light::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Light::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::atom::proto::Vector3& Light::position() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::atom::proto::Vector3* Light::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Position)
  return position_;
}
inline ::atom::proto::Vector3* Light::release_position() {
  
  ::atom::proto::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Light::set_allocated_position(::atom::proto::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Position)
}

// optional .atom.proto.Vector3 Direction = 4;
inline bool Light::has_direction() const {
  return !_is_default_instance_ && direction_ != NULL;
}
inline void Light::clear_direction() {
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) delete direction_;
  direction_ = NULL;
}
inline const ::atom::proto::Vector3& Light::direction() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::atom::proto::Vector3* Light::mutable_direction() {
  
  if (direction_ == NULL) {
    direction_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Direction)
  return direction_;
}
inline ::atom::proto::Vector3* Light::release_direction() {
  
  ::atom::proto::Vector3* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void Light::set_allocated_direction(::atom::proto::Vector3* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Direction)
}

// optional float Range = 5;
inline void Light::clear_range() {
  range_ = 0;
}
inline float Light::range() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Range)
  return range_;
}
inline void Light::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Range)
}

// optional .atom.proto.Color Color = 6;
inline bool Light::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
inline void Light::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
inline const ::atom::proto::Color& Light::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::atom::proto::Color* Light::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Color)
  return color_;
}
inline ::atom::proto::Color* Light::release_color() {
  
  ::atom::proto::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void Light::set_allocated_color(::atom::proto::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Color)
}

// optional float Intensity = 7;
inline void Light::clear_intensity() {
  intensity_ = 0;
}
inline float Light::intensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Intensity)
  return intensity_;
}
inline void Light::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Intensity)
}

// optional float ConeAngle = 8;
inline void Light::clear_coneangle() {
  coneangle_ = 0;
}
inline float Light::coneangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ConeAngle)
  return coneangle_;
}
inline void Light::set_coneangle(float value) {
  
  coneangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.ConeAngle)
}

// optional float PenumbraAngle = 9;
inline void Light::clear_penumbraangle() {
  penumbraangle_ = 0;
}
inline float Light::penumbraangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.PenumbraAngle)
  return penumbraangle_;
}
inline void Light::set_penumbraangle(float value) {
  
  penumbraangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.PenumbraAngle)
}

// optional float Dropoff = 10;
inline void Light::clear_dropoff() {
  dropoff_ = 0;
}
inline float Light::dropoff() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Dropoff)
  return dropoff_;
}
inline void Light::set_dropoff(float value) {
  
  dropoff_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Dropoff)
}

// optional bool Shadows = 11;
inline void Light::clear_shadows() {
  shadows_ = false;
}
inline bool Light::shadows() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Shadows)
  return shadows_;
}
inline void Light::set_shadows(bool value) {
  
  shadows_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Shadows)
}

// optional int32 ShadowResolution = 12;
inline void Light::clear_shadowresolution() {
  shadowresolution_ = 0;
}
inline ::google::protobuf::int32 Light::shadowresolution() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ShadowResolution)
  return shadowresolution_;
}
inline void Light::set_shadowresolution(::google::protobuf::int32 value) {
  
  shadowresolution_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.ShadowResolution)
}

// optional float ShadowBias = 13;
inline void Light::clear_shadowbias() {
  shadowbias_ = 0;
}
inline float Light::shadowbias() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ShadowBias)
  return shadowbias_;
}
inline void Light::set_shadowbias(float value) {
  
  shadowbias_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.ShadowBias)
}

// optional .atom.proto.Color ShadowColor = 14;
inline bool Light::has_shadowcolor() const {
  return !_is_default_instance_ && shadowcolor_ != NULL;
}
inline void Light::clear_shadowcolor() {
  if (GetArenaNoVirtual() == NULL && shadowcolor_ != NULL) delete shadowcolor_;
  shadowcolor_ = NULL;
}
inline const ::atom::proto::Color& Light::shadowcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ShadowColor)
  return shadowcolor_ != NULL ? *shadowcolor_ : *default_instance_->shadowcolor_;
}
inline ::atom::proto::Color* Light::mutable_shadowcolor() {
  
  if (shadowcolor_ == NULL) {
    shadowcolor_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.ShadowColor)
  return shadowcolor_;
}
inline ::atom::proto::Color* Light::release_shadowcolor() {
  
  ::atom::proto::Color* temp = shadowcolor_;
  shadowcolor_ = NULL;
  return temp;
}
inline void Light::set_allocated_shadowcolor(::atom::proto::Color* shadowcolor) {
  delete shadowcolor_;
  shadowcolor_ = shadowcolor;
  if (shadowcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.ShadowColor)
}

// optional bool InitialVisibility = 15;
inline void Light::clear_initialvisibility() {
  initialvisibility_ = false;
}
inline bool Light::initialvisibility() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.InitialVisibility)
  return initialvisibility_;
}
inline void Light::set_initialvisibility(bool value) {
  
  initialvisibility_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.InitialVisibility)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lights
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lights_2fLight_2eproto__INCLUDED
