// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights/Light.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lights/Light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace lights {

namespace {

const ::google::protobuf::Descriptor* Light_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Light_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lights_2fLight_2eproto() {
  protobuf_AddDesc_lights_2fLight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lights/Light.proto");
  GOOGLE_CHECK(file != NULL);
  Light_descriptor_ = file->message_type(0);
  static const int Light_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, coneangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, penumbraangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, dropoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, shadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, shadowresolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, shadowbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, shadowcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, initialvisibility_),
  };
  Light_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Light_descriptor_,
      Light::default_instance_,
      Light_offsets_,
      -1,
      -1,
      -1,
      sizeof(Light),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lights_2fLight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Light_descriptor_, &Light::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lights_2fLight_2eproto() {
  delete Light::default_instance_;
  delete Light_reflection_;
}

void protobuf_AddDesc_lights_2fLight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::lights::protobuf_AddDesc_lights_2fLightType_2eproto();
  ::atom::proto::protobuf_AddDesc_Vector3_2eproto();
  ::atom::proto::protobuf_AddDesc_Color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022lights/Light.proto\022\021atom.proto.lights\032"
    "\026lights/LightType.proto\032\rVector3.proto\032\013"
    "Color.proto\"\221\003\n\005Light\022\014\n\004Name\030\001 \001(\t\022*\n\004T"
    "ype\030\002 \001(\0162\034.atom.proto.lights.LightType\022"
    "%\n\010Position\030\003 \001(\0132\023.atom.proto.Vector3\022&"
    "\n\tDirection\030\004 \001(\0132\023.atom.proto.Vector3\022\r"
    "\n\005Range\030\005 \001(\002\022 \n\005Color\030\006 \001(\0132\021.atom.prot"
    "o.Color\022\021\n\tIntensity\030\007 \001(\002\022\021\n\tConeAngle\030"
    "\010 \001(\002\022\025\n\rPenumbraAngle\030\t \001(\002\022\017\n\007Dropoff\030"
    "\n \001(\002\022\017\n\007Shadows\030\013 \001(\010\022\030\n\020ShadowResoluti"
    "on\030\014 \001(\005\022\022\n\nShadowBias\030\r \001(\002\022&\n\013ShadowCo"
    "lor\030\016 \001(\0132\021.atom.proto.Color\022\031\n\021InitialV"
    "isibility\030\017 \001(\010b\006proto3", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lights/Light.proto", &protobuf_RegisterTypes);
  Light::default_instance_ = new Light();
  Light::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lights_2fLight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lights_2fLight_2eproto {
  StaticDescriptorInitializer_lights_2fLight_2eproto() {
    protobuf_AddDesc_lights_2fLight_2eproto();
  }
} static_descriptor_initializer_lights_2fLight_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kNameFieldNumber;
const int Light::kTypeFieldNumber;
const int Light::kPositionFieldNumber;
const int Light::kDirectionFieldNumber;
const int Light::kRangeFieldNumber;
const int Light::kColorFieldNumber;
const int Light::kIntensityFieldNumber;
const int Light::kConeAngleFieldNumber;
const int Light::kPenumbraAngleFieldNumber;
const int Light::kDropoffFieldNumber;
const int Light::kShadowsFieldNumber;
const int Light::kShadowResolutionFieldNumber;
const int Light::kShadowBiasFieldNumber;
const int Light::kShadowColorFieldNumber;
const int Light::kInitialVisibilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.lights.Light)
}

void Light::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
  direction_ = const_cast< ::atom::proto::Vector3*>(&::atom::proto::Vector3::default_instance());
  color_ = const_cast< ::atom::proto::Color*>(&::atom::proto::Color::default_instance());
  shadowcolor_ = const_cast< ::atom::proto::Color*>(&::atom::proto::Color::default_instance());
}

Light::Light(const Light& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.lights.Light)
}

void Light::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  position_ = NULL;
  direction_ = NULL;
  range_ = 0;
  color_ = NULL;
  intensity_ = 0;
  coneangle_ = 0;
  penumbraangle_ = 0;
  dropoff_ = 0;
  shadows_ = false;
  shadowresolution_ = 0;
  shadowbias_ = 0;
  shadowcolor_ = NULL;
  initialvisibility_ = false;
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:atom.proto.lights.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete color_;
    delete shadowcolor_;
  }
}

void Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_descriptor_;
}

const Light& Light::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lights_2fLight_2eproto();
  return *default_instance_;
}

Light* Light::default_instance_ = NULL;

Light* Light::New(::google::protobuf::Arena* arena) const {
  Light* n = new Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Light*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, range_);
  ZR_(intensity_, coneangle_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) delete direction_;
  direction_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  ZR_(penumbraangle_, shadowbias_);
  ZR_(shadows_, initialvisibility_);
  if (GetArenaNoVirtual() == NULL && shadowcolor_ != NULL) delete shadowcolor_;
  shadowcolor_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.lights.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.lights.Light.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .atom.proto.lights.LightType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::atom::proto::lights::LightType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // optional .atom.proto.Vector3 Position = 3;
      case 3: {
        if (tag == 26) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Direction;
        break;
      }

      // optional .atom.proto.Vector3 Direction = 4;
      case 4: {
        if (tag == 34) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Range;
        break;
      }

      // optional float Range = 5;
      case 5: {
        if (tag == 45) {
         parse_Range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Color;
        break;
      }

      // optional .atom.proto.Color Color = 6;
      case 6: {
        if (tag == 50) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Intensity;
        break;
      }

      // optional float Intensity = 7;
      case 7: {
        if (tag == 61) {
         parse_Intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_ConeAngle;
        break;
      }

      // optional float ConeAngle = 8;
      case 8: {
        if (tag == 69) {
         parse_ConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coneangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_PenumbraAngle;
        break;
      }

      // optional float PenumbraAngle = 9;
      case 9: {
        if (tag == 77) {
         parse_PenumbraAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penumbraangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_Dropoff;
        break;
      }

      // optional float Dropoff = 10;
      case 10: {
        if (tag == 85) {
         parse_Dropoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropoff_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Shadows;
        break;
      }

      // optional bool Shadows = 11;
      case 11: {
        if (tag == 88) {
         parse_Shadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ShadowResolution;
        break;
      }

      // optional int32 ShadowResolution = 12;
      case 12: {
        if (tag == 96) {
         parse_ShadowResolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shadowresolution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_ShadowBias;
        break;
      }

      // optional float ShadowBias = 13;
      case 13: {
        if (tag == 109) {
         parse_ShadowBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadowbias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ShadowColor;
        break;
      }

      // optional .atom.proto.Color ShadowColor = 14;
      case 14: {
        if (tag == 114) {
         parse_ShadowColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_InitialVisibility;
        break;
      }

      // optional bool InitialVisibility = 15;
      case 15: {
        if (tag == 120) {
         parse_InitialVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialvisibility_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.lights.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.lights.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.lights.Light)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.lights.Light.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .atom.proto.lights.LightType Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .atom.proto.Vector3 Position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional .atom.proto.Vector3 Direction = 4;
  if (this->has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->direction_, output);
  }

  // optional float Range = 5;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // optional .atom.proto.Color Color = 6;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->color_, output);
  }

  // optional float Intensity = 7;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->intensity(), output);
  }

  // optional float ConeAngle = 8;
  if (this->coneangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->coneangle(), output);
  }

  // optional float PenumbraAngle = 9;
  if (this->penumbraangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->penumbraangle(), output);
  }

  // optional float Dropoff = 10;
  if (this->dropoff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dropoff(), output);
  }

  // optional bool Shadows = 11;
  if (this->shadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->shadows(), output);
  }

  // optional int32 ShadowResolution = 12;
  if (this->shadowresolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->shadowresolution(), output);
  }

  // optional float ShadowBias = 13;
  if (this->shadowbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->shadowbias(), output);
  }

  // optional .atom.proto.Color ShadowColor = 14;
  if (this->has_shadowcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->shadowcolor_, output);
  }

  // optional bool InitialVisibility = 15;
  if (this->initialvisibility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->initialvisibility(), output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.lights.Light)
}

::google::protobuf::uint8* Light::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.lights.Light)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.lights.Light.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .atom.proto.lights.LightType Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .atom.proto.Vector3 Position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->position_, target);
  }

  // optional .atom.proto.Vector3 Direction = 4;
  if (this->has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->direction_, target);
  }

  // optional float Range = 5;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // optional .atom.proto.Color Color = 6;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->color_, target);
  }

  // optional float Intensity = 7;
  if (this->intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->intensity(), target);
  }

  // optional float ConeAngle = 8;
  if (this->coneangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->coneangle(), target);
  }

  // optional float PenumbraAngle = 9;
  if (this->penumbraangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->penumbraangle(), target);
  }

  // optional float Dropoff = 10;
  if (this->dropoff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dropoff(), target);
  }

  // optional bool Shadows = 11;
  if (this->shadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->shadows(), target);
  }

  // optional int32 ShadowResolution = 12;
  if (this->shadowresolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->shadowresolution(), target);
  }

  // optional float ShadowBias = 13;
  if (this->shadowbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->shadowbias(), target);
  }

  // optional .atom.proto.Color ShadowColor = 14;
  if (this->has_shadowcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->shadowcolor_, target);
  }

  // optional bool InitialVisibility = 15;
  if (this->initialvisibility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->initialvisibility(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.lights.Light)
  return target;
}

int Light::ByteSize() const {
  int total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .atom.proto.lights.LightType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .atom.proto.Vector3 Position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .atom.proto.Vector3 Direction = 4;
  if (this->has_direction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);
  }

  // optional float Range = 5;
  if (this->range() != 0) {
    total_size += 1 + 4;
  }

  // optional .atom.proto.Color Color = 6;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional float Intensity = 7;
  if (this->intensity() != 0) {
    total_size += 1 + 4;
  }

  // optional float ConeAngle = 8;
  if (this->coneangle() != 0) {
    total_size += 1 + 4;
  }

  // optional float PenumbraAngle = 9;
  if (this->penumbraangle() != 0) {
    total_size += 1 + 4;
  }

  // optional float Dropoff = 10;
  if (this->dropoff() != 0) {
    total_size += 1 + 4;
  }

  // optional bool Shadows = 11;
  if (this->shadows() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 ShadowResolution = 12;
  if (this->shadowresolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shadowresolution());
  }

  // optional float ShadowBias = 13;
  if (this->shadowbias() != 0) {
    total_size += 1 + 4;
  }

  // optional .atom.proto.Color ShadowColor = 14;
  if (this->has_shadowcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shadowcolor_);
  }

  // optional bool InitialVisibility = 15;
  if (this->initialvisibility() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Light* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_position()) {
    mutable_position()->::atom::proto::Vector3::MergeFrom(from.position());
  }
  if (from.has_direction()) {
    mutable_direction()->::atom::proto::Vector3::MergeFrom(from.direction());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.has_color()) {
    mutable_color()->::atom::proto::Color::MergeFrom(from.color());
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
  if (from.coneangle() != 0) {
    set_coneangle(from.coneangle());
  }
  if (from.penumbraangle() != 0) {
    set_penumbraangle(from.penumbraangle());
  }
  if (from.dropoff() != 0) {
    set_dropoff(from.dropoff());
  }
  if (from.shadows() != 0) {
    set_shadows(from.shadows());
  }
  if (from.shadowresolution() != 0) {
    set_shadowresolution(from.shadowresolution());
  }
  if (from.shadowbias() != 0) {
    set_shadowbias(from.shadowbias());
  }
  if (from.has_shadowcolor()) {
    mutable_shadowcolor()->::atom::proto::Color::MergeFrom(from.shadowcolor());
  }
  if (from.initialvisibility() != 0) {
    set_initialvisibility(from.initialvisibility());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {

  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(position_, other->position_);
  std::swap(direction_, other->direction_);
  std::swap(range_, other->range_);
  std::swap(color_, other->color_);
  std::swap(intensity_, other->intensity_);
  std::swap(coneangle_, other->coneangle_);
  std::swap(penumbraangle_, other->penumbraangle_);
  std::swap(dropoff_, other->dropoff_);
  std::swap(shadows_, other->shadows_);
  std::swap(shadowresolution_, other->shadowresolution_);
  std::swap(shadowbias_, other->shadowbias_);
  std::swap(shadowcolor_, other->shadowcolor_);
  std::swap(initialvisibility_, other->initialvisibility_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Light_descriptor_;
  metadata.reflection = Light_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Light

// optional string Name = 1;
void Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Light::name() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Light::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Name)
}
 void Light::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.lights.Light.Name)
}
 void Light::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.lights.Light.Name)
}
 ::std::string* Light::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Light::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Name)
}

// optional .atom.proto.lights.LightType Type = 2;
void Light::clear_type() {
  type_ = 0;
}
 ::atom::proto::lights::LightType Light::type() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Type)
  return static_cast< ::atom::proto::lights::LightType >(type_);
}
 void Light::set_type(::atom::proto::lights::LightType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Type)
}

// optional .atom.proto.Vector3 Position = 3;
bool Light::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Light::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::atom::proto::Vector3& Light::position() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::atom::proto::Vector3* Light::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Position)
  return position_;
}
::atom::proto::Vector3* Light::release_position() {
  
  ::atom::proto::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
void Light::set_allocated_position(::atom::proto::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Position)
}

// optional .atom.proto.Vector3 Direction = 4;
bool Light::has_direction() const {
  return !_is_default_instance_ && direction_ != NULL;
}
void Light::clear_direction() {
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) delete direction_;
  direction_ = NULL;
}
const ::atom::proto::Vector3& Light::direction() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
::atom::proto::Vector3* Light::mutable_direction() {
  
  if (direction_ == NULL) {
    direction_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Direction)
  return direction_;
}
::atom::proto::Vector3* Light::release_direction() {
  
  ::atom::proto::Vector3* temp = direction_;
  direction_ = NULL;
  return temp;
}
void Light::set_allocated_direction(::atom::proto::Vector3* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Direction)
}

// optional float Range = 5;
void Light::clear_range() {
  range_ = 0;
}
 float Light::range() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Range)
  return range_;
}
 void Light::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Range)
}

// optional .atom.proto.Color Color = 6;
bool Light::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void Light::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::atom::proto::Color& Light::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::atom::proto::Color* Light::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.Color)
  return color_;
}
::atom::proto::Color* Light::release_color() {
  
  ::atom::proto::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void Light::set_allocated_color(::atom::proto::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.Color)
}

// optional float Intensity = 7;
void Light::clear_intensity() {
  intensity_ = 0;
}
 float Light::intensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Intensity)
  return intensity_;
}
 void Light::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Intensity)
}

// optional float ConeAngle = 8;
void Light::clear_coneangle() {
  coneangle_ = 0;
}
 float Light::coneangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ConeAngle)
  return coneangle_;
}
 void Light::set_coneangle(float value) {
  
  coneangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.ConeAngle)
}

// optional float PenumbraAngle = 9;
void Light::clear_penumbraangle() {
  penumbraangle_ = 0;
}
 float Light::penumbraangle() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.PenumbraAngle)
  return penumbraangle_;
}
 void Light::set_penumbraangle(float value) {
  
  penumbraangle_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.PenumbraAngle)
}

// optional float Dropoff = 10;
void Light::clear_dropoff() {
  dropoff_ = 0;
}
 float Light::dropoff() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Dropoff)
  return dropoff_;
}
 void Light::set_dropoff(float value) {
  
  dropoff_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Dropoff)
}

// optional bool Shadows = 11;
void Light::clear_shadows() {
  shadows_ = false;
}
 bool Light::shadows() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.Shadows)
  return shadows_;
}
 void Light::set_shadows(bool value) {
  
  shadows_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.Shadows)
}

// optional int32 ShadowResolution = 12;
void Light::clear_shadowresolution() {
  shadowresolution_ = 0;
}
 ::google::protobuf::int32 Light::shadowresolution() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ShadowResolution)
  return shadowresolution_;
}
 void Light::set_shadowresolution(::google::protobuf::int32 value) {
  
  shadowresolution_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.ShadowResolution)
}

// optional float ShadowBias = 13;
void Light::clear_shadowbias() {
  shadowbias_ = 0;
}
 float Light::shadowbias() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ShadowBias)
  return shadowbias_;
}
 void Light::set_shadowbias(float value) {
  
  shadowbias_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.ShadowBias)
}

// optional .atom.proto.Color ShadowColor = 14;
bool Light::has_shadowcolor() const {
  return !_is_default_instance_ && shadowcolor_ != NULL;
}
void Light::clear_shadowcolor() {
  if (GetArenaNoVirtual() == NULL && shadowcolor_ != NULL) delete shadowcolor_;
  shadowcolor_ = NULL;
}
const ::atom::proto::Color& Light::shadowcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.ShadowColor)
  return shadowcolor_ != NULL ? *shadowcolor_ : *default_instance_->shadowcolor_;
}
::atom::proto::Color* Light::mutable_shadowcolor() {
  
  if (shadowcolor_ == NULL) {
    shadowcolor_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.lights.Light.ShadowColor)
  return shadowcolor_;
}
::atom::proto::Color* Light::release_shadowcolor() {
  
  ::atom::proto::Color* temp = shadowcolor_;
  shadowcolor_ = NULL;
  return temp;
}
void Light::set_allocated_shadowcolor(::atom::proto::Color* shadowcolor) {
  delete shadowcolor_;
  shadowcolor_ = shadowcolor;
  if (shadowcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.lights.Light.ShadowColor)
}

// optional bool InitialVisibility = 15;
void Light::clear_initialvisibility() {
  initialvisibility_ = false;
}
 bool Light::initialvisibility() const {
  // @@protoc_insertion_point(field_get:atom.proto.lights.Light.InitialVisibility)
  return initialvisibility_;
}
 void Light::set_initialvisibility(bool value) {
  
  initialvisibility_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.lights.Light.InitialVisibility)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lights
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
