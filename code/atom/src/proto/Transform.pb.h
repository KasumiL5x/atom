// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transform.proto

#ifndef PROTOBUF_Transform_2eproto__INCLUDED
#define PROTOBUF_Transform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Component.pb.h"
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Transform_2eproto();
void protobuf_AssignDesc_Transform_2eproto();
void protobuf_ShutdownFile_Transform_2eproto();

class Transform;

// ===================================================================

class Transform : public ::google::protobuf::Message {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform& default_instance();

  void Swap(Transform* other);

  // implements Message ----------------------------------------------

  inline Transform* New() const { return New(NULL); }

  Transform* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .atom.proto.Matrix World = 2;
  bool has_world() const;
  void clear_world();
  static const int kWorldFieldNumber = 2;
  const ::atom::proto::Matrix& world() const;
  ::atom::proto::Matrix* mutable_world();
  ::atom::proto::Matrix* release_world();
  void set_allocated_world(::atom::proto::Matrix* world);

  // repeated .atom.proto.Component Components = 3;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 3;
  const ::atom::proto::Component& components(int index) const;
  ::atom::proto::Component* mutable_components(int index);
  ::atom::proto::Component* add_components();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Component >*
      mutable_components();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::Component >&
      components() const;

  // optional bool InitialVisibility = 4;
  void clear_initialvisibility();
  static const int kInitialVisibilityFieldNumber = 4;
  bool initialvisibility() const;
  void set_initialvisibility(bool value);

  // @@protoc_insertion_point(class_scope:atom.proto.Transform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::atom::proto::Matrix* world_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Component > components_;
  bool initialvisibility_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Transform_2eproto();
  friend void protobuf_AssignDesc_Transform_2eproto();
  friend void protobuf_ShutdownFile_Transform_2eproto();

  void InitAsDefaultInstance();
  static Transform* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional string Name = 1;
inline void Transform::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transform::name() const {
  // @@protoc_insertion_point(field_get:atom.proto.Transform.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.Transform.Name)
}
inline void Transform::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.Transform.Name)
}
inline void Transform::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.Transform.Name)
}
inline ::std::string* Transform::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.Transform.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transform::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Transform.Name)
}

// optional .atom.proto.Matrix World = 2;
inline bool Transform::has_world() const {
  return !_is_default_instance_ && world_ != NULL;
}
inline void Transform::clear_world() {
  if (GetArenaNoVirtual() == NULL && world_ != NULL) delete world_;
  world_ = NULL;
}
inline const ::atom::proto::Matrix& Transform::world() const {
  // @@protoc_insertion_point(field_get:atom.proto.Transform.World)
  return world_ != NULL ? *world_ : *default_instance_->world_;
}
inline ::atom::proto::Matrix* Transform::mutable_world() {
  
  if (world_ == NULL) {
    world_ = new ::atom::proto::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Transform.World)
  return world_;
}
inline ::atom::proto::Matrix* Transform::release_world() {
  
  ::atom::proto::Matrix* temp = world_;
  world_ = NULL;
  return temp;
}
inline void Transform::set_allocated_world(::atom::proto::Matrix* world) {
  delete world_;
  world_ = world;
  if (world) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Transform.World)
}

// repeated .atom.proto.Component Components = 3;
inline int Transform::components_size() const {
  return components_.size();
}
inline void Transform::clear_components() {
  components_.Clear();
}
inline const ::atom::proto::Component& Transform::components(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Transform.Components)
  return components_.Get(index);
}
inline ::atom::proto::Component* Transform::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Transform.Components)
  return components_.Mutable(index);
}
inline ::atom::proto::Component* Transform::add_components() {
  // @@protoc_insertion_point(field_add:atom.proto.Transform.Components)
  return components_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::Component >*
Transform::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Transform.Components)
  return &components_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::Component >&
Transform::components() const {
  // @@protoc_insertion_point(field_list:atom.proto.Transform.Components)
  return components_;
}

// optional bool InitialVisibility = 4;
inline void Transform::clear_initialvisibility() {
  initialvisibility_ = false;
}
inline bool Transform::initialvisibility() const {
  // @@protoc_insertion_point(field_get:atom.proto.Transform.InitialVisibility)
  return initialvisibility_;
}
inline void Transform::set_initialvisibility(bool value) {
  
  initialvisibility_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Transform.InitialVisibility)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Transform_2eproto__INCLUDED
