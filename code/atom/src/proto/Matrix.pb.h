// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Matrix.proto

#ifndef PROTOBUF_Matrix_2eproto__INCLUDED
#define PROTOBUF_Matrix_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Matrix_2eproto();
void protobuf_AssignDesc_Matrix_2eproto();
void protobuf_ShutdownFile_Matrix_2eproto();

class Matrix;

// ===================================================================

class Matrix : public ::google::protobuf::Message {
 public:
  Matrix();
  virtual ~Matrix();

  Matrix(const Matrix& from);

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix& default_instance();

  void Swap(Matrix* other);

  // implements Message ----------------------------------------------

  inline Matrix* New() const { return New(NULL); }

  Matrix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Matrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // optional uint32 Cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // repeated float M = 3 [packed = true];
  int m_size() const;
  void clear_m();
  static const int kMFieldNumber = 3;
  float m(int index) const;
  void set_m(int index, float value);
  void add_m(float value);
  const ::google::protobuf::RepeatedField< float >&
      m() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_m();

  // @@protoc_insertion_point(class_scope:atom.proto.Matrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  ::google::protobuf::RepeatedField< float > m_;
  mutable int _m_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Matrix_2eproto();
  friend void protobuf_AssignDesc_Matrix_2eproto();
  friend void protobuf_ShutdownFile_Matrix_2eproto();

  void InitAsDefaultInstance();
  static Matrix* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix

// optional uint32 Rows = 1;
inline void Matrix::clear_rows() {
  rows_ = 0u;
}
inline ::google::protobuf::uint32 Matrix::rows() const {
  // @@protoc_insertion_point(field_get:atom.proto.Matrix.Rows)
  return rows_;
}
inline void Matrix::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Matrix.Rows)
}

// optional uint32 Cols = 2;
inline void Matrix::clear_cols() {
  cols_ = 0u;
}
inline ::google::protobuf::uint32 Matrix::cols() const {
  // @@protoc_insertion_point(field_get:atom.proto.Matrix.Cols)
  return cols_;
}
inline void Matrix::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Matrix.Cols)
}

// repeated float M = 3 [packed = true];
inline int Matrix::m_size() const {
  return m_.size();
}
inline void Matrix::clear_m() {
  m_.Clear();
}
inline float Matrix::m(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Matrix.M)
  return m_.Get(index);
}
inline void Matrix::set_m(int index, float value) {
  m_.Set(index, value);
  // @@protoc_insertion_point(field_set:atom.proto.Matrix.M)
}
inline void Matrix::add_m(float value) {
  m_.Add(value);
  // @@protoc_insertion_point(field_add:atom.proto.Matrix.M)
}
inline const ::google::protobuf::RepeatedField< float >&
Matrix::m() const {
  // @@protoc_insertion_point(field_list:atom.proto.Matrix.M)
  return m_;
}
inline ::google::protobuf::RepeatedField< float >*
Matrix::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Matrix.M)
  return &m_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Matrix_2eproto__INCLUDED
