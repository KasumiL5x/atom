// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vertex.proto

#ifndef PROTOBUF_Vertex_2eproto__INCLUDED
#define PROTOBUF_Vertex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Vector2.pb.h"
#include "Vector3.pb.h"
#include "Color.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Vertex_2eproto();
void protobuf_AssignDesc_Vertex_2eproto();
void protobuf_ShutdownFile_Vertex_2eproto();

class Vertex;

// ===================================================================

class Vertex : public ::google::protobuf::Message {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  void Swap(Vertex* other);

  // implements Message ----------------------------------------------

  inline Vertex* New() const { return New(NULL); }

  Vertex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional .atom.proto.Vector3 Position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::atom::proto::Vector3& position() const;
  ::atom::proto::Vector3* mutable_position();
  ::atom::proto::Vector3* release_position();
  void set_allocated_position(::atom::proto::Vector3* position);

  // optional .atom.proto.Vector3 Normal = 3;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 3;
  const ::atom::proto::Vector3& normal() const;
  ::atom::proto::Vector3* mutable_normal();
  ::atom::proto::Vector3* release_normal();
  void set_allocated_normal(::atom::proto::Vector3* normal);

  // repeated .atom.proto.Vector2 Texcoord = 4;
  int texcoord_size() const;
  void clear_texcoord();
  static const int kTexcoordFieldNumber = 4;
  const ::atom::proto::Vector2& texcoord(int index) const;
  ::atom::proto::Vector2* mutable_texcoord(int index);
  ::atom::proto::Vector2* add_texcoord();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector2 >*
      mutable_texcoord();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector2 >&
      texcoord() const;

  // repeated .atom.proto.Vector3 Tangent = 5;
  int tangent_size() const;
  void clear_tangent();
  static const int kTangentFieldNumber = 5;
  const ::atom::proto::Vector3& tangent(int index) const;
  ::atom::proto::Vector3* mutable_tangent(int index);
  ::atom::proto::Vector3* add_tangent();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >*
      mutable_tangent();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >&
      tangent() const;

  // repeated .atom.proto.Vector3 Binormal = 6;
  int binormal_size() const;
  void clear_binormal();
  static const int kBinormalFieldNumber = 6;
  const ::atom::proto::Vector3& binormal(int index) const;
  ::atom::proto::Vector3* mutable_binormal(int index);
  ::atom::proto::Vector3* add_binormal();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >*
      mutable_binormal();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >&
      binormal() const;

  // repeated .atom.proto.Color Color = 7;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::atom::proto::Color& color(int index) const;
  ::atom::proto::Color* mutable_color(int index);
  ::atom::proto::Color* add_color();
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Color >*
      mutable_color();
  const ::google::protobuf::RepeatedPtrField< ::atom::proto::Color >&
      color() const;

  // @@protoc_insertion_point(class_scope:atom.proto.Vertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::atom::proto::Vector3* position_;
  ::atom::proto::Vector3* normal_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector2 > texcoord_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 > tangent_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 > binormal_;
  ::google::protobuf::RepeatedPtrField< ::atom::proto::Color > color_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Vertex_2eproto();
  friend void protobuf_AssignDesc_Vertex_2eproto();
  friend void protobuf_ShutdownFile_Vertex_2eproto();

  void InitAsDefaultInstance();
  static Vertex* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// optional int32 Index = 1;
inline void Vertex::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Vertex::index() const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Index)
  return index_;
}
inline void Vertex::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Vertex.Index)
}

// optional .atom.proto.Vector3 Position = 2;
inline bool Vertex::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Vertex::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::atom::proto::Vector3& Vertex::position() const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::atom::proto::Vector3* Vertex::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Vertex.Position)
  return position_;
}
inline ::atom::proto::Vector3* Vertex::release_position() {
  
  ::atom::proto::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Vertex::set_allocated_position(::atom::proto::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Vertex.Position)
}

// optional .atom.proto.Vector3 Normal = 3;
inline bool Vertex::has_normal() const {
  return !_is_default_instance_ && normal_ != NULL;
}
inline void Vertex::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) delete normal_;
  normal_ = NULL;
}
inline const ::atom::proto::Vector3& Vertex::normal() const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::atom::proto::Vector3* Vertex::mutable_normal() {
  
  if (normal_ == NULL) {
    normal_ = new ::atom::proto::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Vertex.Normal)
  return normal_;
}
inline ::atom::proto::Vector3* Vertex::release_normal() {
  
  ::atom::proto::Vector3* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void Vertex::set_allocated_normal(::atom::proto::Vector3* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Vertex.Normal)
}

// repeated .atom.proto.Vector2 Texcoord = 4;
inline int Vertex::texcoord_size() const {
  return texcoord_.size();
}
inline void Vertex::clear_texcoord() {
  texcoord_.Clear();
}
inline const ::atom::proto::Vector2& Vertex::texcoord(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Texcoord)
  return texcoord_.Get(index);
}
inline ::atom::proto::Vector2* Vertex::mutable_texcoord(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Vertex.Texcoord)
  return texcoord_.Mutable(index);
}
inline ::atom::proto::Vector2* Vertex::add_texcoord() {
  // @@protoc_insertion_point(field_add:atom.proto.Vertex.Texcoord)
  return texcoord_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector2 >*
Vertex::mutable_texcoord() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Vertex.Texcoord)
  return &texcoord_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector2 >&
Vertex::texcoord() const {
  // @@protoc_insertion_point(field_list:atom.proto.Vertex.Texcoord)
  return texcoord_;
}

// repeated .atom.proto.Vector3 Tangent = 5;
inline int Vertex::tangent_size() const {
  return tangent_.size();
}
inline void Vertex::clear_tangent() {
  tangent_.Clear();
}
inline const ::atom::proto::Vector3& Vertex::tangent(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Tangent)
  return tangent_.Get(index);
}
inline ::atom::proto::Vector3* Vertex::mutable_tangent(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Vertex.Tangent)
  return tangent_.Mutable(index);
}
inline ::atom::proto::Vector3* Vertex::add_tangent() {
  // @@protoc_insertion_point(field_add:atom.proto.Vertex.Tangent)
  return tangent_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >*
Vertex::mutable_tangent() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Vertex.Tangent)
  return &tangent_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >&
Vertex::tangent() const {
  // @@protoc_insertion_point(field_list:atom.proto.Vertex.Tangent)
  return tangent_;
}

// repeated .atom.proto.Vector3 Binormal = 6;
inline int Vertex::binormal_size() const {
  return binormal_.size();
}
inline void Vertex::clear_binormal() {
  binormal_.Clear();
}
inline const ::atom::proto::Vector3& Vertex::binormal(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Binormal)
  return binormal_.Get(index);
}
inline ::atom::proto::Vector3* Vertex::mutable_binormal(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Vertex.Binormal)
  return binormal_.Mutable(index);
}
inline ::atom::proto::Vector3* Vertex::add_binormal() {
  // @@protoc_insertion_point(field_add:atom.proto.Vertex.Binormal)
  return binormal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >*
Vertex::mutable_binormal() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Vertex.Binormal)
  return &binormal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::Vector3 >&
Vertex::binormal() const {
  // @@protoc_insertion_point(field_list:atom.proto.Vertex.Binormal)
  return binormal_;
}

// repeated .atom.proto.Color Color = 7;
inline int Vertex::color_size() const {
  return color_.size();
}
inline void Vertex::clear_color() {
  color_.Clear();
}
inline const ::atom::proto::Color& Vertex::color(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Vertex.Color)
  return color_.Get(index);
}
inline ::atom::proto::Color* Vertex::mutable_color(int index) {
  // @@protoc_insertion_point(field_mutable:atom.proto.Vertex.Color)
  return color_.Mutable(index);
}
inline ::atom::proto::Color* Vertex::add_color() {
  // @@protoc_insertion_point(field_add:atom.proto.Vertex.Color)
  return color_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atom::proto::Color >*
Vertex::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Vertex.Color)
  return &color_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atom::proto::Color >&
Vertex::color() const {
  // @@protoc_insertion_point(field_list:atom.proto.Vertex.Color)
  return color_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Vertex_2eproto__INCLUDED
