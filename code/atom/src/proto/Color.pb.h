// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Color.proto

#ifndef PROTOBUF_Color_2eproto__INCLUDED
#define PROTOBUF_Color_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Color_2eproto();
void protobuf_AssignDesc_Color_2eproto();
void protobuf_ShutdownFile_Color_2eproto();

class Color;

// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  float r() const;
  void set_r(float value);

  // optional float g = 2;
  void clear_g();
  static const int kGFieldNumber = 2;
  float g() const;
  void set_g(float value);

  // optional float b = 3;
  void clear_b();
  static const int kBFieldNumber = 3;
  float b() const;
  void set_b(float value);

  // optional float a = 4;
  void clear_a();
  static const int kAFieldNumber = 4;
  float a() const;
  void set_a(float value);

  // @@protoc_insertion_point(class_scope:atom.proto.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Color_2eproto();
  friend void protobuf_AssignDesc_Color_2eproto();
  friend void protobuf_ShutdownFile_Color_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional float r = 1;
inline void Color::clear_r() {
  r_ = 0;
}
inline float Color::r() const {
  // @@protoc_insertion_point(field_get:atom.proto.Color.r)
  return r_;
}
inline void Color::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Color.r)
}

// optional float g = 2;
inline void Color::clear_g() {
  g_ = 0;
}
inline float Color::g() const {
  // @@protoc_insertion_point(field_get:atom.proto.Color.g)
  return g_;
}
inline void Color::set_g(float value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Color.g)
}

// optional float b = 3;
inline void Color::clear_b() {
  b_ = 0;
}
inline float Color::b() const {
  // @@protoc_insertion_point(field_get:atom.proto.Color.b)
  return b_;
}
inline void Color::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Color.b)
}

// optional float a = 4;
inline void Color::clear_a() {
  a_ = 0;
}
inline float Color::a() const {
  // @@protoc_insertion_point(field_get:atom.proto.Color.a)
  return a_;
}
inline void Color::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Color.a)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Color_2eproto__INCLUDED
