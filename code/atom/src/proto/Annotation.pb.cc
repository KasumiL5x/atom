// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Annotation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Annotation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Annotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Annotation_2eproto() {
  protobuf_AddDesc_Annotation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Annotation.proto");
  GOOGLE_CHECK(file != NULL);
  Annotation_descriptor_ = file->message_type(0);
  static const int Annotation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, initialvisibility_),
  };
  Annotation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Annotation_descriptor_,
      Annotation::default_instance_,
      Annotation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Annotation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Annotation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Annotation_descriptor_, &Annotation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Annotation_2eproto() {
  delete Annotation::default_instance_;
  delete Annotation_reflection_;
}

void protobuf_AddDesc_Annotation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::protobuf_AddDesc_Matrix_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Annotation.proto\022\natom.proto\032\014Matrix.p"
    "roto\"f\n\nAnnotation\022\014\n\004Name\030\001 \001(\t\022\014\n\004Text"
    "\030\002 \001(\t\022!\n\005World\030\003 \001(\0132\022.atom.proto.Matri"
    "x\022\031\n\021InitialVisibility\030\004 \001(\010b\006proto3", 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Annotation.proto", &protobuf_RegisterTypes);
  Annotation::default_instance_ = new Annotation();
  Annotation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Annotation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Annotation_2eproto {
  StaticDescriptorInitializer_Annotation_2eproto() {
    protobuf_AddDesc_Annotation_2eproto();
  }
} static_descriptor_initializer_Annotation_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotation::kNameFieldNumber;
const int Annotation::kTextFieldNumber;
const int Annotation::kWorldFieldNumber;
const int Annotation::kInitialVisibilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotation::Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.Annotation)
}

void Annotation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  world_ = const_cast< ::atom::proto::Matrix*>(&::atom::proto::Matrix::default_instance());
}

Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.Annotation)
}

void Annotation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_ = NULL;
  initialvisibility_ = false;
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:atom.proto.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete world_;
  }
}

void Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotation_descriptor_;
}

const Annotation& Annotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Annotation_2eproto();
  return *default_instance_;
}

Annotation* Annotation::default_instance_ = NULL;

Annotation* Annotation::New(::google::protobuf::Arena* arena) const {
  Annotation* n = new Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Annotation::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && world_ != NULL) delete world_;
  world_ = NULL;
  initialvisibility_ = false;
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.Annotation.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Text;
        break;
      }

      // optional string Text = 2;
      case 2: {
        if (tag == 18) {
         parse_Text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.Annotation.Text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_World;
        break;
      }

      // optional .atom.proto.Matrix World = 3;
      case 3: {
        if (tag == 26) {
         parse_World:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InitialVisibility;
        break;
      }

      // optional bool InitialVisibility = 4;
      case 4: {
        if (tag == 32) {
         parse_InitialVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialvisibility_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.Annotation)
  return false;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.Annotation)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.Annotation.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.Annotation.Text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional .atom.proto.Matrix World = 3;
  if (this->has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->world_, output);
  }

  // optional bool InitialVisibility = 4;
  if (this->initialvisibility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->initialvisibility(), output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.Annotation)
}

::google::protobuf::uint8* Annotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.Annotation)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.Annotation.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.Annotation.Text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional .atom.proto.Matrix World = 3;
  if (this->has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->world_, target);
  }

  // optional bool InitialVisibility = 4;
  if (this->initialvisibility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->initialvisibility(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.Annotation)
  return target;
}

int Annotation::ByteSize() const {
  int total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string Text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional .atom.proto.Matrix World = 3;
  if (this->has_world()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->world_);
  }

  // optional bool InitialVisibility = 4;
  if (this->initialvisibility() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Annotation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Annotation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_world()) {
    mutable_world()->::atom::proto::Matrix::MergeFrom(from.world());
  }
  if (from.initialvisibility() != 0) {
    set_initialvisibility(from.initialvisibility());
  }
}

void Annotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {

  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotation::InternalSwap(Annotation* other) {
  name_.Swap(&other->name_);
  text_.Swap(&other->text_);
  std::swap(world_, other->world_);
  std::swap(initialvisibility_, other->initialvisibility_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Annotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotation_descriptor_;
  metadata.reflection = Annotation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotation

// optional string Name = 1;
void Annotation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Annotation::name() const {
  // @@protoc_insertion_point(field_get:atom.proto.Annotation.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.Annotation.Name)
}
 void Annotation::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.Annotation.Name)
}
 void Annotation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.Annotation.Name)
}
 ::std::string* Annotation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.Annotation.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Annotation::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Annotation.Name)
}

// optional string Text = 2;
void Annotation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Annotation::text() const {
  // @@protoc_insertion_point(field_get:atom.proto.Annotation.Text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.Annotation.Text)
}
 void Annotation::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.Annotation.Text)
}
 void Annotation::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.Annotation.Text)
}
 ::std::string* Annotation::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.Annotation.Text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Annotation::release_text() {
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Annotation.Text)
}

// optional .atom.proto.Matrix World = 3;
bool Annotation::has_world() const {
  return !_is_default_instance_ && world_ != NULL;
}
void Annotation::clear_world() {
  if (GetArenaNoVirtual() == NULL && world_ != NULL) delete world_;
  world_ = NULL;
}
const ::atom::proto::Matrix& Annotation::world() const {
  // @@protoc_insertion_point(field_get:atom.proto.Annotation.World)
  return world_ != NULL ? *world_ : *default_instance_->world_;
}
::atom::proto::Matrix* Annotation::mutable_world() {
  
  if (world_ == NULL) {
    world_ = new ::atom::proto::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.Annotation.World)
  return world_;
}
::atom::proto::Matrix* Annotation::release_world() {
  
  ::atom::proto::Matrix* temp = world_;
  world_ = NULL;
  return temp;
}
void Annotation::set_allocated_world(::atom::proto::Matrix* world) {
  delete world_;
  world_ = world;
  if (world) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.Annotation.World)
}

// optional bool InitialVisibility = 4;
void Annotation::clear_initialvisibility() {
  initialvisibility_ = false;
}
 bool Annotation::initialvisibility() const {
  // @@protoc_insertion_point(field_get:atom.proto.Annotation.InitialVisibility)
  return initialvisibility_;
}
 void Annotation::set_initialvisibility(bool value) {
  
  initialvisibility_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Annotation.InitialVisibility)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
