// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatrixChanged.proto

#ifndef PROTOBUF_MatrixChanged_2eproto__INCLUDED
#define PROTOBUF_MatrixChanged_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MatrixChanged_2eproto();
void protobuf_AssignDesc_MatrixChanged_2eproto();
void protobuf_ShutdownFile_MatrixChanged_2eproto();

class MatrixChanged;

// ===================================================================

class MatrixChanged : public ::google::protobuf::Message {
 public:
  MatrixChanged();
  virtual ~MatrixChanged();

  MatrixChanged(const MatrixChanged& from);

  inline MatrixChanged& operator=(const MatrixChanged& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixChanged& default_instance();

  void Swap(MatrixChanged* other);

  // implements Message ----------------------------------------------

  inline MatrixChanged* New() const { return New(NULL); }

  MatrixChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatrixChanged& from);
  void MergeFrom(const MatrixChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatrixChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ObjectName = 1;
  void clear_objectname();
  static const int kObjectNameFieldNumber = 1;
  const ::std::string& objectname() const;
  void set_objectname(const ::std::string& value);
  void set_objectname(const char* value);
  void set_objectname(const char* value, size_t size);
  ::std::string* mutable_objectname();
  ::std::string* release_objectname();
  void set_allocated_objectname(::std::string* objectname);

  // optional .atom.proto.Matrix Matrix = 2;
  bool has_matrix() const;
  void clear_matrix();
  static const int kMatrixFieldNumber = 2;
  const ::atom::proto::Matrix& matrix() const;
  ::atom::proto::Matrix* mutable_matrix();
  ::atom::proto::Matrix* release_matrix();
  void set_allocated_matrix(::atom::proto::Matrix* matrix);

  // @@protoc_insertion_point(class_scope:atom.proto.MatrixChanged)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr objectname_;
  ::atom::proto::Matrix* matrix_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MatrixChanged_2eproto();
  friend void protobuf_AssignDesc_MatrixChanged_2eproto();
  friend void protobuf_ShutdownFile_MatrixChanged_2eproto();

  void InitAsDefaultInstance();
  static MatrixChanged* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MatrixChanged

// optional string ObjectName = 1;
inline void MatrixChanged::clear_objectname() {
  objectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatrixChanged::objectname() const {
  // @@protoc_insertion_point(field_get:atom.proto.MatrixChanged.ObjectName)
  return objectname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatrixChanged::set_objectname(const ::std::string& value) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.MatrixChanged.ObjectName)
}
inline void MatrixChanged::set_objectname(const char* value) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.MatrixChanged.ObjectName)
}
inline void MatrixChanged::set_objectname(const char* value, size_t size) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.MatrixChanged.ObjectName)
}
inline ::std::string* MatrixChanged::mutable_objectname() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.MatrixChanged.ObjectName)
  return objectname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatrixChanged::release_objectname() {
  
  return objectname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatrixChanged::set_allocated_objectname(::std::string* objectname) {
  if (objectname != NULL) {
    
  } else {
    
  }
  objectname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectname);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.MatrixChanged.ObjectName)
}

// optional .atom.proto.Matrix Matrix = 2;
inline bool MatrixChanged::has_matrix() const {
  return !_is_default_instance_ && matrix_ != NULL;
}
inline void MatrixChanged::clear_matrix() {
  if (GetArenaNoVirtual() == NULL && matrix_ != NULL) delete matrix_;
  matrix_ = NULL;
}
inline const ::atom::proto::Matrix& MatrixChanged::matrix() const {
  // @@protoc_insertion_point(field_get:atom.proto.MatrixChanged.Matrix)
  return matrix_ != NULL ? *matrix_ : *default_instance_->matrix_;
}
inline ::atom::proto::Matrix* MatrixChanged::mutable_matrix() {
  
  if (matrix_ == NULL) {
    matrix_ = new ::atom::proto::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.MatrixChanged.Matrix)
  return matrix_;
}
inline ::atom::proto::Matrix* MatrixChanged::release_matrix() {
  
  ::atom::proto::Matrix* temp = matrix_;
  matrix_ = NULL;
  return temp;
}
inline void MatrixChanged::set_allocated_matrix(::atom::proto::Matrix* matrix) {
  delete matrix_;
  matrix_ = matrix;
  if (matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.MatrixChanged.Matrix)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MatrixChanged_2eproto__INCLUDED
