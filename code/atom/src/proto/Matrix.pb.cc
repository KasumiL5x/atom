// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Matrix.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Matrix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Matrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Matrix_2eproto() {
  protobuf_AddDesc_Matrix_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Matrix.proto");
  GOOGLE_CHECK(file != NULL);
  Matrix_descriptor_ = file->message_type(0);
  static const int Matrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, m_),
  };
  Matrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Matrix_descriptor_,
      Matrix::default_instance_,
      Matrix_offsets_,
      -1,
      -1,
      -1,
      sizeof(Matrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Matrix_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Matrix_descriptor_, &Matrix::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Matrix_2eproto() {
  delete Matrix::default_instance_;
  delete Matrix_reflection_;
}

void protobuf_AddDesc_Matrix_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Matrix.proto\022\natom.proto\"3\n\006Matrix\022\014\n\004"
    "Rows\030\001 \001(\r\022\014\n\004Cols\030\002 \001(\r\022\r\n\001M\030\003 \003(\002B\002\020\001b"
    "\006proto3", 87);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Matrix.proto", &protobuf_RegisterTypes);
  Matrix::default_instance_ = new Matrix();
  Matrix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Matrix_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Matrix_2eproto {
  StaticDescriptorInitializer_Matrix_2eproto() {
    protobuf_AddDesc_Matrix_2eproto();
  }
} static_descriptor_initializer_Matrix_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix::kRowsFieldNumber;
const int Matrix::kColsFieldNumber;
const int Matrix::kMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix::Matrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.Matrix)
}

void Matrix::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Matrix::Matrix(const Matrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.Matrix)
}

void Matrix::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:atom.proto.Matrix)
  SharedDtor();
}

void Matrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix_descriptor_;
}

const Matrix& Matrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Matrix_2eproto();
  return *default_instance_;
}

Matrix* Matrix::default_instance_ = NULL;

Matrix* Matrix::New(::google::protobuf::Arena* arena) const {
  Matrix* n = new Matrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matrix::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Matrix*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  m_.Clear();
}

bool Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.Matrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Cols;
        break;
      }

      // optional uint32 Cols = 2;
      case 2: {
        if (tag == 16) {
         parse_Cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_M;
        break;
      }

      // repeated float M = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_m())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_m())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.Matrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.Matrix)
  return false;
#undef DO_
}

void Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.Matrix)
  // optional uint32 Rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // optional uint32 Cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated float M = 3 [packed = true];
  if (this->m_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_m_cached_byte_size_);
  }
  for (int i = 0; i < this->m_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->m(i), output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.Matrix)
}

::google::protobuf::uint8* Matrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.Matrix)
  // optional uint32 Rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // optional uint32 Cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  // repeated float M = 3 [packed = true];
  if (this->m_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _m_cached_byte_size_, target);
  }
  for (int i = 0; i < this->m_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->m(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.Matrix)
  return target;
}

int Matrix::ByteSize() const {
  int total_size = 0;

  // optional uint32 Rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rows());
  }

  // optional uint32 Cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cols());
  }

  // repeated float M = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->m_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _m_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Matrix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Matrix>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  m_.MergeFrom(from.m_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void Matrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {

  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix::InternalSwap(Matrix* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  m_.UnsafeArenaSwap(&other->m_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix_descriptor_;
  metadata.reflection = Matrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix

// optional uint32 Rows = 1;
void Matrix::clear_rows() {
  rows_ = 0u;
}
 ::google::protobuf::uint32 Matrix::rows() const {
  // @@protoc_insertion_point(field_get:atom.proto.Matrix.Rows)
  return rows_;
}
 void Matrix::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Matrix.Rows)
}

// optional uint32 Cols = 2;
void Matrix::clear_cols() {
  cols_ = 0u;
}
 ::google::protobuf::uint32 Matrix::cols() const {
  // @@protoc_insertion_point(field_get:atom.proto.Matrix.Cols)
  return cols_;
}
 void Matrix::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.Matrix.Cols)
}

// repeated float M = 3 [packed = true];
int Matrix::m_size() const {
  return m_.size();
}
void Matrix::clear_m() {
  m_.Clear();
}
 float Matrix::m(int index) const {
  // @@protoc_insertion_point(field_get:atom.proto.Matrix.M)
  return m_.Get(index);
}
 void Matrix::set_m(int index, float value) {
  m_.Set(index, value);
  // @@protoc_insertion_point(field_set:atom.proto.Matrix.M)
}
 void Matrix::add_m(float value) {
  m_.Add(value);
  // @@protoc_insertion_point(field_add:atom.proto.Matrix.M)
}
 const ::google::protobuf::RepeatedField< float >&
Matrix::m() const {
  // @@protoc_insertion_point(field_list:atom.proto.Matrix.M)
  return m_;
}
 ::google::protobuf::RepeatedField< float >*
Matrix::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:atom.proto.Matrix.M)
  return &m_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
