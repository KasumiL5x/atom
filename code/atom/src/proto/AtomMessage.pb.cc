// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AtomMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AtomMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* AtomMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtomMessage_reflection_ = NULL;
struct AtomMessageOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr debugmessage_;
  const ::atom::proto::Scene* scene_;
  const ::atom::proto::meshes::Mesh* mesh_;
  const ::atom::proto::meshes::MeshPointsChanged* meshpointschanged_;
  const ::atom::proto::meshes::MeshGeometryChanged* meshgeometrychanged_;
  const ::atom::proto::meshes::MeshMaterialChanged* meshmaterialchanged_;
  const ::atom::proto::Camera* camera_;
  const ::atom::proto::lights::Light* light_;
  const ::atom::proto::lights::LightChanged* lightchanged_;
  const ::atom::proto::materials::Material* material_;
  const ::atom::proto::materials::MaterialChanged* materialchanged_;
  const ::atom::proto::materials::Texture* texture_;
  const ::atom::proto::materials::TextureChanged* texturechanged_;
  const ::atom::proto::NameChanged* namechanged_;
  const ::atom::proto::Transform* transform_;
  const ::atom::proto::Annotation* annotation_;
  const ::atom::proto::Curve* curve_;
  const ::atom::proto::MatrixChanged* matrixchanged_;
  const ::atom::proto::VisibilityChanged* visibilitychanged_;
}* AtomMessage_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_AtomMessage_2eproto() {
  protobuf_AddDesc_AtomMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AtomMessage.proto");
  GOOGLE_CHECK(file != NULL);
  AtomMessage_descriptor_ = file->message_type(0);
  static const int AtomMessage_offsets_[20] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, debugmessage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, scene_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, mesh_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, meshpointschanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, meshgeometrychanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, meshmaterialchanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, camera_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, light_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, lightchanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, material_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, materialchanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, texture_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, texturechanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, namechanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, transform_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, annotation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, curve_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, matrixchanged_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AtomMessage_default_oneof_instance_, visibilitychanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtomMessage, Msg_),
  };
  AtomMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AtomMessage_descriptor_,
      AtomMessage::default_instance_,
      AtomMessage_offsets_,
      -1,
      -1,
      -1,
      AtomMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtomMessage, _oneof_case_[0]),
      sizeof(AtomMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtomMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtomMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AtomMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AtomMessage_descriptor_, &AtomMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AtomMessage_2eproto() {
  delete AtomMessage::default_instance_;
  delete AtomMessage_default_oneof_instance_;
  delete AtomMessage_reflection_;
}

void protobuf_AddDesc_AtomMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::protobuf_AddDesc_Scene_2eproto();
  ::atom::proto::meshes::protobuf_AddDesc_meshes_2fMesh_2eproto();
  ::atom::proto::meshes::protobuf_AddDesc_meshes_2fMeshPointsChanged_2eproto();
  ::atom::proto::meshes::protobuf_AddDesc_meshes_2fMeshGeometryChanged_2eproto();
  ::atom::proto::meshes::protobuf_AddDesc_meshes_2fMeshMaterialChanged_2eproto();
  ::atom::proto::protobuf_AddDesc_Camera_2eproto();
  ::atom::proto::lights::protobuf_AddDesc_lights_2fLight_2eproto();
  ::atom::proto::lights::protobuf_AddDesc_lights_2fLightChanged_2eproto();
  ::atom::proto::materials::protobuf_AddDesc_materials_2fMaterial_2eproto();
  ::atom::proto::materials::protobuf_AddDesc_materials_2fMaterialChanged_2eproto();
  ::atom::proto::materials::protobuf_AddDesc_materials_2fTexture_2eproto();
  ::atom::proto::materials::protobuf_AddDesc_materials_2fTextureChanged_2eproto();
  ::atom::proto::protobuf_AddDesc_NameChanged_2eproto();
  ::atom::proto::protobuf_AddDesc_Transform_2eproto();
  ::atom::proto::protobuf_AddDesc_Annotation_2eproto();
  ::atom::proto::protobuf_AddDesc_Curve_2eproto();
  ::atom::proto::protobuf_AddDesc_MatrixChanged_2eproto();
  ::atom::proto::protobuf_AddDesc_VisibilityChanged_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021AtomMessage.proto\022\natom.proto\032\013Scene.p"
    "roto\032\021meshes/Mesh.proto\032\036meshes/MeshPoin"
    "tsChanged.proto\032 meshes/MeshGeometryChan"
    "ged.proto\032 meshes/MeshMaterialChanged.pr"
    "oto\032\014Camera.proto\032\022lights/Light.proto\032\031l"
    "ights/LightChanged.proto\032\030materials/Mate"
    "rial.proto\032\037materials/MaterialChanged.pr"
    "oto\032\027materials/Texture.proto\032\036materials/"
    "TextureChanged.proto\032\021NameChanged.proto\032"
    "\017Transform.proto\032\020Annotation.proto\032\013Curv"
    "e.proto\032\023MatrixChanged.proto\032\027Visibility"
    "Changed.proto\"\332\007\n\013AtomMessage\022\026\n\014DebugMe"
    "ssage\030\001 \001(\tH\000\022\"\n\005Scene\030\002 \001(\0132\021.atom.prot"
    "o.SceneH\000\022\'\n\004Mesh\030\003 \001(\0132\027.atom.proto.mes"
    "hes.MeshH\000\022A\n\021MeshPointsChanged\030\004 \001(\0132$."
    "atom.proto.meshes.MeshPointsChangedH\000\022E\n"
    "\023MeshGeometryChanged\030\005 \001(\0132&.atom.proto."
    "meshes.MeshGeometryChangedH\000\022E\n\023MeshMate"
    "rialChanged\030\006 \001(\0132&.atom.proto.meshes.Me"
    "shMaterialChangedH\000\022$\n\006Camera\030\007 \001(\0132\022.at"
    "om.proto.CameraH\000\022)\n\005Light\030\010 \001(\0132\030.atom."
    "proto.lights.LightH\000\0227\n\014LightChanged\030\t \001"
    "(\0132\037.atom.proto.lights.LightChangedH\000\0222\n"
    "\010Material\030\n \001(\0132\036.atom.proto.materials.M"
    "aterialH\000\022@\n\017MaterialChanged\030\013 \001(\0132%.ato"
    "m.proto.materials.MaterialChangedH\000\0220\n\007T"
    "exture\030\014 \001(\0132\035.atom.proto.materials.Text"
    "ureH\000\022>\n\016TextureChanged\030\r \001(\0132$.atom.pro"
    "to.materials.TextureChangedH\000\022.\n\013NameCha"
    "nged\030\016 \001(\0132\027.atom.proto.NameChangedH\000\022*\n"
    "\tTransform\030\017 \001(\0132\025.atom.proto.TransformH"
    "\000\022,\n\nAnnotation\030\020 \001(\0132\026.atom.proto.Annot"
    "ationH\000\022\"\n\005Curve\030\021 \001(\0132\021.atom.proto.Curv"
    "eH\000\0222\n\rMatrixChanged\030\022 \001(\0132\031.atom.proto."
    "MatrixChangedH\000\022:\n\021VisibilityChanged\030\023 \001"
    "(\0132\035.atom.proto.VisibilityChangedH\000B\005\n\003M"
    "sgb\006proto3", 1450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AtomMessage.proto", &protobuf_RegisterTypes);
  AtomMessage::default_instance_ = new AtomMessage();
  AtomMessage_default_oneof_instance_ = new AtomMessageOneofInstance();
  AtomMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AtomMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AtomMessage_2eproto {
  StaticDescriptorInitializer_AtomMessage_2eproto() {
    protobuf_AddDesc_AtomMessage_2eproto();
  }
} static_descriptor_initializer_AtomMessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AtomMessage::kDebugMessageFieldNumber;
const int AtomMessage::kSceneFieldNumber;
const int AtomMessage::kMeshFieldNumber;
const int AtomMessage::kMeshPointsChangedFieldNumber;
const int AtomMessage::kMeshGeometryChangedFieldNumber;
const int AtomMessage::kMeshMaterialChangedFieldNumber;
const int AtomMessage::kCameraFieldNumber;
const int AtomMessage::kLightFieldNumber;
const int AtomMessage::kLightChangedFieldNumber;
const int AtomMessage::kMaterialFieldNumber;
const int AtomMessage::kMaterialChangedFieldNumber;
const int AtomMessage::kTextureFieldNumber;
const int AtomMessage::kTextureChangedFieldNumber;
const int AtomMessage::kNameChangedFieldNumber;
const int AtomMessage::kTransformFieldNumber;
const int AtomMessage::kAnnotationFieldNumber;
const int AtomMessage::kCurveFieldNumber;
const int AtomMessage::kMatrixChangedFieldNumber;
const int AtomMessage::kVisibilityChangedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AtomMessage::AtomMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.AtomMessage)
}

void AtomMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  AtomMessage_default_oneof_instance_->debugmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AtomMessage_default_oneof_instance_->scene_ = const_cast< ::atom::proto::Scene*>(&::atom::proto::Scene::default_instance());
  AtomMessage_default_oneof_instance_->mesh_ = const_cast< ::atom::proto::meshes::Mesh*>(&::atom::proto::meshes::Mesh::default_instance());
  AtomMessage_default_oneof_instance_->meshpointschanged_ = const_cast< ::atom::proto::meshes::MeshPointsChanged*>(&::atom::proto::meshes::MeshPointsChanged::default_instance());
  AtomMessage_default_oneof_instance_->meshgeometrychanged_ = const_cast< ::atom::proto::meshes::MeshGeometryChanged*>(&::atom::proto::meshes::MeshGeometryChanged::default_instance());
  AtomMessage_default_oneof_instance_->meshmaterialchanged_ = const_cast< ::atom::proto::meshes::MeshMaterialChanged*>(&::atom::proto::meshes::MeshMaterialChanged::default_instance());
  AtomMessage_default_oneof_instance_->camera_ = const_cast< ::atom::proto::Camera*>(&::atom::proto::Camera::default_instance());
  AtomMessage_default_oneof_instance_->light_ = const_cast< ::atom::proto::lights::Light*>(&::atom::proto::lights::Light::default_instance());
  AtomMessage_default_oneof_instance_->lightchanged_ = const_cast< ::atom::proto::lights::LightChanged*>(&::atom::proto::lights::LightChanged::default_instance());
  AtomMessage_default_oneof_instance_->material_ = const_cast< ::atom::proto::materials::Material*>(&::atom::proto::materials::Material::default_instance());
  AtomMessage_default_oneof_instance_->materialchanged_ = const_cast< ::atom::proto::materials::MaterialChanged*>(&::atom::proto::materials::MaterialChanged::default_instance());
  AtomMessage_default_oneof_instance_->texture_ = const_cast< ::atom::proto::materials::Texture*>(&::atom::proto::materials::Texture::default_instance());
  AtomMessage_default_oneof_instance_->texturechanged_ = const_cast< ::atom::proto::materials::TextureChanged*>(&::atom::proto::materials::TextureChanged::default_instance());
  AtomMessage_default_oneof_instance_->namechanged_ = const_cast< ::atom::proto::NameChanged*>(&::atom::proto::NameChanged::default_instance());
  AtomMessage_default_oneof_instance_->transform_ = const_cast< ::atom::proto::Transform*>(&::atom::proto::Transform::default_instance());
  AtomMessage_default_oneof_instance_->annotation_ = const_cast< ::atom::proto::Annotation*>(&::atom::proto::Annotation::default_instance());
  AtomMessage_default_oneof_instance_->curve_ = const_cast< ::atom::proto::Curve*>(&::atom::proto::Curve::default_instance());
  AtomMessage_default_oneof_instance_->matrixchanged_ = const_cast< ::atom::proto::MatrixChanged*>(&::atom::proto::MatrixChanged::default_instance());
  AtomMessage_default_oneof_instance_->visibilitychanged_ = const_cast< ::atom::proto::VisibilityChanged*>(&::atom::proto::VisibilityChanged::default_instance());
}

AtomMessage::AtomMessage(const AtomMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.AtomMessage)
}

void AtomMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_Msg();
}

AtomMessage::~AtomMessage() {
  // @@protoc_insertion_point(destructor:atom.proto.AtomMessage)
  SharedDtor();
}

void AtomMessage::SharedDtor() {
  if (has_Msg()) {
    clear_Msg();
  }
  if (this != default_instance_) {
  }
}

void AtomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtomMessage_descriptor_;
}

const AtomMessage& AtomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AtomMessage_2eproto();
  return *default_instance_;
}

AtomMessage* AtomMessage::default_instance_ = NULL;

AtomMessage* AtomMessage::New(::google::protobuf::Arena* arena) const {
  AtomMessage* n = new AtomMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AtomMessage::clear_Msg() {
  switch(Msg_case()) {
    case kDebugMessage: {
      Msg_.debugmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kScene: {
      delete Msg_.scene_;
      break;
    }
    case kMesh: {
      delete Msg_.mesh_;
      break;
    }
    case kMeshPointsChanged: {
      delete Msg_.meshpointschanged_;
      break;
    }
    case kMeshGeometryChanged: {
      delete Msg_.meshgeometrychanged_;
      break;
    }
    case kMeshMaterialChanged: {
      delete Msg_.meshmaterialchanged_;
      break;
    }
    case kCamera: {
      delete Msg_.camera_;
      break;
    }
    case kLight: {
      delete Msg_.light_;
      break;
    }
    case kLightChanged: {
      delete Msg_.lightchanged_;
      break;
    }
    case kMaterial: {
      delete Msg_.material_;
      break;
    }
    case kMaterialChanged: {
      delete Msg_.materialchanged_;
      break;
    }
    case kTexture: {
      delete Msg_.texture_;
      break;
    }
    case kTextureChanged: {
      delete Msg_.texturechanged_;
      break;
    }
    case kNameChanged: {
      delete Msg_.namechanged_;
      break;
    }
    case kTransform: {
      delete Msg_.transform_;
      break;
    }
    case kAnnotation: {
      delete Msg_.annotation_;
      break;
    }
    case kCurve: {
      delete Msg_.curve_;
      break;
    }
    case kMatrixChanged: {
      delete Msg_.matrixchanged_;
      break;
    }
    case kVisibilityChanged: {
      delete Msg_.visibilitychanged_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void AtomMessage::Clear() {
  clear_Msg();
}

bool AtomMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.AtomMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DebugMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debugmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debugmessage().data(), this->debugmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.AtomMessage.DebugMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Scene;
        break;
      }

      // optional .atom.proto.Scene Scene = 2;
      case 2: {
        if (tag == 18) {
         parse_Scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Mesh;
        break;
      }

      // optional .atom.proto.meshes.Mesh Mesh = 3;
      case 3: {
        if (tag == 26) {
         parse_Mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MeshPointsChanged;
        break;
      }

      // optional .atom.proto.meshes.MeshPointsChanged MeshPointsChanged = 4;
      case 4: {
        if (tag == 34) {
         parse_MeshPointsChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meshpointschanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MeshGeometryChanged;
        break;
      }

      // optional .atom.proto.meshes.MeshGeometryChanged MeshGeometryChanged = 5;
      case 5: {
        if (tag == 42) {
         parse_MeshGeometryChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meshgeometrychanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MeshMaterialChanged;
        break;
      }

      // optional .atom.proto.meshes.MeshMaterialChanged MeshMaterialChanged = 6;
      case 6: {
        if (tag == 50) {
         parse_MeshMaterialChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meshmaterialchanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Camera;
        break;
      }

      // optional .atom.proto.Camera Camera = 7;
      case 7: {
        if (tag == 58) {
         parse_Camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Light;
        break;
      }

      // optional .atom.proto.lights.Light Light = 8;
      case 8: {
        if (tag == 66) {
         parse_Light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_LightChanged;
        break;
      }

      // optional .atom.proto.lights.LightChanged LightChanged = 9;
      case 9: {
        if (tag == 74) {
         parse_LightChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightchanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Material;
        break;
      }

      // optional .atom.proto.materials.Material Material = 10;
      case 10: {
        if (tag == 82) {
         parse_Material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_MaterialChanged;
        break;
      }

      // optional .atom.proto.materials.MaterialChanged MaterialChanged = 11;
      case 11: {
        if (tag == 90) {
         parse_MaterialChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_materialchanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Texture;
        break;
      }

      // optional .atom.proto.materials.Texture Texture = 12;
      case 12: {
        if (tag == 98) {
         parse_Texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_TextureChanged;
        break;
      }

      // optional .atom.proto.materials.TextureChanged TextureChanged = 13;
      case 13: {
        if (tag == 106) {
         parse_TextureChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texturechanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_NameChanged;
        break;
      }

      // optional .atom.proto.NameChanged NameChanged = 14;
      case 14: {
        if (tag == 114) {
         parse_NameChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namechanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Transform;
        break;
      }

      // optional .atom.proto.Transform Transform = 15;
      case 15: {
        if (tag == 122) {
         parse_Transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Annotation;
        break;
      }

      // optional .atom.proto.Annotation Annotation = 16;
      case 16: {
        if (tag == 130) {
         parse_Annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_Curve;
        break;
      }

      // optional .atom.proto.Curve Curve = 17;
      case 17: {
        if (tag == 138) {
         parse_Curve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_MatrixChanged;
        break;
      }

      // optional .atom.proto.MatrixChanged MatrixChanged = 18;
      case 18: {
        if (tag == 146) {
         parse_MatrixChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrixchanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_VisibilityChanged;
        break;
      }

      // optional .atom.proto.VisibilityChanged VisibilityChanged = 19;
      case 19: {
        if (tag == 154) {
         parse_VisibilityChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visibilitychanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.AtomMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.AtomMessage)
  return false;
#undef DO_
}

void AtomMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.AtomMessage)
  // optional string DebugMessage = 1;
  if (has_debugmessage()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debugmessage().data(), this->debugmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.AtomMessage.DebugMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->debugmessage(), output);
  }

  // optional .atom.proto.Scene Scene = 2;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Msg_.scene_, output);
  }

  // optional .atom.proto.meshes.Mesh Mesh = 3;
  if (has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Msg_.mesh_, output);
  }

  // optional .atom.proto.meshes.MeshPointsChanged MeshPointsChanged = 4;
  if (has_meshpointschanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *Msg_.meshpointschanged_, output);
  }

  // optional .atom.proto.meshes.MeshGeometryChanged MeshGeometryChanged = 5;
  if (has_meshgeometrychanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *Msg_.meshgeometrychanged_, output);
  }

  // optional .atom.proto.meshes.MeshMaterialChanged MeshMaterialChanged = 6;
  if (has_meshmaterialchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *Msg_.meshmaterialchanged_, output);
  }

  // optional .atom.proto.Camera Camera = 7;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *Msg_.camera_, output);
  }

  // optional .atom.proto.lights.Light Light = 8;
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *Msg_.light_, output);
  }

  // optional .atom.proto.lights.LightChanged LightChanged = 9;
  if (has_lightchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *Msg_.lightchanged_, output);
  }

  // optional .atom.proto.materials.Material Material = 10;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *Msg_.material_, output);
  }

  // optional .atom.proto.materials.MaterialChanged MaterialChanged = 11;
  if (has_materialchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *Msg_.materialchanged_, output);
  }

  // optional .atom.proto.materials.Texture Texture = 12;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *Msg_.texture_, output);
  }

  // optional .atom.proto.materials.TextureChanged TextureChanged = 13;
  if (has_texturechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *Msg_.texturechanged_, output);
  }

  // optional .atom.proto.NameChanged NameChanged = 14;
  if (has_namechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *Msg_.namechanged_, output);
  }

  // optional .atom.proto.Transform Transform = 15;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *Msg_.transform_, output);
  }

  // optional .atom.proto.Annotation Annotation = 16;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *Msg_.annotation_, output);
  }

  // optional .atom.proto.Curve Curve = 17;
  if (has_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *Msg_.curve_, output);
  }

  // optional .atom.proto.MatrixChanged MatrixChanged = 18;
  if (has_matrixchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *Msg_.matrixchanged_, output);
  }

  // optional .atom.proto.VisibilityChanged VisibilityChanged = 19;
  if (has_visibilitychanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *Msg_.visibilitychanged_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.AtomMessage)
}

::google::protobuf::uint8* AtomMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.AtomMessage)
  // optional string DebugMessage = 1;
  if (has_debugmessage()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debugmessage().data(), this->debugmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.AtomMessage.DebugMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debugmessage(), target);
  }

  // optional .atom.proto.Scene Scene = 2;
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *Msg_.scene_, target);
  }

  // optional .atom.proto.meshes.Mesh Mesh = 3;
  if (has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *Msg_.mesh_, target);
  }

  // optional .atom.proto.meshes.MeshPointsChanged MeshPointsChanged = 4;
  if (has_meshpointschanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *Msg_.meshpointschanged_, target);
  }

  // optional .atom.proto.meshes.MeshGeometryChanged MeshGeometryChanged = 5;
  if (has_meshgeometrychanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *Msg_.meshgeometrychanged_, target);
  }

  // optional .atom.proto.meshes.MeshMaterialChanged MeshMaterialChanged = 6;
  if (has_meshmaterialchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *Msg_.meshmaterialchanged_, target);
  }

  // optional .atom.proto.Camera Camera = 7;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *Msg_.camera_, target);
  }

  // optional .atom.proto.lights.Light Light = 8;
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *Msg_.light_, target);
  }

  // optional .atom.proto.lights.LightChanged LightChanged = 9;
  if (has_lightchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *Msg_.lightchanged_, target);
  }

  // optional .atom.proto.materials.Material Material = 10;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *Msg_.material_, target);
  }

  // optional .atom.proto.materials.MaterialChanged MaterialChanged = 11;
  if (has_materialchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *Msg_.materialchanged_, target);
  }

  // optional .atom.proto.materials.Texture Texture = 12;
  if (has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *Msg_.texture_, target);
  }

  // optional .atom.proto.materials.TextureChanged TextureChanged = 13;
  if (has_texturechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *Msg_.texturechanged_, target);
  }

  // optional .atom.proto.NameChanged NameChanged = 14;
  if (has_namechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *Msg_.namechanged_, target);
  }

  // optional .atom.proto.Transform Transform = 15;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *Msg_.transform_, target);
  }

  // optional .atom.proto.Annotation Annotation = 16;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *Msg_.annotation_, target);
  }

  // optional .atom.proto.Curve Curve = 17;
  if (has_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *Msg_.curve_, target);
  }

  // optional .atom.proto.MatrixChanged MatrixChanged = 18;
  if (has_matrixchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *Msg_.matrixchanged_, target);
  }

  // optional .atom.proto.VisibilityChanged VisibilityChanged = 19;
  if (has_visibilitychanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *Msg_.visibilitychanged_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.AtomMessage)
  return target;
}

int AtomMessage::ByteSize() const {
  int total_size = 0;

  switch (Msg_case()) {
    // optional string DebugMessage = 1;
    case kDebugMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debugmessage());
      break;
    }
    // optional .atom.proto.Scene Scene = 2;
    case kScene: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.scene_);
      break;
    }
    // optional .atom.proto.meshes.Mesh Mesh = 3;
    case kMesh: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.mesh_);
      break;
    }
    // optional .atom.proto.meshes.MeshPointsChanged MeshPointsChanged = 4;
    case kMeshPointsChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.meshpointschanged_);
      break;
    }
    // optional .atom.proto.meshes.MeshGeometryChanged MeshGeometryChanged = 5;
    case kMeshGeometryChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.meshgeometrychanged_);
      break;
    }
    // optional .atom.proto.meshes.MeshMaterialChanged MeshMaterialChanged = 6;
    case kMeshMaterialChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.meshmaterialchanged_);
      break;
    }
    // optional .atom.proto.Camera Camera = 7;
    case kCamera: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.camera_);
      break;
    }
    // optional .atom.proto.lights.Light Light = 8;
    case kLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.light_);
      break;
    }
    // optional .atom.proto.lights.LightChanged LightChanged = 9;
    case kLightChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.lightchanged_);
      break;
    }
    // optional .atom.proto.materials.Material Material = 10;
    case kMaterial: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.material_);
      break;
    }
    // optional .atom.proto.materials.MaterialChanged MaterialChanged = 11;
    case kMaterialChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.materialchanged_);
      break;
    }
    // optional .atom.proto.materials.Texture Texture = 12;
    case kTexture: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.texture_);
      break;
    }
    // optional .atom.proto.materials.TextureChanged TextureChanged = 13;
    case kTextureChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.texturechanged_);
      break;
    }
    // optional .atom.proto.NameChanged NameChanged = 14;
    case kNameChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.namechanged_);
      break;
    }
    // optional .atom.proto.Transform Transform = 15;
    case kTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.transform_);
      break;
    }
    // optional .atom.proto.Annotation Annotation = 16;
    case kAnnotation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.annotation_);
      break;
    }
    // optional .atom.proto.Curve Curve = 17;
    case kCurve: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.curve_);
      break;
    }
    // optional .atom.proto.MatrixChanged MatrixChanged = 18;
    case kMatrixChanged: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.matrixchanged_);
      break;
    }
    // optional .atom.proto.VisibilityChanged VisibilityChanged = 19;
    case kVisibilityChanged: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Msg_.visibilitychanged_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtomMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AtomMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AtomMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtomMessage::MergeFrom(const AtomMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Msg_case()) {
    case kDebugMessage: {
      set_debugmessage(from.debugmessage());
      break;
    }
    case kScene: {
      mutable_scene()->::atom::proto::Scene::MergeFrom(from.scene());
      break;
    }
    case kMesh: {
      mutable_mesh()->::atom::proto::meshes::Mesh::MergeFrom(from.mesh());
      break;
    }
    case kMeshPointsChanged: {
      mutable_meshpointschanged()->::atom::proto::meshes::MeshPointsChanged::MergeFrom(from.meshpointschanged());
      break;
    }
    case kMeshGeometryChanged: {
      mutable_meshgeometrychanged()->::atom::proto::meshes::MeshGeometryChanged::MergeFrom(from.meshgeometrychanged());
      break;
    }
    case kMeshMaterialChanged: {
      mutable_meshmaterialchanged()->::atom::proto::meshes::MeshMaterialChanged::MergeFrom(from.meshmaterialchanged());
      break;
    }
    case kCamera: {
      mutable_camera()->::atom::proto::Camera::MergeFrom(from.camera());
      break;
    }
    case kLight: {
      mutable_light()->::atom::proto::lights::Light::MergeFrom(from.light());
      break;
    }
    case kLightChanged: {
      mutable_lightchanged()->::atom::proto::lights::LightChanged::MergeFrom(from.lightchanged());
      break;
    }
    case kMaterial: {
      mutable_material()->::atom::proto::materials::Material::MergeFrom(from.material());
      break;
    }
    case kMaterialChanged: {
      mutable_materialchanged()->::atom::proto::materials::MaterialChanged::MergeFrom(from.materialchanged());
      break;
    }
    case kTexture: {
      mutable_texture()->::atom::proto::materials::Texture::MergeFrom(from.texture());
      break;
    }
    case kTextureChanged: {
      mutable_texturechanged()->::atom::proto::materials::TextureChanged::MergeFrom(from.texturechanged());
      break;
    }
    case kNameChanged: {
      mutable_namechanged()->::atom::proto::NameChanged::MergeFrom(from.namechanged());
      break;
    }
    case kTransform: {
      mutable_transform()->::atom::proto::Transform::MergeFrom(from.transform());
      break;
    }
    case kAnnotation: {
      mutable_annotation()->::atom::proto::Annotation::MergeFrom(from.annotation());
      break;
    }
    case kCurve: {
      mutable_curve()->::atom::proto::Curve::MergeFrom(from.curve());
      break;
    }
    case kMatrixChanged: {
      mutable_matrixchanged()->::atom::proto::MatrixChanged::MergeFrom(from.matrixchanged());
      break;
    }
    case kVisibilityChanged: {
      mutable_visibilitychanged()->::atom::proto::VisibilityChanged::MergeFrom(from.visibilitychanged());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void AtomMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtomMessage::CopyFrom(const AtomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomMessage::IsInitialized() const {

  return true;
}

void AtomMessage::Swap(AtomMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AtomMessage::InternalSwap(AtomMessage* other) {
  std::swap(Msg_, other->Msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AtomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtomMessage_descriptor_;
  metadata.reflection = AtomMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AtomMessage

// optional string DebugMessage = 1;
bool AtomMessage::has_debugmessage() const {
  return Msg_case() == kDebugMessage;
}
void AtomMessage::set_has_debugmessage() {
  _oneof_case_[0] = kDebugMessage;
}
void AtomMessage::clear_debugmessage() {
  if (has_debugmessage()) {
    Msg_.debugmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Msg();
  }
}
 const ::std::string& AtomMessage::debugmessage() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.DebugMessage)
  if (has_debugmessage()) {
    return Msg_.debugmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void AtomMessage::set_debugmessage(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:atom.proto.AtomMessage.DebugMessage)
  if (!has_debugmessage()) {
    clear_Msg();
    set_has_debugmessage();
    Msg_.debugmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Msg_.debugmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.AtomMessage.DebugMessage)
}
 void AtomMessage::set_debugmessage(const char* value) {
  if (!has_debugmessage()) {
    clear_Msg();
    set_has_debugmessage();
    Msg_.debugmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Msg_.debugmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.AtomMessage.DebugMessage)
}
 void AtomMessage::set_debugmessage(const char* value, size_t size) {
  if (!has_debugmessage()) {
    clear_Msg();
    set_has_debugmessage();
    Msg_.debugmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Msg_.debugmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.AtomMessage.DebugMessage)
}
 ::std::string* AtomMessage::mutable_debugmessage() {
  if (!has_debugmessage()) {
    clear_Msg();
    set_has_debugmessage();
    Msg_.debugmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.DebugMessage)
  return Msg_.debugmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AtomMessage::release_debugmessage() {
  if (has_debugmessage()) {
    clear_has_Msg();
    return Msg_.debugmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void AtomMessage::set_allocated_debugmessage(::std::string* debugmessage) {
  if (!has_debugmessage()) {
    Msg_.debugmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Msg();
  if (debugmessage != NULL) {
    set_has_debugmessage();
    Msg_.debugmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        debugmessage);
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.DebugMessage)
}

// optional .atom.proto.Scene Scene = 2;
bool AtomMessage::has_scene() const {
  return Msg_case() == kScene;
}
void AtomMessage::set_has_scene() {
  _oneof_case_[0] = kScene;
}
void AtomMessage::clear_scene() {
  if (has_scene()) {
    delete Msg_.scene_;
    clear_has_Msg();
  }
}
 const ::atom::proto::Scene& AtomMessage::scene() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Scene)
  return has_scene()
      ? *Msg_.scene_
      : ::atom::proto::Scene::default_instance();
}
::atom::proto::Scene* AtomMessage::mutable_scene() {
  if (!has_scene()) {
    clear_Msg();
    set_has_scene();
    Msg_.scene_ = new ::atom::proto::Scene;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Scene)
  return Msg_.scene_;
}
::atom::proto::Scene* AtomMessage::release_scene() {
  if (has_scene()) {
    clear_has_Msg();
    ::atom::proto::Scene* temp = Msg_.scene_;
    Msg_.scene_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_scene(::atom::proto::Scene* scene) {
  clear_Msg();
  if (scene) {
    set_has_scene();
    Msg_.scene_ = scene;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Scene)
}

// optional .atom.proto.meshes.Mesh Mesh = 3;
bool AtomMessage::has_mesh() const {
  return Msg_case() == kMesh;
}
void AtomMessage::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
void AtomMessage::clear_mesh() {
  if (has_mesh()) {
    delete Msg_.mesh_;
    clear_has_Msg();
  }
}
 const ::atom::proto::meshes::Mesh& AtomMessage::mesh() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Mesh)
  return has_mesh()
      ? *Msg_.mesh_
      : ::atom::proto::meshes::Mesh::default_instance();
}
::atom::proto::meshes::Mesh* AtomMessage::mutable_mesh() {
  if (!has_mesh()) {
    clear_Msg();
    set_has_mesh();
    Msg_.mesh_ = new ::atom::proto::meshes::Mesh;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Mesh)
  return Msg_.mesh_;
}
::atom::proto::meshes::Mesh* AtomMessage::release_mesh() {
  if (has_mesh()) {
    clear_has_Msg();
    ::atom::proto::meshes::Mesh* temp = Msg_.mesh_;
    Msg_.mesh_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_mesh(::atom::proto::meshes::Mesh* mesh) {
  clear_Msg();
  if (mesh) {
    set_has_mesh();
    Msg_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Mesh)
}

// optional .atom.proto.meshes.MeshPointsChanged MeshPointsChanged = 4;
bool AtomMessage::has_meshpointschanged() const {
  return Msg_case() == kMeshPointsChanged;
}
void AtomMessage::set_has_meshpointschanged() {
  _oneof_case_[0] = kMeshPointsChanged;
}
void AtomMessage::clear_meshpointschanged() {
  if (has_meshpointschanged()) {
    delete Msg_.meshpointschanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::meshes::MeshPointsChanged& AtomMessage::meshpointschanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.MeshPointsChanged)
  return has_meshpointschanged()
      ? *Msg_.meshpointschanged_
      : ::atom::proto::meshes::MeshPointsChanged::default_instance();
}
::atom::proto::meshes::MeshPointsChanged* AtomMessage::mutable_meshpointschanged() {
  if (!has_meshpointschanged()) {
    clear_Msg();
    set_has_meshpointschanged();
    Msg_.meshpointschanged_ = new ::atom::proto::meshes::MeshPointsChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.MeshPointsChanged)
  return Msg_.meshpointschanged_;
}
::atom::proto::meshes::MeshPointsChanged* AtomMessage::release_meshpointschanged() {
  if (has_meshpointschanged()) {
    clear_has_Msg();
    ::atom::proto::meshes::MeshPointsChanged* temp = Msg_.meshpointschanged_;
    Msg_.meshpointschanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_meshpointschanged(::atom::proto::meshes::MeshPointsChanged* meshpointschanged) {
  clear_Msg();
  if (meshpointschanged) {
    set_has_meshpointschanged();
    Msg_.meshpointschanged_ = meshpointschanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.MeshPointsChanged)
}

// optional .atom.proto.meshes.MeshGeometryChanged MeshGeometryChanged = 5;
bool AtomMessage::has_meshgeometrychanged() const {
  return Msg_case() == kMeshGeometryChanged;
}
void AtomMessage::set_has_meshgeometrychanged() {
  _oneof_case_[0] = kMeshGeometryChanged;
}
void AtomMessage::clear_meshgeometrychanged() {
  if (has_meshgeometrychanged()) {
    delete Msg_.meshgeometrychanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::meshes::MeshGeometryChanged& AtomMessage::meshgeometrychanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.MeshGeometryChanged)
  return has_meshgeometrychanged()
      ? *Msg_.meshgeometrychanged_
      : ::atom::proto::meshes::MeshGeometryChanged::default_instance();
}
::atom::proto::meshes::MeshGeometryChanged* AtomMessage::mutable_meshgeometrychanged() {
  if (!has_meshgeometrychanged()) {
    clear_Msg();
    set_has_meshgeometrychanged();
    Msg_.meshgeometrychanged_ = new ::atom::proto::meshes::MeshGeometryChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.MeshGeometryChanged)
  return Msg_.meshgeometrychanged_;
}
::atom::proto::meshes::MeshGeometryChanged* AtomMessage::release_meshgeometrychanged() {
  if (has_meshgeometrychanged()) {
    clear_has_Msg();
    ::atom::proto::meshes::MeshGeometryChanged* temp = Msg_.meshgeometrychanged_;
    Msg_.meshgeometrychanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_meshgeometrychanged(::atom::proto::meshes::MeshGeometryChanged* meshgeometrychanged) {
  clear_Msg();
  if (meshgeometrychanged) {
    set_has_meshgeometrychanged();
    Msg_.meshgeometrychanged_ = meshgeometrychanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.MeshGeometryChanged)
}

// optional .atom.proto.meshes.MeshMaterialChanged MeshMaterialChanged = 6;
bool AtomMessage::has_meshmaterialchanged() const {
  return Msg_case() == kMeshMaterialChanged;
}
void AtomMessage::set_has_meshmaterialchanged() {
  _oneof_case_[0] = kMeshMaterialChanged;
}
void AtomMessage::clear_meshmaterialchanged() {
  if (has_meshmaterialchanged()) {
    delete Msg_.meshmaterialchanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::meshes::MeshMaterialChanged& AtomMessage::meshmaterialchanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.MeshMaterialChanged)
  return has_meshmaterialchanged()
      ? *Msg_.meshmaterialchanged_
      : ::atom::proto::meshes::MeshMaterialChanged::default_instance();
}
::atom::proto::meshes::MeshMaterialChanged* AtomMessage::mutable_meshmaterialchanged() {
  if (!has_meshmaterialchanged()) {
    clear_Msg();
    set_has_meshmaterialchanged();
    Msg_.meshmaterialchanged_ = new ::atom::proto::meshes::MeshMaterialChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.MeshMaterialChanged)
  return Msg_.meshmaterialchanged_;
}
::atom::proto::meshes::MeshMaterialChanged* AtomMessage::release_meshmaterialchanged() {
  if (has_meshmaterialchanged()) {
    clear_has_Msg();
    ::atom::proto::meshes::MeshMaterialChanged* temp = Msg_.meshmaterialchanged_;
    Msg_.meshmaterialchanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_meshmaterialchanged(::atom::proto::meshes::MeshMaterialChanged* meshmaterialchanged) {
  clear_Msg();
  if (meshmaterialchanged) {
    set_has_meshmaterialchanged();
    Msg_.meshmaterialchanged_ = meshmaterialchanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.MeshMaterialChanged)
}

// optional .atom.proto.Camera Camera = 7;
bool AtomMessage::has_camera() const {
  return Msg_case() == kCamera;
}
void AtomMessage::set_has_camera() {
  _oneof_case_[0] = kCamera;
}
void AtomMessage::clear_camera() {
  if (has_camera()) {
    delete Msg_.camera_;
    clear_has_Msg();
  }
}
 const ::atom::proto::Camera& AtomMessage::camera() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Camera)
  return has_camera()
      ? *Msg_.camera_
      : ::atom::proto::Camera::default_instance();
}
::atom::proto::Camera* AtomMessage::mutable_camera() {
  if (!has_camera()) {
    clear_Msg();
    set_has_camera();
    Msg_.camera_ = new ::atom::proto::Camera;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Camera)
  return Msg_.camera_;
}
::atom::proto::Camera* AtomMessage::release_camera() {
  if (has_camera()) {
    clear_has_Msg();
    ::atom::proto::Camera* temp = Msg_.camera_;
    Msg_.camera_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_camera(::atom::proto::Camera* camera) {
  clear_Msg();
  if (camera) {
    set_has_camera();
    Msg_.camera_ = camera;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Camera)
}

// optional .atom.proto.lights.Light Light = 8;
bool AtomMessage::has_light() const {
  return Msg_case() == kLight;
}
void AtomMessage::set_has_light() {
  _oneof_case_[0] = kLight;
}
void AtomMessage::clear_light() {
  if (has_light()) {
    delete Msg_.light_;
    clear_has_Msg();
  }
}
 const ::atom::proto::lights::Light& AtomMessage::light() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Light)
  return has_light()
      ? *Msg_.light_
      : ::atom::proto::lights::Light::default_instance();
}
::atom::proto::lights::Light* AtomMessage::mutable_light() {
  if (!has_light()) {
    clear_Msg();
    set_has_light();
    Msg_.light_ = new ::atom::proto::lights::Light;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Light)
  return Msg_.light_;
}
::atom::proto::lights::Light* AtomMessage::release_light() {
  if (has_light()) {
    clear_has_Msg();
    ::atom::proto::lights::Light* temp = Msg_.light_;
    Msg_.light_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_light(::atom::proto::lights::Light* light) {
  clear_Msg();
  if (light) {
    set_has_light();
    Msg_.light_ = light;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Light)
}

// optional .atom.proto.lights.LightChanged LightChanged = 9;
bool AtomMessage::has_lightchanged() const {
  return Msg_case() == kLightChanged;
}
void AtomMessage::set_has_lightchanged() {
  _oneof_case_[0] = kLightChanged;
}
void AtomMessage::clear_lightchanged() {
  if (has_lightchanged()) {
    delete Msg_.lightchanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::lights::LightChanged& AtomMessage::lightchanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.LightChanged)
  return has_lightchanged()
      ? *Msg_.lightchanged_
      : ::atom::proto::lights::LightChanged::default_instance();
}
::atom::proto::lights::LightChanged* AtomMessage::mutable_lightchanged() {
  if (!has_lightchanged()) {
    clear_Msg();
    set_has_lightchanged();
    Msg_.lightchanged_ = new ::atom::proto::lights::LightChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.LightChanged)
  return Msg_.lightchanged_;
}
::atom::proto::lights::LightChanged* AtomMessage::release_lightchanged() {
  if (has_lightchanged()) {
    clear_has_Msg();
    ::atom::proto::lights::LightChanged* temp = Msg_.lightchanged_;
    Msg_.lightchanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_lightchanged(::atom::proto::lights::LightChanged* lightchanged) {
  clear_Msg();
  if (lightchanged) {
    set_has_lightchanged();
    Msg_.lightchanged_ = lightchanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.LightChanged)
}

// optional .atom.proto.materials.Material Material = 10;
bool AtomMessage::has_material() const {
  return Msg_case() == kMaterial;
}
void AtomMessage::set_has_material() {
  _oneof_case_[0] = kMaterial;
}
void AtomMessage::clear_material() {
  if (has_material()) {
    delete Msg_.material_;
    clear_has_Msg();
  }
}
 const ::atom::proto::materials::Material& AtomMessage::material() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Material)
  return has_material()
      ? *Msg_.material_
      : ::atom::proto::materials::Material::default_instance();
}
::atom::proto::materials::Material* AtomMessage::mutable_material() {
  if (!has_material()) {
    clear_Msg();
    set_has_material();
    Msg_.material_ = new ::atom::proto::materials::Material;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Material)
  return Msg_.material_;
}
::atom::proto::materials::Material* AtomMessage::release_material() {
  if (has_material()) {
    clear_has_Msg();
    ::atom::proto::materials::Material* temp = Msg_.material_;
    Msg_.material_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_material(::atom::proto::materials::Material* material) {
  clear_Msg();
  if (material) {
    set_has_material();
    Msg_.material_ = material;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Material)
}

// optional .atom.proto.materials.MaterialChanged MaterialChanged = 11;
bool AtomMessage::has_materialchanged() const {
  return Msg_case() == kMaterialChanged;
}
void AtomMessage::set_has_materialchanged() {
  _oneof_case_[0] = kMaterialChanged;
}
void AtomMessage::clear_materialchanged() {
  if (has_materialchanged()) {
    delete Msg_.materialchanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::materials::MaterialChanged& AtomMessage::materialchanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.MaterialChanged)
  return has_materialchanged()
      ? *Msg_.materialchanged_
      : ::atom::proto::materials::MaterialChanged::default_instance();
}
::atom::proto::materials::MaterialChanged* AtomMessage::mutable_materialchanged() {
  if (!has_materialchanged()) {
    clear_Msg();
    set_has_materialchanged();
    Msg_.materialchanged_ = new ::atom::proto::materials::MaterialChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.MaterialChanged)
  return Msg_.materialchanged_;
}
::atom::proto::materials::MaterialChanged* AtomMessage::release_materialchanged() {
  if (has_materialchanged()) {
    clear_has_Msg();
    ::atom::proto::materials::MaterialChanged* temp = Msg_.materialchanged_;
    Msg_.materialchanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_materialchanged(::atom::proto::materials::MaterialChanged* materialchanged) {
  clear_Msg();
  if (materialchanged) {
    set_has_materialchanged();
    Msg_.materialchanged_ = materialchanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.MaterialChanged)
}

// optional .atom.proto.materials.Texture Texture = 12;
bool AtomMessage::has_texture() const {
  return Msg_case() == kTexture;
}
void AtomMessage::set_has_texture() {
  _oneof_case_[0] = kTexture;
}
void AtomMessage::clear_texture() {
  if (has_texture()) {
    delete Msg_.texture_;
    clear_has_Msg();
  }
}
 const ::atom::proto::materials::Texture& AtomMessage::texture() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Texture)
  return has_texture()
      ? *Msg_.texture_
      : ::atom::proto::materials::Texture::default_instance();
}
::atom::proto::materials::Texture* AtomMessage::mutable_texture() {
  if (!has_texture()) {
    clear_Msg();
    set_has_texture();
    Msg_.texture_ = new ::atom::proto::materials::Texture;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Texture)
  return Msg_.texture_;
}
::atom::proto::materials::Texture* AtomMessage::release_texture() {
  if (has_texture()) {
    clear_has_Msg();
    ::atom::proto::materials::Texture* temp = Msg_.texture_;
    Msg_.texture_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_texture(::atom::proto::materials::Texture* texture) {
  clear_Msg();
  if (texture) {
    set_has_texture();
    Msg_.texture_ = texture;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Texture)
}

// optional .atom.proto.materials.TextureChanged TextureChanged = 13;
bool AtomMessage::has_texturechanged() const {
  return Msg_case() == kTextureChanged;
}
void AtomMessage::set_has_texturechanged() {
  _oneof_case_[0] = kTextureChanged;
}
void AtomMessage::clear_texturechanged() {
  if (has_texturechanged()) {
    delete Msg_.texturechanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::materials::TextureChanged& AtomMessage::texturechanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.TextureChanged)
  return has_texturechanged()
      ? *Msg_.texturechanged_
      : ::atom::proto::materials::TextureChanged::default_instance();
}
::atom::proto::materials::TextureChanged* AtomMessage::mutable_texturechanged() {
  if (!has_texturechanged()) {
    clear_Msg();
    set_has_texturechanged();
    Msg_.texturechanged_ = new ::atom::proto::materials::TextureChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.TextureChanged)
  return Msg_.texturechanged_;
}
::atom::proto::materials::TextureChanged* AtomMessage::release_texturechanged() {
  if (has_texturechanged()) {
    clear_has_Msg();
    ::atom::proto::materials::TextureChanged* temp = Msg_.texturechanged_;
    Msg_.texturechanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_texturechanged(::atom::proto::materials::TextureChanged* texturechanged) {
  clear_Msg();
  if (texturechanged) {
    set_has_texturechanged();
    Msg_.texturechanged_ = texturechanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.TextureChanged)
}

// optional .atom.proto.NameChanged NameChanged = 14;
bool AtomMessage::has_namechanged() const {
  return Msg_case() == kNameChanged;
}
void AtomMessage::set_has_namechanged() {
  _oneof_case_[0] = kNameChanged;
}
void AtomMessage::clear_namechanged() {
  if (has_namechanged()) {
    delete Msg_.namechanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::NameChanged& AtomMessage::namechanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.NameChanged)
  return has_namechanged()
      ? *Msg_.namechanged_
      : ::atom::proto::NameChanged::default_instance();
}
::atom::proto::NameChanged* AtomMessage::mutable_namechanged() {
  if (!has_namechanged()) {
    clear_Msg();
    set_has_namechanged();
    Msg_.namechanged_ = new ::atom::proto::NameChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.NameChanged)
  return Msg_.namechanged_;
}
::atom::proto::NameChanged* AtomMessage::release_namechanged() {
  if (has_namechanged()) {
    clear_has_Msg();
    ::atom::proto::NameChanged* temp = Msg_.namechanged_;
    Msg_.namechanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_namechanged(::atom::proto::NameChanged* namechanged) {
  clear_Msg();
  if (namechanged) {
    set_has_namechanged();
    Msg_.namechanged_ = namechanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.NameChanged)
}

// optional .atom.proto.Transform Transform = 15;
bool AtomMessage::has_transform() const {
  return Msg_case() == kTransform;
}
void AtomMessage::set_has_transform() {
  _oneof_case_[0] = kTransform;
}
void AtomMessage::clear_transform() {
  if (has_transform()) {
    delete Msg_.transform_;
    clear_has_Msg();
  }
}
 const ::atom::proto::Transform& AtomMessage::transform() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Transform)
  return has_transform()
      ? *Msg_.transform_
      : ::atom::proto::Transform::default_instance();
}
::atom::proto::Transform* AtomMessage::mutable_transform() {
  if (!has_transform()) {
    clear_Msg();
    set_has_transform();
    Msg_.transform_ = new ::atom::proto::Transform;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Transform)
  return Msg_.transform_;
}
::atom::proto::Transform* AtomMessage::release_transform() {
  if (has_transform()) {
    clear_has_Msg();
    ::atom::proto::Transform* temp = Msg_.transform_;
    Msg_.transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_transform(::atom::proto::Transform* transform) {
  clear_Msg();
  if (transform) {
    set_has_transform();
    Msg_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Transform)
}

// optional .atom.proto.Annotation Annotation = 16;
bool AtomMessage::has_annotation() const {
  return Msg_case() == kAnnotation;
}
void AtomMessage::set_has_annotation() {
  _oneof_case_[0] = kAnnotation;
}
void AtomMessage::clear_annotation() {
  if (has_annotation()) {
    delete Msg_.annotation_;
    clear_has_Msg();
  }
}
 const ::atom::proto::Annotation& AtomMessage::annotation() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Annotation)
  return has_annotation()
      ? *Msg_.annotation_
      : ::atom::proto::Annotation::default_instance();
}
::atom::proto::Annotation* AtomMessage::mutable_annotation() {
  if (!has_annotation()) {
    clear_Msg();
    set_has_annotation();
    Msg_.annotation_ = new ::atom::proto::Annotation;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Annotation)
  return Msg_.annotation_;
}
::atom::proto::Annotation* AtomMessage::release_annotation() {
  if (has_annotation()) {
    clear_has_Msg();
    ::atom::proto::Annotation* temp = Msg_.annotation_;
    Msg_.annotation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_annotation(::atom::proto::Annotation* annotation) {
  clear_Msg();
  if (annotation) {
    set_has_annotation();
    Msg_.annotation_ = annotation;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Annotation)
}

// optional .atom.proto.Curve Curve = 17;
bool AtomMessage::has_curve() const {
  return Msg_case() == kCurve;
}
void AtomMessage::set_has_curve() {
  _oneof_case_[0] = kCurve;
}
void AtomMessage::clear_curve() {
  if (has_curve()) {
    delete Msg_.curve_;
    clear_has_Msg();
  }
}
 const ::atom::proto::Curve& AtomMessage::curve() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.Curve)
  return has_curve()
      ? *Msg_.curve_
      : ::atom::proto::Curve::default_instance();
}
::atom::proto::Curve* AtomMessage::mutable_curve() {
  if (!has_curve()) {
    clear_Msg();
    set_has_curve();
    Msg_.curve_ = new ::atom::proto::Curve;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.Curve)
  return Msg_.curve_;
}
::atom::proto::Curve* AtomMessage::release_curve() {
  if (has_curve()) {
    clear_has_Msg();
    ::atom::proto::Curve* temp = Msg_.curve_;
    Msg_.curve_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_curve(::atom::proto::Curve* curve) {
  clear_Msg();
  if (curve) {
    set_has_curve();
    Msg_.curve_ = curve;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.Curve)
}

// optional .atom.proto.MatrixChanged MatrixChanged = 18;
bool AtomMessage::has_matrixchanged() const {
  return Msg_case() == kMatrixChanged;
}
void AtomMessage::set_has_matrixchanged() {
  _oneof_case_[0] = kMatrixChanged;
}
void AtomMessage::clear_matrixchanged() {
  if (has_matrixchanged()) {
    delete Msg_.matrixchanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::MatrixChanged& AtomMessage::matrixchanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.MatrixChanged)
  return has_matrixchanged()
      ? *Msg_.matrixchanged_
      : ::atom::proto::MatrixChanged::default_instance();
}
::atom::proto::MatrixChanged* AtomMessage::mutable_matrixchanged() {
  if (!has_matrixchanged()) {
    clear_Msg();
    set_has_matrixchanged();
    Msg_.matrixchanged_ = new ::atom::proto::MatrixChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.MatrixChanged)
  return Msg_.matrixchanged_;
}
::atom::proto::MatrixChanged* AtomMessage::release_matrixchanged() {
  if (has_matrixchanged()) {
    clear_has_Msg();
    ::atom::proto::MatrixChanged* temp = Msg_.matrixchanged_;
    Msg_.matrixchanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_matrixchanged(::atom::proto::MatrixChanged* matrixchanged) {
  clear_Msg();
  if (matrixchanged) {
    set_has_matrixchanged();
    Msg_.matrixchanged_ = matrixchanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.MatrixChanged)
}

// optional .atom.proto.VisibilityChanged VisibilityChanged = 19;
bool AtomMessage::has_visibilitychanged() const {
  return Msg_case() == kVisibilityChanged;
}
void AtomMessage::set_has_visibilitychanged() {
  _oneof_case_[0] = kVisibilityChanged;
}
void AtomMessage::clear_visibilitychanged() {
  if (has_visibilitychanged()) {
    delete Msg_.visibilitychanged_;
    clear_has_Msg();
  }
}
 const ::atom::proto::VisibilityChanged& AtomMessage::visibilitychanged() const {
  // @@protoc_insertion_point(field_get:atom.proto.AtomMessage.VisibilityChanged)
  return has_visibilitychanged()
      ? *Msg_.visibilitychanged_
      : ::atom::proto::VisibilityChanged::default_instance();
}
::atom::proto::VisibilityChanged* AtomMessage::mutable_visibilitychanged() {
  if (!has_visibilitychanged()) {
    clear_Msg();
    set_has_visibilitychanged();
    Msg_.visibilitychanged_ = new ::atom::proto::VisibilityChanged;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.AtomMessage.VisibilityChanged)
  return Msg_.visibilitychanged_;
}
::atom::proto::VisibilityChanged* AtomMessage::release_visibilitychanged() {
  if (has_visibilitychanged()) {
    clear_has_Msg();
    ::atom::proto::VisibilityChanged* temp = Msg_.visibilitychanged_;
    Msg_.visibilitychanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AtomMessage::set_allocated_visibilitychanged(::atom::proto::VisibilityChanged* visibilitychanged) {
  clear_Msg();
  if (visibilitychanged) {
    set_has_visibilitychanged();
    Msg_.visibilitychanged_ = visibilitychanged;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.AtomMessage.VisibilityChanged)
}

bool AtomMessage::has_Msg() const {
  return Msg_case() != MSG_NOT_SET;
}
void AtomMessage::clear_has_Msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
AtomMessage::MsgCase AtomMessage::Msg_case() const {
  return AtomMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
