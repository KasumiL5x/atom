// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/TexturedParameter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "materials/TexturedParameter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

namespace {

const ::google::protobuf::Descriptor* TexturedParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TexturedParameter_reflection_ = NULL;
struct TexturedParameterOneofInstance {
  float asfloat_;
  const ::atom::proto::Color* ascolor_;
}* TexturedParameter_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_materials_2fTexturedParameter_2eproto() {
  protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "materials/TexturedParameter.proto");
  GOOGLE_CHECK(file != NULL);
  TexturedParameter_descriptor_ = file->message_type(0);
  static const int TexturedParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexturedParameter, texture_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TexturedParameter_default_oneof_instance_, asfloat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TexturedParameter_default_oneof_instance_, ascolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexturedParameter, Parameter_),
  };
  TexturedParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TexturedParameter_descriptor_,
      TexturedParameter::default_instance_,
      TexturedParameter_offsets_,
      -1,
      -1,
      -1,
      TexturedParameter_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexturedParameter, _oneof_case_[0]),
      sizeof(TexturedParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexturedParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexturedParameter, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_materials_2fTexturedParameter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TexturedParameter_descriptor_, &TexturedParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_materials_2fTexturedParameter_2eproto() {
  delete TexturedParameter::default_instance_;
  delete TexturedParameter_default_oneof_instance_;
  delete TexturedParameter_reflection_;
}

void protobuf_AddDesc_materials_2fTexturedParameter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::protobuf_AddDesc_Color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!materials/TexturedParameter.proto\022\024ato"
    "m.proto.materials\032\013Color.proto\"j\n\021Textur"
    "edParameter\022\017\n\007Texture\030\001 \001(\t\022\021\n\007AsFloat\030"
    "\002 \001(\002H\000\022$\n\007AsColor\030\003 \001(\0132\021.atom.proto.Co"
    "lorH\000B\013\n\tParameterb\006proto3", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "materials/TexturedParameter.proto", &protobuf_RegisterTypes);
  TexturedParameter::default_instance_ = new TexturedParameter();
  TexturedParameter_default_oneof_instance_ = new TexturedParameterOneofInstance();
  TexturedParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_materials_2fTexturedParameter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_materials_2fTexturedParameter_2eproto {
  StaticDescriptorInitializer_materials_2fTexturedParameter_2eproto() {
    protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
  }
} static_descriptor_initializer_materials_2fTexturedParameter_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexturedParameter::kTextureFieldNumber;
const int TexturedParameter::kAsFloatFieldNumber;
const int TexturedParameter::kAsColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexturedParameter::TexturedParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.materials.TexturedParameter)
}

void TexturedParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  TexturedParameter_default_oneof_instance_->asfloat_ = 0;
  TexturedParameter_default_oneof_instance_->ascolor_ = const_cast< ::atom::proto::Color*>(&::atom::proto::Color::default_instance());
}

TexturedParameter::TexturedParameter(const TexturedParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.materials.TexturedParameter)
}

void TexturedParameter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_Parameter();
}

TexturedParameter::~TexturedParameter() {
  // @@protoc_insertion_point(destructor:atom.proto.materials.TexturedParameter)
  SharedDtor();
}

void TexturedParameter::SharedDtor() {
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Parameter()) {
    clear_Parameter();
  }
  if (this != default_instance_) {
  }
}

void TexturedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexturedParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TexturedParameter_descriptor_;
}

const TexturedParameter& TexturedParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
  return *default_instance_;
}

TexturedParameter* TexturedParameter::default_instance_ = NULL;

TexturedParameter* TexturedParameter::New(::google::protobuf::Arena* arena) const {
  TexturedParameter* n = new TexturedParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexturedParameter::clear_Parameter() {
  switch(Parameter_case()) {
    case kAsFloat: {
      // No need to clear
      break;
    }
    case kAsColor: {
      delete Parameter_.ascolor_;
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETER_NOT_SET;
}


void TexturedParameter::Clear() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_Parameter();
}

bool TexturedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.materials.TexturedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Texture = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->texture().data(), this->texture().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.TexturedParameter.Texture"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_AsFloat;
        break;
      }

      // optional float AsFloat = 2;
      case 2: {
        if (tag == 21) {
         parse_AsFloat:
          clear_Parameter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Parameter_.asfloat_)));
          set_has_asfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AsColor;
        break;
      }

      // optional .atom.proto.Color AsColor = 3;
      case 3: {
        if (tag == 26) {
         parse_AsColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ascolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.materials.TexturedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.materials.TexturedParameter)
  return false;
#undef DO_
}

void TexturedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.materials.TexturedParameter)
  // optional string Texture = 1;
  if (this->texture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TexturedParameter.Texture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->texture(), output);
  }

  // optional float AsFloat = 2;
  if (has_asfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->asfloat(), output);
  }

  // optional .atom.proto.Color AsColor = 3;
  if (has_ascolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Parameter_.ascolor_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.materials.TexturedParameter)
}

::google::protobuf::uint8* TexturedParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.materials.TexturedParameter)
  // optional string Texture = 1;
  if (this->texture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TexturedParameter.Texture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->texture(), target);
  }

  // optional float AsFloat = 2;
  if (has_asfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->asfloat(), target);
  }

  // optional .atom.proto.Color AsColor = 3;
  if (has_ascolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *Parameter_.ascolor_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.materials.TexturedParameter)
  return target;
}

int TexturedParameter::ByteSize() const {
  int total_size = 0;

  // optional string Texture = 1;
  if (this->texture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->texture());
  }

  switch (Parameter_case()) {
    // optional float AsFloat = 2;
    case kAsFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional .atom.proto.Color AsColor = 3;
    case kAsColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Parameter_.ascolor_);
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexturedParameter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TexturedParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TexturedParameter>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TexturedParameter::MergeFrom(const TexturedParameter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Parameter_case()) {
    case kAsFloat: {
      set_asfloat(from.asfloat());
      break;
    }
    case kAsColor: {
      mutable_ascolor()->::atom::proto::Color::MergeFrom(from.ascolor());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  if (from.texture().size() > 0) {

    texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
  }
}

void TexturedParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexturedParameter::CopyFrom(const TexturedParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexturedParameter::IsInitialized() const {

  return true;
}

void TexturedParameter::Swap(TexturedParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexturedParameter::InternalSwap(TexturedParameter* other) {
  texture_.Swap(&other->texture_);
  std::swap(Parameter_, other->Parameter_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexturedParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TexturedParameter_descriptor_;
  metadata.reflection = TexturedParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexturedParameter

// optional string Texture = 1;
void TexturedParameter::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TexturedParameter::texture() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TexturedParameter.Texture)
  return texture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexturedParameter::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.TexturedParameter.Texture)
}
 void TexturedParameter::set_texture(const char* value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.TexturedParameter.Texture)
}
 void TexturedParameter::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.TexturedParameter.Texture)
}
 ::std::string* TexturedParameter::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TexturedParameter.Texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TexturedParameter::release_texture() {
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TexturedParameter::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TexturedParameter.Texture)
}

// optional float AsFloat = 2;
bool TexturedParameter::has_asfloat() const {
  return Parameter_case() == kAsFloat;
}
void TexturedParameter::set_has_asfloat() {
  _oneof_case_[0] = kAsFloat;
}
void TexturedParameter::clear_asfloat() {
  if (has_asfloat()) {
    Parameter_.asfloat_ = 0;
    clear_has_Parameter();
  }
}
 float TexturedParameter::asfloat() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TexturedParameter.AsFloat)
  if (has_asfloat()) {
    return Parameter_.asfloat_;
  }
  return 0;
}
 void TexturedParameter::set_asfloat(float value) {
  if (!has_asfloat()) {
    clear_Parameter();
    set_has_asfloat();
  }
  Parameter_.asfloat_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TexturedParameter.AsFloat)
}

// optional .atom.proto.Color AsColor = 3;
bool TexturedParameter::has_ascolor() const {
  return Parameter_case() == kAsColor;
}
void TexturedParameter::set_has_ascolor() {
  _oneof_case_[0] = kAsColor;
}
void TexturedParameter::clear_ascolor() {
  if (has_ascolor()) {
    delete Parameter_.ascolor_;
    clear_has_Parameter();
  }
}
 const ::atom::proto::Color& TexturedParameter::ascolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TexturedParameter.AsColor)
  return has_ascolor()
      ? *Parameter_.ascolor_
      : ::atom::proto::Color::default_instance();
}
::atom::proto::Color* TexturedParameter::mutable_ascolor() {
  if (!has_ascolor()) {
    clear_Parameter();
    set_has_ascolor();
    Parameter_.ascolor_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TexturedParameter.AsColor)
  return Parameter_.ascolor_;
}
::atom::proto::Color* TexturedParameter::release_ascolor() {
  if (has_ascolor()) {
    clear_has_Parameter();
    ::atom::proto::Color* temp = Parameter_.ascolor_;
    Parameter_.ascolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TexturedParameter::set_allocated_ascolor(::atom::proto::Color* ascolor) {
  clear_Parameter();
  if (ascolor) {
    set_has_ascolor();
    Parameter_.ascolor_ = ascolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TexturedParameter.AsColor)
}

bool TexturedParameter::has_Parameter() const {
  return Parameter_case() != PARAMETER_NOT_SET;
}
void TexturedParameter::clear_has_Parameter() {
  _oneof_case_[0] = PARAMETER_NOT_SET;
}
TexturedParameter::ParameterCase TexturedParameter::Parameter_case() const {
  return TexturedParameter::ParameterCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
