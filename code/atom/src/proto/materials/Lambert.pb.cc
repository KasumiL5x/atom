// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/Lambert.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "materials/Lambert.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

namespace {

const ::google::protobuf::Descriptor* Lambert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lambert_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_materials_2fLambert_2eproto() {
  protobuf_AddDesc_materials_2fLambert_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "materials/Lambert.proto");
  GOOGLE_CHECK(file != NULL);
  Lambert_descriptor_ = file->message_type(0);
  static const int Lambert_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, ambientcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, incandescence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, bumpmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, diffuseamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, translucence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, translucencedepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, translucencefocus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, glowintensity_),
  };
  Lambert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Lambert_descriptor_,
      Lambert::default_instance_,
      Lambert_offsets_,
      -1,
      -1,
      -1,
      sizeof(Lambert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambert, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_materials_2fLambert_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Lambert_descriptor_, &Lambert::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_materials_2fLambert_2eproto() {
  delete Lambert::default_instance_;
  delete Lambert_reflection_;
}

void protobuf_AddDesc_materials_2fLambert_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::materials::protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027materials/Lambert.proto\022\024atom.proto.ma"
    "terials\032!materials/TexturedParameter.pro"
    "to\"\327\004\n\007Lambert\0226\n\005Color\030\001 \001(\0132\'.atom.pro"
    "to.materials.TexturedParameter\022=\n\014Transp"
    "arency\030\002 \001(\0132\'.atom.proto.materials.Text"
    "uredParameter\022=\n\014AmbientColor\030\003 \001(\0132\'.at"
    "om.proto.materials.TexturedParameter\022>\n\r"
    "Incandescence\030\004 \001(\0132\'.atom.proto.materia"
    "ls.TexturedParameter\022\017\n\007BumpMap\030\005 \001(\t\022>\n"
    "\rDiffuseAmount\030\006 \001(\0132\'.atom.proto.materi"
    "als.TexturedParameter\022=\n\014Translucence\030\007 "
    "\001(\0132\'.atom.proto.materials.TexturedParam"
    "eter\022B\n\021TranslucenceDepth\030\010 \001(\0132\'.atom.p"
    "roto.materials.TexturedParameter\022B\n\021Tran"
    "slucenceFocus\030\t \001(\0132\'.atom.proto.materia"
    "ls.TexturedParameter\022>\n\rGlowIntensity\030\n "
    "\001(\0132\'.atom.proto.materials.TexturedParam"
    "eterb\006proto3", 692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "materials/Lambert.proto", &protobuf_RegisterTypes);
  Lambert::default_instance_ = new Lambert();
  Lambert::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_materials_2fLambert_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_materials_2fLambert_2eproto {
  StaticDescriptorInitializer_materials_2fLambert_2eproto() {
    protobuf_AddDesc_materials_2fLambert_2eproto();
  }
} static_descriptor_initializer_materials_2fLambert_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lambert::kColorFieldNumber;
const int Lambert::kTransparencyFieldNumber;
const int Lambert::kAmbientColorFieldNumber;
const int Lambert::kIncandescenceFieldNumber;
const int Lambert::kBumpMapFieldNumber;
const int Lambert::kDiffuseAmountFieldNumber;
const int Lambert::kTranslucenceFieldNumber;
const int Lambert::kTranslucenceDepthFieldNumber;
const int Lambert::kTranslucenceFocusFieldNumber;
const int Lambert::kGlowIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lambert::Lambert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.materials.Lambert)
}

void Lambert::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  color_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  transparency_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  ambientcolor_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  incandescence_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  diffuseamount_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  translucence_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  translucencedepth_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  translucencefocus_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  glowintensity_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
}

Lambert::Lambert(const Lambert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.materials.Lambert)
}

void Lambert::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  color_ = NULL;
  transparency_ = NULL;
  ambientcolor_ = NULL;
  incandescence_ = NULL;
  bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffuseamount_ = NULL;
  translucence_ = NULL;
  translucencedepth_ = NULL;
  translucencefocus_ = NULL;
  glowintensity_ = NULL;
}

Lambert::~Lambert() {
  // @@protoc_insertion_point(destructor:atom.proto.materials.Lambert)
  SharedDtor();
}

void Lambert::SharedDtor() {
  bumpmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete color_;
    delete transparency_;
    delete ambientcolor_;
    delete incandescence_;
    delete diffuseamount_;
    delete translucence_;
    delete translucencedepth_;
    delete translucencefocus_;
    delete glowintensity_;
  }
}

void Lambert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lambert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lambert_descriptor_;
}

const Lambert& Lambert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_materials_2fLambert_2eproto();
  return *default_instance_;
}

Lambert* Lambert::default_instance_ = NULL;

Lambert* Lambert::New(::google::protobuf::Arena* arena) const {
  Lambert* n = new Lambert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lambert::Clear() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && transparency_ != NULL) delete transparency_;
  transparency_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambientcolor_ != NULL) delete ambientcolor_;
  ambientcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && incandescence_ != NULL) delete incandescence_;
  incandescence_ = NULL;
  bumpmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && diffuseamount_ != NULL) delete diffuseamount_;
  diffuseamount_ = NULL;
  if (GetArenaNoVirtual() == NULL && translucence_ != NULL) delete translucence_;
  translucence_ = NULL;
  if (GetArenaNoVirtual() == NULL && translucencedepth_ != NULL) delete translucencedepth_;
  translucencedepth_ = NULL;
  if (GetArenaNoVirtual() == NULL && translucencefocus_ != NULL) delete translucencefocus_;
  translucencefocus_ = NULL;
  if (GetArenaNoVirtual() == NULL && glowintensity_ != NULL) delete glowintensity_;
  glowintensity_ = NULL;
}

bool Lambert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.materials.Lambert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atom.proto.materials.TexturedParameter Color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Transparency;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Transparency = 2;
      case 2: {
        if (tag == 18) {
         parse_Transparency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transparency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AmbientColor;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter AmbientColor = 3;
      case 3: {
        if (tag == 26) {
         parse_AmbientColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambientcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Incandescence;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Incandescence = 4;
      case 4: {
        if (tag == 34) {
         parse_Incandescence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_incandescence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BumpMap;
        break;
      }

      // optional string BumpMap = 5;
      case 5: {
        if (tag == 42) {
         parse_BumpMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bumpmap()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bumpmap().data(), this->bumpmap().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.Lambert.BumpMap"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DiffuseAmount;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 6;
      case 6: {
        if (tag == 50) {
         parse_DiffuseAmount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuseamount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Translucence;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Translucence = 7;
      case 7: {
        if (tag == 58) {
         parse_Translucence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translucence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TranslucenceDepth;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 8;
      case 8: {
        if (tag == 66) {
         parse_TranslucenceDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translucencedepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TranslucenceFocus;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 9;
      case 9: {
        if (tag == 74) {
         parse_TranslucenceFocus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translucencefocus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GlowIntensity;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter GlowIntensity = 10;
      case 10: {
        if (tag == 82) {
         parse_GlowIntensity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glowintensity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.materials.Lambert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.materials.Lambert)
  return false;
#undef DO_
}

void Lambert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.materials.Lambert)
  // optional .atom.proto.materials.TexturedParameter Color = 1;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Transparency = 2;
  if (this->has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transparency_, output);
  }

  // optional .atom.proto.materials.TexturedParameter AmbientColor = 3;
  if (this->has_ambientcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ambientcolor_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Incandescence = 4;
  if (this->has_incandescence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->incandescence_, output);
  }

  // optional string BumpMap = 5;
  if (this->bumpmap().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumpmap().data(), this->bumpmap().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.Lambert.BumpMap");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bumpmap(), output);
  }

  // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 6;
  if (this->has_diffuseamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->diffuseamount_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Translucence = 7;
  if (this->has_translucence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->translucence_, output);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 8;
  if (this->has_translucencedepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->translucencedepth_, output);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 9;
  if (this->has_translucencefocus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->translucencefocus_, output);
  }

  // optional .atom.proto.materials.TexturedParameter GlowIntensity = 10;
  if (this->has_glowintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->glowintensity_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.materials.Lambert)
}

::google::protobuf::uint8* Lambert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.materials.Lambert)
  // optional .atom.proto.materials.TexturedParameter Color = 1;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->color_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Transparency = 2;
  if (this->has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->transparency_, target);
  }

  // optional .atom.proto.materials.TexturedParameter AmbientColor = 3;
  if (this->has_ambientcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->ambientcolor_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Incandescence = 4;
  if (this->has_incandescence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->incandescence_, target);
  }

  // optional string BumpMap = 5;
  if (this->bumpmap().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumpmap().data(), this->bumpmap().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.Lambert.BumpMap");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bumpmap(), target);
  }

  // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 6;
  if (this->has_diffuseamount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->diffuseamount_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Translucence = 7;
  if (this->has_translucence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->translucence_, target);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 8;
  if (this->has_translucencedepth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->translucencedepth_, target);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 9;
  if (this->has_translucencefocus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->translucencefocus_, target);
  }

  // optional .atom.proto.materials.TexturedParameter GlowIntensity = 10;
  if (this->has_glowintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->glowintensity_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.materials.Lambert)
  return target;
}

int Lambert::ByteSize() const {
  int total_size = 0;

  // optional .atom.proto.materials.TexturedParameter Color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // optional .atom.proto.materials.TexturedParameter Transparency = 2;
  if (this->has_transparency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transparency_);
  }

  // optional .atom.proto.materials.TexturedParameter AmbientColor = 3;
  if (this->has_ambientcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ambientcolor_);
  }

  // optional .atom.proto.materials.TexturedParameter Incandescence = 4;
  if (this->has_incandescence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->incandescence_);
  }

  // optional string BumpMap = 5;
  if (this->bumpmap().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bumpmap());
  }

  // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 6;
  if (this->has_diffuseamount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->diffuseamount_);
  }

  // optional .atom.proto.materials.TexturedParameter Translucence = 7;
  if (this->has_translucence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translucence_);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 8;
  if (this->has_translucencedepth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translucencedepth_);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 9;
  if (this->has_translucencefocus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translucencefocus_);
  }

  // optional .atom.proto.materials.TexturedParameter GlowIntensity = 10;
  if (this->has_glowintensity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->glowintensity_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lambert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Lambert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Lambert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lambert::MergeFrom(const Lambert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_color()) {
    mutable_color()->::atom::proto::materials::TexturedParameter::MergeFrom(from.color());
  }
  if (from.has_transparency()) {
    mutable_transparency()->::atom::proto::materials::TexturedParameter::MergeFrom(from.transparency());
  }
  if (from.has_ambientcolor()) {
    mutable_ambientcolor()->::atom::proto::materials::TexturedParameter::MergeFrom(from.ambientcolor());
  }
  if (from.has_incandescence()) {
    mutable_incandescence()->::atom::proto::materials::TexturedParameter::MergeFrom(from.incandescence());
  }
  if (from.bumpmap().size() > 0) {

    bumpmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bumpmap_);
  }
  if (from.has_diffuseamount()) {
    mutable_diffuseamount()->::atom::proto::materials::TexturedParameter::MergeFrom(from.diffuseamount());
  }
  if (from.has_translucence()) {
    mutable_translucence()->::atom::proto::materials::TexturedParameter::MergeFrom(from.translucence());
  }
  if (from.has_translucencedepth()) {
    mutable_translucencedepth()->::atom::proto::materials::TexturedParameter::MergeFrom(from.translucencedepth());
  }
  if (from.has_translucencefocus()) {
    mutable_translucencefocus()->::atom::proto::materials::TexturedParameter::MergeFrom(from.translucencefocus());
  }
  if (from.has_glowintensity()) {
    mutable_glowintensity()->::atom::proto::materials::TexturedParameter::MergeFrom(from.glowintensity());
  }
}

void Lambert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lambert::CopyFrom(const Lambert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lambert::IsInitialized() const {

  return true;
}

void Lambert::Swap(Lambert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lambert::InternalSwap(Lambert* other) {
  std::swap(color_, other->color_);
  std::swap(transparency_, other->transparency_);
  std::swap(ambientcolor_, other->ambientcolor_);
  std::swap(incandescence_, other->incandescence_);
  bumpmap_.Swap(&other->bumpmap_);
  std::swap(diffuseamount_, other->diffuseamount_);
  std::swap(translucence_, other->translucence_);
  std::swap(translucencedepth_, other->translucencedepth_);
  std::swap(translucencefocus_, other->translucencefocus_);
  std::swap(glowintensity_, other->glowintensity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lambert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lambert_descriptor_;
  metadata.reflection = Lambert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lambert

// optional .atom.proto.materials.TexturedParameter Color = 1;
bool Lambert::has_color() const {
  return !_is_default_instance_ && color_ != NULL;
}
void Lambert::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.Color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.Color)
  return color_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_color() {
  
  ::atom::proto::materials::TexturedParameter* temp = color_;
  color_ = NULL;
  return temp;
}
void Lambert::set_allocated_color(::atom::proto::materials::TexturedParameter* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.Color)
}

// optional .atom.proto.materials.TexturedParameter Transparency = 2;
bool Lambert::has_transparency() const {
  return !_is_default_instance_ && transparency_ != NULL;
}
void Lambert::clear_transparency() {
  if (GetArenaNoVirtual() == NULL && transparency_ != NULL) delete transparency_;
  transparency_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::transparency() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.Transparency)
  return transparency_ != NULL ? *transparency_ : *default_instance_->transparency_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_transparency() {
  
  if (transparency_ == NULL) {
    transparency_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.Transparency)
  return transparency_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_transparency() {
  
  ::atom::proto::materials::TexturedParameter* temp = transparency_;
  transparency_ = NULL;
  return temp;
}
void Lambert::set_allocated_transparency(::atom::proto::materials::TexturedParameter* transparency) {
  delete transparency_;
  transparency_ = transparency;
  if (transparency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.Transparency)
}

// optional .atom.proto.materials.TexturedParameter AmbientColor = 3;
bool Lambert::has_ambientcolor() const {
  return !_is_default_instance_ && ambientcolor_ != NULL;
}
void Lambert::clear_ambientcolor() {
  if (GetArenaNoVirtual() == NULL && ambientcolor_ != NULL) delete ambientcolor_;
  ambientcolor_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::ambientcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.AmbientColor)
  return ambientcolor_ != NULL ? *ambientcolor_ : *default_instance_->ambientcolor_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_ambientcolor() {
  
  if (ambientcolor_ == NULL) {
    ambientcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.AmbientColor)
  return ambientcolor_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_ambientcolor() {
  
  ::atom::proto::materials::TexturedParameter* temp = ambientcolor_;
  ambientcolor_ = NULL;
  return temp;
}
void Lambert::set_allocated_ambientcolor(::atom::proto::materials::TexturedParameter* ambientcolor) {
  delete ambientcolor_;
  ambientcolor_ = ambientcolor;
  if (ambientcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.AmbientColor)
}

// optional .atom.proto.materials.TexturedParameter Incandescence = 4;
bool Lambert::has_incandescence() const {
  return !_is_default_instance_ && incandescence_ != NULL;
}
void Lambert::clear_incandescence() {
  if (GetArenaNoVirtual() == NULL && incandescence_ != NULL) delete incandescence_;
  incandescence_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::incandescence() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.Incandescence)
  return incandescence_ != NULL ? *incandescence_ : *default_instance_->incandescence_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_incandescence() {
  
  if (incandescence_ == NULL) {
    incandescence_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.Incandescence)
  return incandescence_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_incandescence() {
  
  ::atom::proto::materials::TexturedParameter* temp = incandescence_;
  incandescence_ = NULL;
  return temp;
}
void Lambert::set_allocated_incandescence(::atom::proto::materials::TexturedParameter* incandescence) {
  delete incandescence_;
  incandescence_ = incandescence;
  if (incandescence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.Incandescence)
}

// optional string BumpMap = 5;
void Lambert::clear_bumpmap() {
  bumpmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Lambert::bumpmap() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.BumpMap)
  return bumpmap_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lambert::set_bumpmap(const ::std::string& value) {
  
  bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.Lambert.BumpMap)
}
 void Lambert::set_bumpmap(const char* value) {
  
  bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.Lambert.BumpMap)
}
 void Lambert::set_bumpmap(const char* value, size_t size) {
  
  bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.Lambert.BumpMap)
}
 ::std::string* Lambert::mutable_bumpmap() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.BumpMap)
  return bumpmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Lambert::release_bumpmap() {
  
  return bumpmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Lambert::set_allocated_bumpmap(::std::string* bumpmap) {
  if (bumpmap != NULL) {
    
  } else {
    
  }
  bumpmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bumpmap);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.BumpMap)
}

// optional .atom.proto.materials.TexturedParameter DiffuseAmount = 6;
bool Lambert::has_diffuseamount() const {
  return !_is_default_instance_ && diffuseamount_ != NULL;
}
void Lambert::clear_diffuseamount() {
  if (GetArenaNoVirtual() == NULL && diffuseamount_ != NULL) delete diffuseamount_;
  diffuseamount_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::diffuseamount() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.DiffuseAmount)
  return diffuseamount_ != NULL ? *diffuseamount_ : *default_instance_->diffuseamount_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_diffuseamount() {
  
  if (diffuseamount_ == NULL) {
    diffuseamount_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.DiffuseAmount)
  return diffuseamount_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_diffuseamount() {
  
  ::atom::proto::materials::TexturedParameter* temp = diffuseamount_;
  diffuseamount_ = NULL;
  return temp;
}
void Lambert::set_allocated_diffuseamount(::atom::proto::materials::TexturedParameter* diffuseamount) {
  delete diffuseamount_;
  diffuseamount_ = diffuseamount;
  if (diffuseamount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.DiffuseAmount)
}

// optional .atom.proto.materials.TexturedParameter Translucence = 7;
bool Lambert::has_translucence() const {
  return !_is_default_instance_ && translucence_ != NULL;
}
void Lambert::clear_translucence() {
  if (GetArenaNoVirtual() == NULL && translucence_ != NULL) delete translucence_;
  translucence_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::translucence() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.Translucence)
  return translucence_ != NULL ? *translucence_ : *default_instance_->translucence_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_translucence() {
  
  if (translucence_ == NULL) {
    translucence_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.Translucence)
  return translucence_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_translucence() {
  
  ::atom::proto::materials::TexturedParameter* temp = translucence_;
  translucence_ = NULL;
  return temp;
}
void Lambert::set_allocated_translucence(::atom::proto::materials::TexturedParameter* translucence) {
  delete translucence_;
  translucence_ = translucence;
  if (translucence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.Translucence)
}

// optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 8;
bool Lambert::has_translucencedepth() const {
  return !_is_default_instance_ && translucencedepth_ != NULL;
}
void Lambert::clear_translucencedepth() {
  if (GetArenaNoVirtual() == NULL && translucencedepth_ != NULL) delete translucencedepth_;
  translucencedepth_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::translucencedepth() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.TranslucenceDepth)
  return translucencedepth_ != NULL ? *translucencedepth_ : *default_instance_->translucencedepth_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_translucencedepth() {
  
  if (translucencedepth_ == NULL) {
    translucencedepth_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.TranslucenceDepth)
  return translucencedepth_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_translucencedepth() {
  
  ::atom::proto::materials::TexturedParameter* temp = translucencedepth_;
  translucencedepth_ = NULL;
  return temp;
}
void Lambert::set_allocated_translucencedepth(::atom::proto::materials::TexturedParameter* translucencedepth) {
  delete translucencedepth_;
  translucencedepth_ = translucencedepth;
  if (translucencedepth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.TranslucenceDepth)
}

// optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 9;
bool Lambert::has_translucencefocus() const {
  return !_is_default_instance_ && translucencefocus_ != NULL;
}
void Lambert::clear_translucencefocus() {
  if (GetArenaNoVirtual() == NULL && translucencefocus_ != NULL) delete translucencefocus_;
  translucencefocus_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::translucencefocus() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.TranslucenceFocus)
  return translucencefocus_ != NULL ? *translucencefocus_ : *default_instance_->translucencefocus_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_translucencefocus() {
  
  if (translucencefocus_ == NULL) {
    translucencefocus_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.TranslucenceFocus)
  return translucencefocus_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_translucencefocus() {
  
  ::atom::proto::materials::TexturedParameter* temp = translucencefocus_;
  translucencefocus_ = NULL;
  return temp;
}
void Lambert::set_allocated_translucencefocus(::atom::proto::materials::TexturedParameter* translucencefocus) {
  delete translucencefocus_;
  translucencefocus_ = translucencefocus;
  if (translucencefocus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.TranslucenceFocus)
}

// optional .atom.proto.materials.TexturedParameter GlowIntensity = 10;
bool Lambert::has_glowintensity() const {
  return !_is_default_instance_ && glowintensity_ != NULL;
}
void Lambert::clear_glowintensity() {
  if (GetArenaNoVirtual() == NULL && glowintensity_ != NULL) delete glowintensity_;
  glowintensity_ = NULL;
}
const ::atom::proto::materials::TexturedParameter& Lambert::glowintensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.Lambert.GlowIntensity)
  return glowintensity_ != NULL ? *glowintensity_ : *default_instance_->glowintensity_;
}
::atom::proto::materials::TexturedParameter* Lambert::mutable_glowintensity() {
  
  if (glowintensity_ == NULL) {
    glowintensity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.Lambert.GlowIntensity)
  return glowintensity_;
}
::atom::proto::materials::TexturedParameter* Lambert::release_glowintensity() {
  
  ::atom::proto::materials::TexturedParameter* temp = glowintensity_;
  glowintensity_ = NULL;
  return temp;
}
void Lambert::set_allocated_glowintensity(::atom::proto::materials::TexturedParameter* glowintensity) {
  delete glowintensity_;
  glowintensity_ = glowintensity;
  if (glowintensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.Lambert.GlowIntensity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
