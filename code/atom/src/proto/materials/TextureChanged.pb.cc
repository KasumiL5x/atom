// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/TextureChanged.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "materials/TextureChanged.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

namespace {

const ::google::protobuf::Descriptor* TextureChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextureChanged_reflection_ = NULL;
struct TextureChangedOneofInstance {
  const ::atom::proto::materials::TextureData* data_;
  const ::atom::proto::Vector2* translateframe_;
  float rotateframe_;
  bool mirroru_;
  bool mirrorv_;
  bool wrapu_;
  bool wrapv_;
  const ::atom::proto::Vector2* repeat_;
  const ::atom::proto::Vector2* offset_;
  float rotate_;
  const ::atom::proto::Vector2* noise_;
}* TextureChanged_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_materials_2fTextureChanged_2eproto() {
  protobuf_AddDesc_materials_2fTextureChanged_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "materials/TextureChanged.proto");
  GOOGLE_CHECK(file != NULL);
  TextureChanged_descriptor_ = file->message_type(0);
  static const int TextureChanged_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureChanged, texturename_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, translateframe_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, rotateframe_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, mirroru_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, mirrorv_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, wrapu_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, wrapv_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, repeat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, offset_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, rotate_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TextureChanged_default_oneof_instance_, noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureChanged, Property_),
  };
  TextureChanged_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextureChanged_descriptor_,
      TextureChanged::default_instance_,
      TextureChanged_offsets_,
      -1,
      -1,
      -1,
      TextureChanged_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureChanged, _oneof_case_[0]),
      sizeof(TextureChanged),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureChanged, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureChanged, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_materials_2fTextureChanged_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextureChanged_descriptor_, &TextureChanged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_materials_2fTextureChanged_2eproto() {
  delete TextureChanged::default_instance_;
  delete TextureChanged_default_oneof_instance_;
  delete TextureChanged_reflection_;
}

void protobuf_AddDesc_materials_2fTextureChanged_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::materials::protobuf_AddDesc_materials_2fTextureData_2eproto();
  ::atom::proto::protobuf_AddDesc_Vector2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036materials/TextureChanged.proto\022\024atom.p"
    "roto.materials\032\033materials/TextureData.pr"
    "oto\032\rVector2.proto\"\370\002\n\016TextureChanged\022\023\n"
    "\013TextureName\030\001 \001(\t\0221\n\004Data\030\002 \001(\0132!.atom."
    "proto.materials.TextureDataH\000\022-\n\016Transla"
    "teFrame\030\003 \001(\0132\023.atom.proto.Vector2H\000\022\025\n\013"
    "RotateFrame\030\004 \001(\002H\000\022\021\n\007MirrorU\030\005 \001(\010H\000\022\021"
    "\n\007MirrorV\030\006 \001(\010H\000\022\017\n\005WrapU\030\007 \001(\010H\000\022\017\n\005wr"
    "apV\030\010 \001(\010H\000\022%\n\006Repeat\030\t \001(\0132\023.atom.proto"
    ".Vector2H\000\022%\n\006Offset\030\n \001(\0132\023.atom.proto."
    "Vector2H\000\022\020\n\006Rotate\030\013 \001(\002H\000\022$\n\005Noise\030\014 \001"
    "(\0132\023.atom.proto.Vector2H\000B\n\n\010Propertyb\006p"
    "roto3", 485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "materials/TextureChanged.proto", &protobuf_RegisterTypes);
  TextureChanged::default_instance_ = new TextureChanged();
  TextureChanged_default_oneof_instance_ = new TextureChangedOneofInstance();
  TextureChanged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_materials_2fTextureChanged_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_materials_2fTextureChanged_2eproto {
  StaticDescriptorInitializer_materials_2fTextureChanged_2eproto() {
    protobuf_AddDesc_materials_2fTextureChanged_2eproto();
  }
} static_descriptor_initializer_materials_2fTextureChanged_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextureChanged::kTextureNameFieldNumber;
const int TextureChanged::kDataFieldNumber;
const int TextureChanged::kTranslateFrameFieldNumber;
const int TextureChanged::kRotateFrameFieldNumber;
const int TextureChanged::kMirrorUFieldNumber;
const int TextureChanged::kMirrorVFieldNumber;
const int TextureChanged::kWrapUFieldNumber;
const int TextureChanged::kWrapVFieldNumber;
const int TextureChanged::kRepeatFieldNumber;
const int TextureChanged::kOffsetFieldNumber;
const int TextureChanged::kRotateFieldNumber;
const int TextureChanged::kNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextureChanged::TextureChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.materials.TextureChanged)
}

void TextureChanged::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  TextureChanged_default_oneof_instance_->data_ = const_cast< ::atom::proto::materials::TextureData*>(&::atom::proto::materials::TextureData::default_instance());
  TextureChanged_default_oneof_instance_->translateframe_ = const_cast< ::atom::proto::Vector2*>(&::atom::proto::Vector2::default_instance());
  TextureChanged_default_oneof_instance_->rotateframe_ = 0;
  TextureChanged_default_oneof_instance_->mirroru_ = false;
  TextureChanged_default_oneof_instance_->mirrorv_ = false;
  TextureChanged_default_oneof_instance_->wrapu_ = false;
  TextureChanged_default_oneof_instance_->wrapv_ = false;
  TextureChanged_default_oneof_instance_->repeat_ = const_cast< ::atom::proto::Vector2*>(&::atom::proto::Vector2::default_instance());
  TextureChanged_default_oneof_instance_->offset_ = const_cast< ::atom::proto::Vector2*>(&::atom::proto::Vector2::default_instance());
  TextureChanged_default_oneof_instance_->rotate_ = 0;
  TextureChanged_default_oneof_instance_->noise_ = const_cast< ::atom::proto::Vector2*>(&::atom::proto::Vector2::default_instance());
}

TextureChanged::TextureChanged(const TextureChanged& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.materials.TextureChanged)
}

void TextureChanged::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  texturename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_Property();
}

TextureChanged::~TextureChanged() {
  // @@protoc_insertion_point(destructor:atom.proto.materials.TextureChanged)
  SharedDtor();
}

void TextureChanged::SharedDtor() {
  texturename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Property()) {
    clear_Property();
  }
  if (this != default_instance_) {
  }
}

void TextureChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextureChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextureChanged_descriptor_;
}

const TextureChanged& TextureChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_materials_2fTextureChanged_2eproto();
  return *default_instance_;
}

TextureChanged* TextureChanged::default_instance_ = NULL;

TextureChanged* TextureChanged::New(::google::protobuf::Arena* arena) const {
  TextureChanged* n = new TextureChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextureChanged::clear_Property() {
  switch(Property_case()) {
    case kData: {
      delete Property_.data_;
      break;
    }
    case kTranslateFrame: {
      delete Property_.translateframe_;
      break;
    }
    case kRotateFrame: {
      // No need to clear
      break;
    }
    case kMirrorU: {
      // No need to clear
      break;
    }
    case kMirrorV: {
      // No need to clear
      break;
    }
    case kWrapU: {
      // No need to clear
      break;
    }
    case kWrapV: {
      // No need to clear
      break;
    }
    case kRepeat: {
      delete Property_.repeat_;
      break;
    }
    case kOffset: {
      delete Property_.offset_;
      break;
    }
    case kRotate: {
      // No need to clear
      break;
    }
    case kNoise: {
      delete Property_.noise_;
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void TextureChanged::Clear() {
  texturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_Property();
}

bool TextureChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.materials.TextureChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TextureName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texturename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->texturename().data(), this->texturename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.TextureChanged.TextureName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional .atom.proto.materials.TextureData Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TranslateFrame;
        break;
      }

      // optional .atom.proto.Vector2 TranslateFrame = 3;
      case 3: {
        if (tag == 26) {
         parse_TranslateFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translateframe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_RotateFrame;
        break;
      }

      // optional float RotateFrame = 4;
      case 4: {
        if (tag == 37) {
         parse_RotateFrame:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.rotateframe_)));
          set_has_rotateframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MirrorU;
        break;
      }

      // optional bool MirrorU = 5;
      case 5: {
        if (tag == 40) {
         parse_MirrorU:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Property_.mirroru_)));
          set_has_mirroru();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MirrorV;
        break;
      }

      // optional bool MirrorV = 6;
      case 6: {
        if (tag == 48) {
         parse_MirrorV:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Property_.mirrorv_)));
          set_has_mirrorv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_WrapU;
        break;
      }

      // optional bool WrapU = 7;
      case 7: {
        if (tag == 56) {
         parse_WrapU:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Property_.wrapu_)));
          set_has_wrapu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wrapV;
        break;
      }

      // optional bool wrapV = 8;
      case 8: {
        if (tag == 64) {
         parse_wrapV:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Property_.wrapv_)));
          set_has_wrapv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Repeat;
        break;
      }

      // optional .atom.proto.Vector2 Repeat = 9;
      case 9: {
        if (tag == 74) {
         parse_Repeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Offset;
        break;
      }

      // optional .atom.proto.Vector2 Offset = 10;
      case 10: {
        if (tag == 82) {
         parse_Offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_Rotate;
        break;
      }

      // optional float Rotate = 11;
      case 11: {
        if (tag == 93) {
         parse_Rotate:
          clear_Property();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Property_.rotate_)));
          set_has_rotate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Noise;
        break;
      }

      // optional .atom.proto.Vector2 Noise = 12;
      case 12: {
        if (tag == 98) {
         parse_Noise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noise()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.materials.TextureChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.materials.TextureChanged)
  return false;
#undef DO_
}

void TextureChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.materials.TextureChanged)
  // optional string TextureName = 1;
  if (this->texturename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texturename().data(), this->texturename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TextureChanged.TextureName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->texturename(), output);
  }

  // optional .atom.proto.materials.TextureData Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Property_.data_, output);
  }

  // optional .atom.proto.Vector2 TranslateFrame = 3;
  if (has_translateframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Property_.translateframe_, output);
  }

  // optional float RotateFrame = 4;
  if (has_rotateframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rotateframe(), output);
  }

  // optional bool MirrorU = 5;
  if (has_mirroru()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->mirroru(), output);
  }

  // optional bool MirrorV = 6;
  if (has_mirrorv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirrorv(), output);
  }

  // optional bool WrapU = 7;
  if (has_wrapu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->wrapu(), output);
  }

  // optional bool wrapV = 8;
  if (has_wrapv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->wrapv(), output);
  }

  // optional .atom.proto.Vector2 Repeat = 9;
  if (has_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *Property_.repeat_, output);
  }

  // optional .atom.proto.Vector2 Offset = 10;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *Property_.offset_, output);
  }

  // optional float Rotate = 11;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rotate(), output);
  }

  // optional .atom.proto.Vector2 Noise = 12;
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *Property_.noise_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.materials.TextureChanged)
}

::google::protobuf::uint8* TextureChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.materials.TextureChanged)
  // optional string TextureName = 1;
  if (this->texturename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texturename().data(), this->texturename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TextureChanged.TextureName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->texturename(), target);
  }

  // optional .atom.proto.materials.TextureData Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *Property_.data_, target);
  }

  // optional .atom.proto.Vector2 TranslateFrame = 3;
  if (has_translateframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *Property_.translateframe_, target);
  }

  // optional float RotateFrame = 4;
  if (has_rotateframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rotateframe(), target);
  }

  // optional bool MirrorU = 5;
  if (has_mirroru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->mirroru(), target);
  }

  // optional bool MirrorV = 6;
  if (has_mirrorv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirrorv(), target);
  }

  // optional bool WrapU = 7;
  if (has_wrapu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->wrapu(), target);
  }

  // optional bool wrapV = 8;
  if (has_wrapv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->wrapv(), target);
  }

  // optional .atom.proto.Vector2 Repeat = 9;
  if (has_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *Property_.repeat_, target);
  }

  // optional .atom.proto.Vector2 Offset = 10;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *Property_.offset_, target);
  }

  // optional float Rotate = 11;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rotate(), target);
  }

  // optional .atom.proto.Vector2 Noise = 12;
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *Property_.noise_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.materials.TextureChanged)
  return target;
}

int TextureChanged::ByteSize() const {
  int total_size = 0;

  // optional string TextureName = 1;
  if (this->texturename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->texturename());
  }

  switch (Property_case()) {
    // optional .atom.proto.materials.TextureData Data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.data_);
      break;
    }
    // optional .atom.proto.Vector2 TranslateFrame = 3;
    case kTranslateFrame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.translateframe_);
      break;
    }
    // optional float RotateFrame = 4;
    case kRotateFrame: {
      total_size += 1 + 4;
      break;
    }
    // optional bool MirrorU = 5;
    case kMirrorU: {
      total_size += 1 + 1;
      break;
    }
    // optional bool MirrorV = 6;
    case kMirrorV: {
      total_size += 1 + 1;
      break;
    }
    // optional bool WrapU = 7;
    case kWrapU: {
      total_size += 1 + 1;
      break;
    }
    // optional bool wrapV = 8;
    case kWrapV: {
      total_size += 1 + 1;
      break;
    }
    // optional .atom.proto.Vector2 Repeat = 9;
    case kRepeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.repeat_);
      break;
    }
    // optional .atom.proto.Vector2 Offset = 10;
    case kOffset: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.offset_);
      break;
    }
    // optional float Rotate = 11;
    case kRotate: {
      total_size += 1 + 4;
      break;
    }
    // optional .atom.proto.Vector2 Noise = 12;
    case kNoise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.noise_);
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextureChanged::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TextureChanged* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TextureChanged>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextureChanged::MergeFrom(const TextureChanged& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Property_case()) {
    case kData: {
      mutable_data()->::atom::proto::materials::TextureData::MergeFrom(from.data());
      break;
    }
    case kTranslateFrame: {
      mutable_translateframe()->::atom::proto::Vector2::MergeFrom(from.translateframe());
      break;
    }
    case kRotateFrame: {
      set_rotateframe(from.rotateframe());
      break;
    }
    case kMirrorU: {
      set_mirroru(from.mirroru());
      break;
    }
    case kMirrorV: {
      set_mirrorv(from.mirrorv());
      break;
    }
    case kWrapU: {
      set_wrapu(from.wrapu());
      break;
    }
    case kWrapV: {
      set_wrapv(from.wrapv());
      break;
    }
    case kRepeat: {
      mutable_repeat()->::atom::proto::Vector2::MergeFrom(from.repeat());
      break;
    }
    case kOffset: {
      mutable_offset()->::atom::proto::Vector2::MergeFrom(from.offset());
      break;
    }
    case kRotate: {
      set_rotate(from.rotate());
      break;
    }
    case kNoise: {
      mutable_noise()->::atom::proto::Vector2::MergeFrom(from.noise());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  if (from.texturename().size() > 0) {

    texturename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texturename_);
  }
}

void TextureChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureChanged::CopyFrom(const TextureChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureChanged::IsInitialized() const {

  return true;
}

void TextureChanged::Swap(TextureChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextureChanged::InternalSwap(TextureChanged* other) {
  texturename_.Swap(&other->texturename_);
  std::swap(Property_, other->Property_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextureChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextureChanged_descriptor_;
  metadata.reflection = TextureChanged_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextureChanged

// optional string TextureName = 1;
void TextureChanged::clear_texturename() {
  texturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TextureChanged::texturename() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.TextureName)
  return texturename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureChanged::set_texturename(const ::std::string& value) {
  
  texturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.TextureName)
}
 void TextureChanged::set_texturename(const char* value) {
  
  texturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.TextureChanged.TextureName)
}
 void TextureChanged::set_texturename(const char* value, size_t size) {
  
  texturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.TextureChanged.TextureName)
}
 ::std::string* TextureChanged::mutable_texturename() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureChanged.TextureName)
  return texturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TextureChanged::release_texturename() {
  
  return texturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureChanged::set_allocated_texturename(::std::string* texturename) {
  if (texturename != NULL) {
    
  } else {
    
  }
  texturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texturename);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureChanged.TextureName)
}

// optional .atom.proto.materials.TextureData Data = 2;
bool TextureChanged::has_data() const {
  return Property_case() == kData;
}
void TextureChanged::set_has_data() {
  _oneof_case_[0] = kData;
}
void TextureChanged::clear_data() {
  if (has_data()) {
    delete Property_.data_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TextureData& TextureChanged::data() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.Data)
  return has_data()
      ? *Property_.data_
      : ::atom::proto::materials::TextureData::default_instance();
}
::atom::proto::materials::TextureData* TextureChanged::mutable_data() {
  if (!has_data()) {
    clear_Property();
    set_has_data();
    Property_.data_ = new ::atom::proto::materials::TextureData;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureChanged.Data)
  return Property_.data_;
}
::atom::proto::materials::TextureData* TextureChanged::release_data() {
  if (has_data()) {
    clear_has_Property();
    ::atom::proto::materials::TextureData* temp = Property_.data_;
    Property_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TextureChanged::set_allocated_data(::atom::proto::materials::TextureData* data) {
  clear_Property();
  if (data) {
    set_has_data();
    Property_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureChanged.Data)
}

// optional .atom.proto.Vector2 TranslateFrame = 3;
bool TextureChanged::has_translateframe() const {
  return Property_case() == kTranslateFrame;
}
void TextureChanged::set_has_translateframe() {
  _oneof_case_[0] = kTranslateFrame;
}
void TextureChanged::clear_translateframe() {
  if (has_translateframe()) {
    delete Property_.translateframe_;
    clear_has_Property();
  }
}
 const ::atom::proto::Vector2& TextureChanged::translateframe() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.TranslateFrame)
  return has_translateframe()
      ? *Property_.translateframe_
      : ::atom::proto::Vector2::default_instance();
}
::atom::proto::Vector2* TextureChanged::mutable_translateframe() {
  if (!has_translateframe()) {
    clear_Property();
    set_has_translateframe();
    Property_.translateframe_ = new ::atom::proto::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureChanged.TranslateFrame)
  return Property_.translateframe_;
}
::atom::proto::Vector2* TextureChanged::release_translateframe() {
  if (has_translateframe()) {
    clear_has_Property();
    ::atom::proto::Vector2* temp = Property_.translateframe_;
    Property_.translateframe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TextureChanged::set_allocated_translateframe(::atom::proto::Vector2* translateframe) {
  clear_Property();
  if (translateframe) {
    set_has_translateframe();
    Property_.translateframe_ = translateframe;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureChanged.TranslateFrame)
}

// optional float RotateFrame = 4;
bool TextureChanged::has_rotateframe() const {
  return Property_case() == kRotateFrame;
}
void TextureChanged::set_has_rotateframe() {
  _oneof_case_[0] = kRotateFrame;
}
void TextureChanged::clear_rotateframe() {
  if (has_rotateframe()) {
    Property_.rotateframe_ = 0;
    clear_has_Property();
  }
}
 float TextureChanged::rotateframe() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.RotateFrame)
  if (has_rotateframe()) {
    return Property_.rotateframe_;
  }
  return 0;
}
 void TextureChanged::set_rotateframe(float value) {
  if (!has_rotateframe()) {
    clear_Property();
    set_has_rotateframe();
  }
  Property_.rotateframe_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.RotateFrame)
}

// optional bool MirrorU = 5;
bool TextureChanged::has_mirroru() const {
  return Property_case() == kMirrorU;
}
void TextureChanged::set_has_mirroru() {
  _oneof_case_[0] = kMirrorU;
}
void TextureChanged::clear_mirroru() {
  if (has_mirroru()) {
    Property_.mirroru_ = false;
    clear_has_Property();
  }
}
 bool TextureChanged::mirroru() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.MirrorU)
  if (has_mirroru()) {
    return Property_.mirroru_;
  }
  return false;
}
 void TextureChanged::set_mirroru(bool value) {
  if (!has_mirroru()) {
    clear_Property();
    set_has_mirroru();
  }
  Property_.mirroru_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.MirrorU)
}

// optional bool MirrorV = 6;
bool TextureChanged::has_mirrorv() const {
  return Property_case() == kMirrorV;
}
void TextureChanged::set_has_mirrorv() {
  _oneof_case_[0] = kMirrorV;
}
void TextureChanged::clear_mirrorv() {
  if (has_mirrorv()) {
    Property_.mirrorv_ = false;
    clear_has_Property();
  }
}
 bool TextureChanged::mirrorv() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.MirrorV)
  if (has_mirrorv()) {
    return Property_.mirrorv_;
  }
  return false;
}
 void TextureChanged::set_mirrorv(bool value) {
  if (!has_mirrorv()) {
    clear_Property();
    set_has_mirrorv();
  }
  Property_.mirrorv_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.MirrorV)
}

// optional bool WrapU = 7;
bool TextureChanged::has_wrapu() const {
  return Property_case() == kWrapU;
}
void TextureChanged::set_has_wrapu() {
  _oneof_case_[0] = kWrapU;
}
void TextureChanged::clear_wrapu() {
  if (has_wrapu()) {
    Property_.wrapu_ = false;
    clear_has_Property();
  }
}
 bool TextureChanged::wrapu() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.WrapU)
  if (has_wrapu()) {
    return Property_.wrapu_;
  }
  return false;
}
 void TextureChanged::set_wrapu(bool value) {
  if (!has_wrapu()) {
    clear_Property();
    set_has_wrapu();
  }
  Property_.wrapu_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.WrapU)
}

// optional bool wrapV = 8;
bool TextureChanged::has_wrapv() const {
  return Property_case() == kWrapV;
}
void TextureChanged::set_has_wrapv() {
  _oneof_case_[0] = kWrapV;
}
void TextureChanged::clear_wrapv() {
  if (has_wrapv()) {
    Property_.wrapv_ = false;
    clear_has_Property();
  }
}
 bool TextureChanged::wrapv() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.wrapV)
  if (has_wrapv()) {
    return Property_.wrapv_;
  }
  return false;
}
 void TextureChanged::set_wrapv(bool value) {
  if (!has_wrapv()) {
    clear_Property();
    set_has_wrapv();
  }
  Property_.wrapv_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.wrapV)
}

// optional .atom.proto.Vector2 Repeat = 9;
bool TextureChanged::has_repeat() const {
  return Property_case() == kRepeat;
}
void TextureChanged::set_has_repeat() {
  _oneof_case_[0] = kRepeat;
}
void TextureChanged::clear_repeat() {
  if (has_repeat()) {
    delete Property_.repeat_;
    clear_has_Property();
  }
}
 const ::atom::proto::Vector2& TextureChanged::repeat() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.Repeat)
  return has_repeat()
      ? *Property_.repeat_
      : ::atom::proto::Vector2::default_instance();
}
::atom::proto::Vector2* TextureChanged::mutable_repeat() {
  if (!has_repeat()) {
    clear_Property();
    set_has_repeat();
    Property_.repeat_ = new ::atom::proto::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureChanged.Repeat)
  return Property_.repeat_;
}
::atom::proto::Vector2* TextureChanged::release_repeat() {
  if (has_repeat()) {
    clear_has_Property();
    ::atom::proto::Vector2* temp = Property_.repeat_;
    Property_.repeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TextureChanged::set_allocated_repeat(::atom::proto::Vector2* repeat) {
  clear_Property();
  if (repeat) {
    set_has_repeat();
    Property_.repeat_ = repeat;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureChanged.Repeat)
}

// optional .atom.proto.Vector2 Offset = 10;
bool TextureChanged::has_offset() const {
  return Property_case() == kOffset;
}
void TextureChanged::set_has_offset() {
  _oneof_case_[0] = kOffset;
}
void TextureChanged::clear_offset() {
  if (has_offset()) {
    delete Property_.offset_;
    clear_has_Property();
  }
}
 const ::atom::proto::Vector2& TextureChanged::offset() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.Offset)
  return has_offset()
      ? *Property_.offset_
      : ::atom::proto::Vector2::default_instance();
}
::atom::proto::Vector2* TextureChanged::mutable_offset() {
  if (!has_offset()) {
    clear_Property();
    set_has_offset();
    Property_.offset_ = new ::atom::proto::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureChanged.Offset)
  return Property_.offset_;
}
::atom::proto::Vector2* TextureChanged::release_offset() {
  if (has_offset()) {
    clear_has_Property();
    ::atom::proto::Vector2* temp = Property_.offset_;
    Property_.offset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TextureChanged::set_allocated_offset(::atom::proto::Vector2* offset) {
  clear_Property();
  if (offset) {
    set_has_offset();
    Property_.offset_ = offset;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureChanged.Offset)
}

// optional float Rotate = 11;
bool TextureChanged::has_rotate() const {
  return Property_case() == kRotate;
}
void TextureChanged::set_has_rotate() {
  _oneof_case_[0] = kRotate;
}
void TextureChanged::clear_rotate() {
  if (has_rotate()) {
    Property_.rotate_ = 0;
    clear_has_Property();
  }
}
 float TextureChanged::rotate() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.Rotate)
  if (has_rotate()) {
    return Property_.rotate_;
  }
  return 0;
}
 void TextureChanged::set_rotate(float value) {
  if (!has_rotate()) {
    clear_Property();
    set_has_rotate();
  }
  Property_.rotate_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureChanged.Rotate)
}

// optional .atom.proto.Vector2 Noise = 12;
bool TextureChanged::has_noise() const {
  return Property_case() == kNoise;
}
void TextureChanged::set_has_noise() {
  _oneof_case_[0] = kNoise;
}
void TextureChanged::clear_noise() {
  if (has_noise()) {
    delete Property_.noise_;
    clear_has_Property();
  }
}
 const ::atom::proto::Vector2& TextureChanged::noise() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureChanged.Noise)
  return has_noise()
      ? *Property_.noise_
      : ::atom::proto::Vector2::default_instance();
}
::atom::proto::Vector2* TextureChanged::mutable_noise() {
  if (!has_noise()) {
    clear_Property();
    set_has_noise();
    Property_.noise_ = new ::atom::proto::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureChanged.Noise)
  return Property_.noise_;
}
::atom::proto::Vector2* TextureChanged::release_noise() {
  if (has_noise()) {
    clear_has_Property();
    ::atom::proto::Vector2* temp = Property_.noise_;
    Property_.noise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TextureChanged::set_allocated_noise(::atom::proto::Vector2* noise) {
  clear_Property();
  if (noise) {
    set_has_noise();
    Property_.noise_ = noise;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureChanged.Noise)
}

bool TextureChanged::has_Property() const {
  return Property_case() != PROPERTY_NOT_SET;
}
void TextureChanged::clear_has_Property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
TextureChanged::PropertyCase TextureChanged::Property_case() const {
  return TextureChanged::PropertyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
