// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/TextureData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "materials/TextureData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

namespace {

const ::google::protobuf::Descriptor* TextureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextureData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_materials_2fTextureData_2eproto() {
  protobuf_AddDesc_materials_2fTextureData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "materials/TextureData.proto");
  GOOGLE_CHECK(file != NULL);
  TextureData_descriptor_ = file->message_type(0);
  static const int TextureData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, bytes_),
  };
  TextureData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextureData_descriptor_,
      TextureData::default_instance_,
      TextureData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TextureData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_materials_2fTextureData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextureData_descriptor_, &TextureData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_materials_2fTextureData_2eproto() {
  delete TextureData::default_instance_;
  delete TextureData_reflection_;
}

void protobuf_AddDesc_materials_2fTextureData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033materials/TextureData.proto\022\024atom.prot"
    "o.materials\"A\n\013TextureData\022\020\n\010Filename\030\001"
    " \001(\t\022\021\n\tExtension\030\002 \001(\t\022\r\n\005Bytes\030\003 \001(\014b\006"
    "proto3", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "materials/TextureData.proto", &protobuf_RegisterTypes);
  TextureData::default_instance_ = new TextureData();
  TextureData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_materials_2fTextureData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_materials_2fTextureData_2eproto {
  StaticDescriptorInitializer_materials_2fTextureData_2eproto() {
    protobuf_AddDesc_materials_2fTextureData_2eproto();
  }
} static_descriptor_initializer_materials_2fTextureData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextureData::kFilenameFieldNumber;
const int TextureData::kExtensionFieldNumber;
const int TextureData::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextureData::TextureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.materials.TextureData)
}

void TextureData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TextureData::TextureData(const TextureData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.materials.TextureData)
}

void TextureData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TextureData::~TextureData() {
  // @@protoc_insertion_point(destructor:atom.proto.materials.TextureData)
  SharedDtor();
}

void TextureData::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TextureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextureData_descriptor_;
}

const TextureData& TextureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_materials_2fTextureData_2eproto();
  return *default_instance_;
}

TextureData* TextureData::default_instance_ = NULL;

TextureData* TextureData::New(::google::protobuf::Arena* arena) const {
  TextureData* n = new TextureData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextureData::Clear() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TextureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.materials.TextureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.TextureData.Filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Extension;
        break;
      }

      // optional string Extension = 2;
      case 2: {
        if (tag == 18) {
         parse_Extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extension().data(), this->extension().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.TextureData.Extension"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Bytes;
        break;
      }

      // optional bytes Bytes = 3;
      case 3: {
        if (tag == 26) {
         parse_Bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.materials.TextureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.materials.TextureData)
  return false;
#undef DO_
}

void TextureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.materials.TextureData)
  // optional string Filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TextureData.Filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional string Extension = 2;
  if (this->extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TextureData.Extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension(), output);
  }

  // optional bytes Bytes = 3;
  if (this->bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.materials.TextureData)
}

::google::protobuf::uint8* TextureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.materials.TextureData)
  // optional string Filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TextureData.Filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional string Extension = 2;
  if (this->extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.TextureData.Extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extension(), target);
  }

  // optional bytes Bytes = 3;
  if (this->bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.materials.TextureData)
  return target;
}

int TextureData::ByteSize() const {
  int total_size = 0;

  // optional string Filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // optional string Extension = 2;
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension());
  }

  // optional bytes Bytes = 3;
  if (this->bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextureData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TextureData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TextureData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextureData::MergeFrom(const TextureData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  if (from.bytes().size() > 0) {

    bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_);
  }
}

void TextureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureData::CopyFrom(const TextureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureData::IsInitialized() const {

  return true;
}

void TextureData::Swap(TextureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextureData::InternalSwap(TextureData* other) {
  filename_.Swap(&other->filename_);
  extension_.Swap(&other->extension_);
  bytes_.Swap(&other->bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextureData_descriptor_;
  metadata.reflection = TextureData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextureData

// optional string Filename = 1;
void TextureData::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TextureData::filename() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureData.Filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureData::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureData.Filename)
}
 void TextureData::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.TextureData.Filename)
}
 void TextureData::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.TextureData.Filename)
}
 ::std::string* TextureData::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureData.Filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TextureData::release_filename() {
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureData::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureData.Filename)
}

// optional string Extension = 2;
void TextureData::clear_extension() {
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TextureData::extension() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureData.Extension)
  return extension_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureData::set_extension(const ::std::string& value) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureData.Extension)
}
 void TextureData::set_extension(const char* value) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.TextureData.Extension)
}
 void TextureData::set_extension(const char* value, size_t size) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.TextureData.Extension)
}
 ::std::string* TextureData::mutable_extension() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureData.Extension)
  return extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TextureData::release_extension() {
  
  return extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureData::set_allocated_extension(::std::string* extension) {
  if (extension != NULL) {
    
  } else {
    
  }
  extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureData.Extension)
}

// optional bytes Bytes = 3;
void TextureData::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TextureData::bytes() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TextureData.Bytes)
  return bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureData::set_bytes(const ::std::string& value) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.TextureData.Bytes)
}
 void TextureData::set_bytes(const char* value) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.TextureData.Bytes)
}
 void TextureData::set_bytes(const void* value, size_t size) {
  
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.TextureData.Bytes)
}
 ::std::string* TextureData::mutable_bytes() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TextureData.Bytes)
  return bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TextureData::release_bytes() {
  
  return bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextureData::set_allocated_bytes(::std::string* bytes) {
  if (bytes != NULL) {
    
  } else {
    
  }
  bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TextureData.Bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
