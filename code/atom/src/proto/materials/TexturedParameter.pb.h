// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/TexturedParameter.proto

#ifndef PROTOBUF_materials_2fTexturedParameter_2eproto__INCLUDED
#define PROTOBUF_materials_2fTexturedParameter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Color.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
void protobuf_AssignDesc_materials_2fTexturedParameter_2eproto();
void protobuf_ShutdownFile_materials_2fTexturedParameter_2eproto();

class TexturedParameter;

// ===================================================================

class TexturedParameter : public ::google::protobuf::Message {
 public:
  TexturedParameter();
  virtual ~TexturedParameter();

  TexturedParameter(const TexturedParameter& from);

  inline TexturedParameter& operator=(const TexturedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexturedParameter& default_instance();

  enum ParameterCase {
    kAsFloat = 2,
    kAsColor = 3,
    PARAMETER_NOT_SET = 0,
  };

  void Swap(TexturedParameter* other);

  // implements Message ----------------------------------------------

  inline TexturedParameter* New() const { return New(NULL); }

  TexturedParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TexturedParameter& from);
  void MergeFrom(const TexturedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexturedParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Texture = 1;
  void clear_texture();
  static const int kTextureFieldNumber = 1;
  const ::std::string& texture() const;
  void set_texture(const ::std::string& value);
  void set_texture(const char* value);
  void set_texture(const char* value, size_t size);
  ::std::string* mutable_texture();
  ::std::string* release_texture();
  void set_allocated_texture(::std::string* texture);

  // optional float AsFloat = 2;
  private:
  bool has_asfloat() const;
  public:
  void clear_asfloat();
  static const int kAsFloatFieldNumber = 2;
  float asfloat() const;
  void set_asfloat(float value);

  // optional .atom.proto.Color AsColor = 3;
  bool has_ascolor() const;
  void clear_ascolor();
  static const int kAsColorFieldNumber = 3;
  const ::atom::proto::Color& ascolor() const;
  ::atom::proto::Color* mutable_ascolor();
  ::atom::proto::Color* release_ascolor();
  void set_allocated_ascolor(::atom::proto::Color* ascolor);

  ParameterCase Parameter_case() const;
  // @@protoc_insertion_point(class_scope:atom.proto.materials.TexturedParameter)
 private:
  inline void set_has_asfloat();
  inline void set_has_ascolor();

  inline bool has_Parameter() const;
  void clear_Parameter();
  inline void clear_has_Parameter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr texture_;
  union ParameterUnion {
    ParameterUnion() {}
    float asfloat_;
    ::atom::proto::Color* ascolor_;
  } Parameter_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
  friend void protobuf_AssignDesc_materials_2fTexturedParameter_2eproto();
  friend void protobuf_ShutdownFile_materials_2fTexturedParameter_2eproto();

  void InitAsDefaultInstance();
  static TexturedParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TexturedParameter

// optional string Texture = 1;
inline void TexturedParameter::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TexturedParameter::texture() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TexturedParameter.Texture)
  return texture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexturedParameter::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.TexturedParameter.Texture)
}
inline void TexturedParameter::set_texture(const char* value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.TexturedParameter.Texture)
}
inline void TexturedParameter::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.TexturedParameter.Texture)
}
inline ::std::string* TexturedParameter::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TexturedParameter.Texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TexturedParameter::release_texture() {
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TexturedParameter::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TexturedParameter.Texture)
}

// optional float AsFloat = 2;
inline bool TexturedParameter::has_asfloat() const {
  return Parameter_case() == kAsFloat;
}
inline void TexturedParameter::set_has_asfloat() {
  _oneof_case_[0] = kAsFloat;
}
inline void TexturedParameter::clear_asfloat() {
  if (has_asfloat()) {
    Parameter_.asfloat_ = 0;
    clear_has_Parameter();
  }
}
inline float TexturedParameter::asfloat() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TexturedParameter.AsFloat)
  if (has_asfloat()) {
    return Parameter_.asfloat_;
  }
  return 0;
}
inline void TexturedParameter::set_asfloat(float value) {
  if (!has_asfloat()) {
    clear_Parameter();
    set_has_asfloat();
  }
  Parameter_.asfloat_ = value;
  // @@protoc_insertion_point(field_set:atom.proto.materials.TexturedParameter.AsFloat)
}

// optional .atom.proto.Color AsColor = 3;
inline bool TexturedParameter::has_ascolor() const {
  return Parameter_case() == kAsColor;
}
inline void TexturedParameter::set_has_ascolor() {
  _oneof_case_[0] = kAsColor;
}
inline void TexturedParameter::clear_ascolor() {
  if (has_ascolor()) {
    delete Parameter_.ascolor_;
    clear_has_Parameter();
  }
}
inline  const ::atom::proto::Color& TexturedParameter::ascolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.TexturedParameter.AsColor)
  return has_ascolor()
      ? *Parameter_.ascolor_
      : ::atom::proto::Color::default_instance();
}
inline ::atom::proto::Color* TexturedParameter::mutable_ascolor() {
  if (!has_ascolor()) {
    clear_Parameter();
    set_has_ascolor();
    Parameter_.ascolor_ = new ::atom::proto::Color;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.TexturedParameter.AsColor)
  return Parameter_.ascolor_;
}
inline ::atom::proto::Color* TexturedParameter::release_ascolor() {
  if (has_ascolor()) {
    clear_has_Parameter();
    ::atom::proto::Color* temp = Parameter_.ascolor_;
    Parameter_.ascolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TexturedParameter::set_allocated_ascolor(::atom::proto::Color* ascolor) {
  clear_Parameter();
  if (ascolor) {
    set_has_ascolor();
    Parameter_.ascolor_ = ascolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.TexturedParameter.AsColor)
}

inline bool TexturedParameter::has_Parameter() const {
  return Parameter_case() != PARAMETER_NOT_SET;
}
inline void TexturedParameter::clear_has_Parameter() {
  _oneof_case_[0] = PARAMETER_NOT_SET;
}
inline TexturedParameter::ParameterCase TexturedParameter::Parameter_case() const {
  return TexturedParameter::ParameterCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_materials_2fTexturedParameter_2eproto__INCLUDED
