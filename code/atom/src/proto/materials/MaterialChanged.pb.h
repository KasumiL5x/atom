// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/MaterialChanged.proto

#ifndef PROTOBUF_materials_2fMaterialChanged_2eproto__INCLUDED
#define PROTOBUF_materials_2fMaterialChanged_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "materials/TexturedParameter.pb.h"
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_materials_2fMaterialChanged_2eproto();
void protobuf_AssignDesc_materials_2fMaterialChanged_2eproto();
void protobuf_ShutdownFile_materials_2fMaterialChanged_2eproto();

class MaterialChanged;

// ===================================================================

class MaterialChanged : public ::google::protobuf::Message {
 public:
  MaterialChanged();
  virtual ~MaterialChanged();

  MaterialChanged(const MaterialChanged& from);

  inline MaterialChanged& operator=(const MaterialChanged& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialChanged& default_instance();

  enum PropertyCase {
    kColor = 2,
    kTransparency = 3,
    kAmbientColor = 4,
    kIncandescence = 5,
    kBumpMap = 6,
    kDiffuseAmount = 7,
    kTranslucence = 8,
    kTranslucenceDepth = 9,
    kTranslucenceFocus = 10,
    kGlowIntensity = 11,
    kSpecularColor = 12,
    kReflectivity = 13,
    kReflectedColor = 14,
    kRoughness = 15,
    kCosinePower = 16,
    kHighlightSize = 17,
    kWhiteness = 18,
    kEccentricity = 19,
    kSpecularRollOff = 20,
    kAngle = 21,
    kSpreadX = 22,
    kSpreadY = 23,
    kFresnelIndex = 24,
    PROPERTY_NOT_SET = 0,
  };

  void Swap(MaterialChanged* other);

  // implements Message ----------------------------------------------

  inline MaterialChanged* New() const { return New(NULL); }

  MaterialChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialChanged& from);
  void MergeFrom(const MaterialChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MaterialChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MaterialName = 1;
  void clear_materialname();
  static const int kMaterialNameFieldNumber = 1;
  const ::std::string& materialname() const;
  void set_materialname(const ::std::string& value);
  void set_materialname(const char* value);
  void set_materialname(const char* value, size_t size);
  ::std::string* mutable_materialname();
  ::std::string* release_materialname();
  void set_allocated_materialname(::std::string* materialname);

  // optional .atom.proto.materials.TexturedParameter Color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::atom::proto::materials::TexturedParameter& color() const;
  ::atom::proto::materials::TexturedParameter* mutable_color();
  ::atom::proto::materials::TexturedParameter* release_color();
  void set_allocated_color(::atom::proto::materials::TexturedParameter* color);

  // optional .atom.proto.materials.TexturedParameter Transparency = 3;
  bool has_transparency() const;
  void clear_transparency();
  static const int kTransparencyFieldNumber = 3;
  const ::atom::proto::materials::TexturedParameter& transparency() const;
  ::atom::proto::materials::TexturedParameter* mutable_transparency();
  ::atom::proto::materials::TexturedParameter* release_transparency();
  void set_allocated_transparency(::atom::proto::materials::TexturedParameter* transparency);

  // optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
  bool has_ambientcolor() const;
  void clear_ambientcolor();
  static const int kAmbientColorFieldNumber = 4;
  const ::atom::proto::materials::TexturedParameter& ambientcolor() const;
  ::atom::proto::materials::TexturedParameter* mutable_ambientcolor();
  ::atom::proto::materials::TexturedParameter* release_ambientcolor();
  void set_allocated_ambientcolor(::atom::proto::materials::TexturedParameter* ambientcolor);

  // optional .atom.proto.materials.TexturedParameter Incandescence = 5;
  bool has_incandescence() const;
  void clear_incandescence();
  static const int kIncandescenceFieldNumber = 5;
  const ::atom::proto::materials::TexturedParameter& incandescence() const;
  ::atom::proto::materials::TexturedParameter* mutable_incandescence();
  ::atom::proto::materials::TexturedParameter* release_incandescence();
  void set_allocated_incandescence(::atom::proto::materials::TexturedParameter* incandescence);

  // optional string BumpMap = 6;
  private:
  bool has_bumpmap() const;
  public:
  void clear_bumpmap();
  static const int kBumpMapFieldNumber = 6;
  const ::std::string& bumpmap() const;
  void set_bumpmap(const ::std::string& value);
  void set_bumpmap(const char* value);
  void set_bumpmap(const char* value, size_t size);
  ::std::string* mutable_bumpmap();
  ::std::string* release_bumpmap();
  void set_allocated_bumpmap(::std::string* bumpmap);

  // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
  bool has_diffuseamount() const;
  void clear_diffuseamount();
  static const int kDiffuseAmountFieldNumber = 7;
  const ::atom::proto::materials::TexturedParameter& diffuseamount() const;
  ::atom::proto::materials::TexturedParameter* mutable_diffuseamount();
  ::atom::proto::materials::TexturedParameter* release_diffuseamount();
  void set_allocated_diffuseamount(::atom::proto::materials::TexturedParameter* diffuseamount);

  // optional .atom.proto.materials.TexturedParameter Translucence = 8;
  bool has_translucence() const;
  void clear_translucence();
  static const int kTranslucenceFieldNumber = 8;
  const ::atom::proto::materials::TexturedParameter& translucence() const;
  ::atom::proto::materials::TexturedParameter* mutable_translucence();
  ::atom::proto::materials::TexturedParameter* release_translucence();
  void set_allocated_translucence(::atom::proto::materials::TexturedParameter* translucence);

  // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
  bool has_translucencedepth() const;
  void clear_translucencedepth();
  static const int kTranslucenceDepthFieldNumber = 9;
  const ::atom::proto::materials::TexturedParameter& translucencedepth() const;
  ::atom::proto::materials::TexturedParameter* mutable_translucencedepth();
  ::atom::proto::materials::TexturedParameter* release_translucencedepth();
  void set_allocated_translucencedepth(::atom::proto::materials::TexturedParameter* translucencedepth);

  // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
  bool has_translucencefocus() const;
  void clear_translucencefocus();
  static const int kTranslucenceFocusFieldNumber = 10;
  const ::atom::proto::materials::TexturedParameter& translucencefocus() const;
  ::atom::proto::materials::TexturedParameter* mutable_translucencefocus();
  ::atom::proto::materials::TexturedParameter* release_translucencefocus();
  void set_allocated_translucencefocus(::atom::proto::materials::TexturedParameter* translucencefocus);

  // optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
  bool has_glowintensity() const;
  void clear_glowintensity();
  static const int kGlowIntensityFieldNumber = 11;
  const ::atom::proto::materials::TexturedParameter& glowintensity() const;
  ::atom::proto::materials::TexturedParameter* mutable_glowintensity();
  ::atom::proto::materials::TexturedParameter* release_glowintensity();
  void set_allocated_glowintensity(::atom::proto::materials::TexturedParameter* glowintensity);

  // optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
  bool has_specularcolor() const;
  void clear_specularcolor();
  static const int kSpecularColorFieldNumber = 12;
  const ::atom::proto::materials::TexturedParameter& specularcolor() const;
  ::atom::proto::materials::TexturedParameter* mutable_specularcolor();
  ::atom::proto::materials::TexturedParameter* release_specularcolor();
  void set_allocated_specularcolor(::atom::proto::materials::TexturedParameter* specularcolor);

  // optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
  bool has_reflectivity() const;
  void clear_reflectivity();
  static const int kReflectivityFieldNumber = 13;
  const ::atom::proto::materials::TexturedParameter& reflectivity() const;
  ::atom::proto::materials::TexturedParameter* mutable_reflectivity();
  ::atom::proto::materials::TexturedParameter* release_reflectivity();
  void set_allocated_reflectivity(::atom::proto::materials::TexturedParameter* reflectivity);

  // optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
  bool has_reflectedcolor() const;
  void clear_reflectedcolor();
  static const int kReflectedColorFieldNumber = 14;
  const ::atom::proto::materials::TexturedParameter& reflectedcolor() const;
  ::atom::proto::materials::TexturedParameter* mutable_reflectedcolor();
  ::atom::proto::materials::TexturedParameter* release_reflectedcolor();
  void set_allocated_reflectedcolor(::atom::proto::materials::TexturedParameter* reflectedcolor);

  // optional .atom.proto.materials.TexturedParameter Roughness = 15;
  bool has_roughness() const;
  void clear_roughness();
  static const int kRoughnessFieldNumber = 15;
  const ::atom::proto::materials::TexturedParameter& roughness() const;
  ::atom::proto::materials::TexturedParameter* mutable_roughness();
  ::atom::proto::materials::TexturedParameter* release_roughness();
  void set_allocated_roughness(::atom::proto::materials::TexturedParameter* roughness);

  // optional .atom.proto.materials.TexturedParameter CosinePower = 16;
  bool has_cosinepower() const;
  void clear_cosinepower();
  static const int kCosinePowerFieldNumber = 16;
  const ::atom::proto::materials::TexturedParameter& cosinepower() const;
  ::atom::proto::materials::TexturedParameter* mutable_cosinepower();
  ::atom::proto::materials::TexturedParameter* release_cosinepower();
  void set_allocated_cosinepower(::atom::proto::materials::TexturedParameter* cosinepower);

  // optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
  bool has_highlightsize() const;
  void clear_highlightsize();
  static const int kHighlightSizeFieldNumber = 17;
  const ::atom::proto::materials::TexturedParameter& highlightsize() const;
  ::atom::proto::materials::TexturedParameter* mutable_highlightsize();
  ::atom::proto::materials::TexturedParameter* release_highlightsize();
  void set_allocated_highlightsize(::atom::proto::materials::TexturedParameter* highlightsize);

  // optional .atom.proto.materials.TexturedParameter Whiteness = 18;
  bool has_whiteness() const;
  void clear_whiteness();
  static const int kWhitenessFieldNumber = 18;
  const ::atom::proto::materials::TexturedParameter& whiteness() const;
  ::atom::proto::materials::TexturedParameter* mutable_whiteness();
  ::atom::proto::materials::TexturedParameter* release_whiteness();
  void set_allocated_whiteness(::atom::proto::materials::TexturedParameter* whiteness);

  // optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
  bool has_eccentricity() const;
  void clear_eccentricity();
  static const int kEccentricityFieldNumber = 19;
  const ::atom::proto::materials::TexturedParameter& eccentricity() const;
  ::atom::proto::materials::TexturedParameter* mutable_eccentricity();
  ::atom::proto::materials::TexturedParameter* release_eccentricity();
  void set_allocated_eccentricity(::atom::proto::materials::TexturedParameter* eccentricity);

  // optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
  bool has_specularrolloff() const;
  void clear_specularrolloff();
  static const int kSpecularRollOffFieldNumber = 20;
  const ::atom::proto::materials::TexturedParameter& specularrolloff() const;
  ::atom::proto::materials::TexturedParameter* mutable_specularrolloff();
  ::atom::proto::materials::TexturedParameter* release_specularrolloff();
  void set_allocated_specularrolloff(::atom::proto::materials::TexturedParameter* specularrolloff);

  // optional .atom.proto.materials.TexturedParameter Angle = 21;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 21;
  const ::atom::proto::materials::TexturedParameter& angle() const;
  ::atom::proto::materials::TexturedParameter* mutable_angle();
  ::atom::proto::materials::TexturedParameter* release_angle();
  void set_allocated_angle(::atom::proto::materials::TexturedParameter* angle);

  // optional .atom.proto.materials.TexturedParameter SpreadX = 22;
  bool has_spreadx() const;
  void clear_spreadx();
  static const int kSpreadXFieldNumber = 22;
  const ::atom::proto::materials::TexturedParameter& spreadx() const;
  ::atom::proto::materials::TexturedParameter* mutable_spreadx();
  ::atom::proto::materials::TexturedParameter* release_spreadx();
  void set_allocated_spreadx(::atom::proto::materials::TexturedParameter* spreadx);

  // optional .atom.proto.materials.TexturedParameter SpreadY = 23;
  bool has_spready() const;
  void clear_spready();
  static const int kSpreadYFieldNumber = 23;
  const ::atom::proto::materials::TexturedParameter& spready() const;
  ::atom::proto::materials::TexturedParameter* mutable_spready();
  ::atom::proto::materials::TexturedParameter* release_spready();
  void set_allocated_spready(::atom::proto::materials::TexturedParameter* spready);

  // optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
  bool has_fresnelindex() const;
  void clear_fresnelindex();
  static const int kFresnelIndexFieldNumber = 24;
  const ::atom::proto::materials::TexturedParameter& fresnelindex() const;
  ::atom::proto::materials::TexturedParameter* mutable_fresnelindex();
  ::atom::proto::materials::TexturedParameter* release_fresnelindex();
  void set_allocated_fresnelindex(::atom::proto::materials::TexturedParameter* fresnelindex);

  PropertyCase Property_case() const;
  // @@protoc_insertion_point(class_scope:atom.proto.materials.MaterialChanged)
 private:
  inline void set_has_color();
  inline void set_has_transparency();
  inline void set_has_ambientcolor();
  inline void set_has_incandescence();
  inline void set_has_bumpmap();
  inline void set_has_diffuseamount();
  inline void set_has_translucence();
  inline void set_has_translucencedepth();
  inline void set_has_translucencefocus();
  inline void set_has_glowintensity();
  inline void set_has_specularcolor();
  inline void set_has_reflectivity();
  inline void set_has_reflectedcolor();
  inline void set_has_roughness();
  inline void set_has_cosinepower();
  inline void set_has_highlightsize();
  inline void set_has_whiteness();
  inline void set_has_eccentricity();
  inline void set_has_specularrolloff();
  inline void set_has_angle();
  inline void set_has_spreadx();
  inline void set_has_spready();
  inline void set_has_fresnelindex();

  inline bool has_Property() const;
  void clear_Property();
  inline void clear_has_Property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr materialname_;
  union PropertyUnion {
    PropertyUnion() {}
    ::atom::proto::materials::TexturedParameter* color_;
    ::atom::proto::materials::TexturedParameter* transparency_;
    ::atom::proto::materials::TexturedParameter* ambientcolor_;
    ::atom::proto::materials::TexturedParameter* incandescence_;
    ::google::protobuf::internal::ArenaStringPtr bumpmap_;
    ::atom::proto::materials::TexturedParameter* diffuseamount_;
    ::atom::proto::materials::TexturedParameter* translucence_;
    ::atom::proto::materials::TexturedParameter* translucencedepth_;
    ::atom::proto::materials::TexturedParameter* translucencefocus_;
    ::atom::proto::materials::TexturedParameter* glowintensity_;
    ::atom::proto::materials::TexturedParameter* specularcolor_;
    ::atom::proto::materials::TexturedParameter* reflectivity_;
    ::atom::proto::materials::TexturedParameter* reflectedcolor_;
    ::atom::proto::materials::TexturedParameter* roughness_;
    ::atom::proto::materials::TexturedParameter* cosinepower_;
    ::atom::proto::materials::TexturedParameter* highlightsize_;
    ::atom::proto::materials::TexturedParameter* whiteness_;
    ::atom::proto::materials::TexturedParameter* eccentricity_;
    ::atom::proto::materials::TexturedParameter* specularrolloff_;
    ::atom::proto::materials::TexturedParameter* angle_;
    ::atom::proto::materials::TexturedParameter* spreadx_;
    ::atom::proto::materials::TexturedParameter* spready_;
    ::atom::proto::materials::TexturedParameter* fresnelindex_;
  } Property_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_materials_2fMaterialChanged_2eproto();
  friend void protobuf_AssignDesc_materials_2fMaterialChanged_2eproto();
  friend void protobuf_ShutdownFile_materials_2fMaterialChanged_2eproto();

  void InitAsDefaultInstance();
  static MaterialChanged* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialChanged

// optional string MaterialName = 1;
inline void MaterialChanged::clear_materialname() {
  materialname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MaterialChanged::materialname() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.MaterialName)
  return materialname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MaterialChanged::set_materialname(const ::std::string& value) {
  
  materialname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.MaterialChanged.MaterialName)
}
inline void MaterialChanged::set_materialname(const char* value) {
  
  materialname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.MaterialChanged.MaterialName)
}
inline void MaterialChanged::set_materialname(const char* value, size_t size) {
  
  materialname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.MaterialChanged.MaterialName)
}
inline ::std::string* MaterialChanged::mutable_materialname() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.MaterialName)
  return materialname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MaterialChanged::release_materialname() {
  
  return materialname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MaterialChanged::set_allocated_materialname(::std::string* materialname) {
  if (materialname != NULL) {
    
  } else {
    
  }
  materialname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), materialname);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.MaterialName)
}

// optional .atom.proto.materials.TexturedParameter Color = 2;
inline bool MaterialChanged::has_color() const {
  return Property_case() == kColor;
}
inline void MaterialChanged::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void MaterialChanged::clear_color() {
  if (has_color()) {
    delete Property_.color_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Color)
  return has_color()
      ? *Property_.color_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_color() {
  if (!has_color()) {
    clear_Property();
    set_has_color();
    Property_.color_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Color)
  return Property_.color_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_color() {
  if (has_color()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.color_;
    Property_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_color(::atom::proto::materials::TexturedParameter* color) {
  clear_Property();
  if (color) {
    set_has_color();
    Property_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Color)
}

// optional .atom.proto.materials.TexturedParameter Transparency = 3;
inline bool MaterialChanged::has_transparency() const {
  return Property_case() == kTransparency;
}
inline void MaterialChanged::set_has_transparency() {
  _oneof_case_[0] = kTransparency;
}
inline void MaterialChanged::clear_transparency() {
  if (has_transparency()) {
    delete Property_.transparency_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::transparency() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Transparency)
  return has_transparency()
      ? *Property_.transparency_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_transparency() {
  if (!has_transparency()) {
    clear_Property();
    set_has_transparency();
    Property_.transparency_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Transparency)
  return Property_.transparency_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_transparency() {
  if (has_transparency()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.transparency_;
    Property_.transparency_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_transparency(::atom::proto::materials::TexturedParameter* transparency) {
  clear_Property();
  if (transparency) {
    set_has_transparency();
    Property_.transparency_ = transparency;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Transparency)
}

// optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
inline bool MaterialChanged::has_ambientcolor() const {
  return Property_case() == kAmbientColor;
}
inline void MaterialChanged::set_has_ambientcolor() {
  _oneof_case_[0] = kAmbientColor;
}
inline void MaterialChanged::clear_ambientcolor() {
  if (has_ambientcolor()) {
    delete Property_.ambientcolor_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::ambientcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.AmbientColor)
  return has_ambientcolor()
      ? *Property_.ambientcolor_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_ambientcolor() {
  if (!has_ambientcolor()) {
    clear_Property();
    set_has_ambientcolor();
    Property_.ambientcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.AmbientColor)
  return Property_.ambientcolor_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_ambientcolor() {
  if (has_ambientcolor()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.ambientcolor_;
    Property_.ambientcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_ambientcolor(::atom::proto::materials::TexturedParameter* ambientcolor) {
  clear_Property();
  if (ambientcolor) {
    set_has_ambientcolor();
    Property_.ambientcolor_ = ambientcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.AmbientColor)
}

// optional .atom.proto.materials.TexturedParameter Incandescence = 5;
inline bool MaterialChanged::has_incandescence() const {
  return Property_case() == kIncandescence;
}
inline void MaterialChanged::set_has_incandescence() {
  _oneof_case_[0] = kIncandescence;
}
inline void MaterialChanged::clear_incandescence() {
  if (has_incandescence()) {
    delete Property_.incandescence_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::incandescence() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Incandescence)
  return has_incandescence()
      ? *Property_.incandescence_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_incandescence() {
  if (!has_incandescence()) {
    clear_Property();
    set_has_incandescence();
    Property_.incandescence_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Incandescence)
  return Property_.incandescence_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_incandescence() {
  if (has_incandescence()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.incandescence_;
    Property_.incandescence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_incandescence(::atom::proto::materials::TexturedParameter* incandescence) {
  clear_Property();
  if (incandescence) {
    set_has_incandescence();
    Property_.incandescence_ = incandescence;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Incandescence)
}

// optional string BumpMap = 6;
inline bool MaterialChanged::has_bumpmap() const {
  return Property_case() == kBumpMap;
}
inline void MaterialChanged::set_has_bumpmap() {
  _oneof_case_[0] = kBumpMap;
}
inline void MaterialChanged::clear_bumpmap() {
  if (has_bumpmap()) {
    Property_.bumpmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Property();
  }
}
inline const ::std::string& MaterialChanged::bumpmap() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.BumpMap)
  if (has_bumpmap()) {
    return Property_.bumpmap_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void MaterialChanged::set_bumpmap(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:atom.proto.materials.MaterialChanged.BumpMap)
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Property_.bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.MaterialChanged.BumpMap)
}
inline void MaterialChanged::set_bumpmap(const char* value) {
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Property_.bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.MaterialChanged.BumpMap)
}
inline void MaterialChanged::set_bumpmap(const char* value, size_t size) {
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Property_.bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.MaterialChanged.BumpMap)
}
inline ::std::string* MaterialChanged::mutable_bumpmap() {
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.BumpMap)
  return Property_.bumpmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MaterialChanged::release_bumpmap() {
  if (has_bumpmap()) {
    clear_has_Property();
    return Property_.bumpmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_bumpmap(::std::string* bumpmap) {
  if (!has_bumpmap()) {
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Property();
  if (bumpmap != NULL) {
    set_has_bumpmap();
    Property_.bumpmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bumpmap);
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.BumpMap)
}

// optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
inline bool MaterialChanged::has_diffuseamount() const {
  return Property_case() == kDiffuseAmount;
}
inline void MaterialChanged::set_has_diffuseamount() {
  _oneof_case_[0] = kDiffuseAmount;
}
inline void MaterialChanged::clear_diffuseamount() {
  if (has_diffuseamount()) {
    delete Property_.diffuseamount_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::diffuseamount() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.DiffuseAmount)
  return has_diffuseamount()
      ? *Property_.diffuseamount_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_diffuseamount() {
  if (!has_diffuseamount()) {
    clear_Property();
    set_has_diffuseamount();
    Property_.diffuseamount_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.DiffuseAmount)
  return Property_.diffuseamount_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_diffuseamount() {
  if (has_diffuseamount()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.diffuseamount_;
    Property_.diffuseamount_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_diffuseamount(::atom::proto::materials::TexturedParameter* diffuseamount) {
  clear_Property();
  if (diffuseamount) {
    set_has_diffuseamount();
    Property_.diffuseamount_ = diffuseamount;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.DiffuseAmount)
}

// optional .atom.proto.materials.TexturedParameter Translucence = 8;
inline bool MaterialChanged::has_translucence() const {
  return Property_case() == kTranslucence;
}
inline void MaterialChanged::set_has_translucence() {
  _oneof_case_[0] = kTranslucence;
}
inline void MaterialChanged::clear_translucence() {
  if (has_translucence()) {
    delete Property_.translucence_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::translucence() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Translucence)
  return has_translucence()
      ? *Property_.translucence_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_translucence() {
  if (!has_translucence()) {
    clear_Property();
    set_has_translucence();
    Property_.translucence_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Translucence)
  return Property_.translucence_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_translucence() {
  if (has_translucence()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.translucence_;
    Property_.translucence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_translucence(::atom::proto::materials::TexturedParameter* translucence) {
  clear_Property();
  if (translucence) {
    set_has_translucence();
    Property_.translucence_ = translucence;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Translucence)
}

// optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
inline bool MaterialChanged::has_translucencedepth() const {
  return Property_case() == kTranslucenceDepth;
}
inline void MaterialChanged::set_has_translucencedepth() {
  _oneof_case_[0] = kTranslucenceDepth;
}
inline void MaterialChanged::clear_translucencedepth() {
  if (has_translucencedepth()) {
    delete Property_.translucencedepth_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::translucencedepth() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.TranslucenceDepth)
  return has_translucencedepth()
      ? *Property_.translucencedepth_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_translucencedepth() {
  if (!has_translucencedepth()) {
    clear_Property();
    set_has_translucencedepth();
    Property_.translucencedepth_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.TranslucenceDepth)
  return Property_.translucencedepth_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_translucencedepth() {
  if (has_translucencedepth()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.translucencedepth_;
    Property_.translucencedepth_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_translucencedepth(::atom::proto::materials::TexturedParameter* translucencedepth) {
  clear_Property();
  if (translucencedepth) {
    set_has_translucencedepth();
    Property_.translucencedepth_ = translucencedepth;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.TranslucenceDepth)
}

// optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
inline bool MaterialChanged::has_translucencefocus() const {
  return Property_case() == kTranslucenceFocus;
}
inline void MaterialChanged::set_has_translucencefocus() {
  _oneof_case_[0] = kTranslucenceFocus;
}
inline void MaterialChanged::clear_translucencefocus() {
  if (has_translucencefocus()) {
    delete Property_.translucencefocus_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::translucencefocus() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.TranslucenceFocus)
  return has_translucencefocus()
      ? *Property_.translucencefocus_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_translucencefocus() {
  if (!has_translucencefocus()) {
    clear_Property();
    set_has_translucencefocus();
    Property_.translucencefocus_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.TranslucenceFocus)
  return Property_.translucencefocus_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_translucencefocus() {
  if (has_translucencefocus()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.translucencefocus_;
    Property_.translucencefocus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_translucencefocus(::atom::proto::materials::TexturedParameter* translucencefocus) {
  clear_Property();
  if (translucencefocus) {
    set_has_translucencefocus();
    Property_.translucencefocus_ = translucencefocus;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.TranslucenceFocus)
}

// optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
inline bool MaterialChanged::has_glowintensity() const {
  return Property_case() == kGlowIntensity;
}
inline void MaterialChanged::set_has_glowintensity() {
  _oneof_case_[0] = kGlowIntensity;
}
inline void MaterialChanged::clear_glowintensity() {
  if (has_glowintensity()) {
    delete Property_.glowintensity_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::glowintensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.GlowIntensity)
  return has_glowintensity()
      ? *Property_.glowintensity_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_glowintensity() {
  if (!has_glowintensity()) {
    clear_Property();
    set_has_glowintensity();
    Property_.glowintensity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.GlowIntensity)
  return Property_.glowintensity_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_glowintensity() {
  if (has_glowintensity()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.glowintensity_;
    Property_.glowintensity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_glowintensity(::atom::proto::materials::TexturedParameter* glowintensity) {
  clear_Property();
  if (glowintensity) {
    set_has_glowintensity();
    Property_.glowintensity_ = glowintensity;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.GlowIntensity)
}

// optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
inline bool MaterialChanged::has_specularcolor() const {
  return Property_case() == kSpecularColor;
}
inline void MaterialChanged::set_has_specularcolor() {
  _oneof_case_[0] = kSpecularColor;
}
inline void MaterialChanged::clear_specularcolor() {
  if (has_specularcolor()) {
    delete Property_.specularcolor_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::specularcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpecularColor)
  return has_specularcolor()
      ? *Property_.specularcolor_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_specularcolor() {
  if (!has_specularcolor()) {
    clear_Property();
    set_has_specularcolor();
    Property_.specularcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpecularColor)
  return Property_.specularcolor_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_specularcolor() {
  if (has_specularcolor()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.specularcolor_;
    Property_.specularcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_specularcolor(::atom::proto::materials::TexturedParameter* specularcolor) {
  clear_Property();
  if (specularcolor) {
    set_has_specularcolor();
    Property_.specularcolor_ = specularcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpecularColor)
}

// optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
inline bool MaterialChanged::has_reflectivity() const {
  return Property_case() == kReflectivity;
}
inline void MaterialChanged::set_has_reflectivity() {
  _oneof_case_[0] = kReflectivity;
}
inline void MaterialChanged::clear_reflectivity() {
  if (has_reflectivity()) {
    delete Property_.reflectivity_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::reflectivity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Reflectivity)
  return has_reflectivity()
      ? *Property_.reflectivity_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_reflectivity() {
  if (!has_reflectivity()) {
    clear_Property();
    set_has_reflectivity();
    Property_.reflectivity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Reflectivity)
  return Property_.reflectivity_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_reflectivity() {
  if (has_reflectivity()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.reflectivity_;
    Property_.reflectivity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_reflectivity(::atom::proto::materials::TexturedParameter* reflectivity) {
  clear_Property();
  if (reflectivity) {
    set_has_reflectivity();
    Property_.reflectivity_ = reflectivity;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Reflectivity)
}

// optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
inline bool MaterialChanged::has_reflectedcolor() const {
  return Property_case() == kReflectedColor;
}
inline void MaterialChanged::set_has_reflectedcolor() {
  _oneof_case_[0] = kReflectedColor;
}
inline void MaterialChanged::clear_reflectedcolor() {
  if (has_reflectedcolor()) {
    delete Property_.reflectedcolor_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::reflectedcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.ReflectedColor)
  return has_reflectedcolor()
      ? *Property_.reflectedcolor_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_reflectedcolor() {
  if (!has_reflectedcolor()) {
    clear_Property();
    set_has_reflectedcolor();
    Property_.reflectedcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.ReflectedColor)
  return Property_.reflectedcolor_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_reflectedcolor() {
  if (has_reflectedcolor()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.reflectedcolor_;
    Property_.reflectedcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_reflectedcolor(::atom::proto::materials::TexturedParameter* reflectedcolor) {
  clear_Property();
  if (reflectedcolor) {
    set_has_reflectedcolor();
    Property_.reflectedcolor_ = reflectedcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.ReflectedColor)
}

// optional .atom.proto.materials.TexturedParameter Roughness = 15;
inline bool MaterialChanged::has_roughness() const {
  return Property_case() == kRoughness;
}
inline void MaterialChanged::set_has_roughness() {
  _oneof_case_[0] = kRoughness;
}
inline void MaterialChanged::clear_roughness() {
  if (has_roughness()) {
    delete Property_.roughness_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::roughness() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Roughness)
  return has_roughness()
      ? *Property_.roughness_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_roughness() {
  if (!has_roughness()) {
    clear_Property();
    set_has_roughness();
    Property_.roughness_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Roughness)
  return Property_.roughness_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_roughness() {
  if (has_roughness()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.roughness_;
    Property_.roughness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_roughness(::atom::proto::materials::TexturedParameter* roughness) {
  clear_Property();
  if (roughness) {
    set_has_roughness();
    Property_.roughness_ = roughness;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Roughness)
}

// optional .atom.proto.materials.TexturedParameter CosinePower = 16;
inline bool MaterialChanged::has_cosinepower() const {
  return Property_case() == kCosinePower;
}
inline void MaterialChanged::set_has_cosinepower() {
  _oneof_case_[0] = kCosinePower;
}
inline void MaterialChanged::clear_cosinepower() {
  if (has_cosinepower()) {
    delete Property_.cosinepower_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::cosinepower() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.CosinePower)
  return has_cosinepower()
      ? *Property_.cosinepower_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_cosinepower() {
  if (!has_cosinepower()) {
    clear_Property();
    set_has_cosinepower();
    Property_.cosinepower_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.CosinePower)
  return Property_.cosinepower_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_cosinepower() {
  if (has_cosinepower()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.cosinepower_;
    Property_.cosinepower_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_cosinepower(::atom::proto::materials::TexturedParameter* cosinepower) {
  clear_Property();
  if (cosinepower) {
    set_has_cosinepower();
    Property_.cosinepower_ = cosinepower;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.CosinePower)
}

// optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
inline bool MaterialChanged::has_highlightsize() const {
  return Property_case() == kHighlightSize;
}
inline void MaterialChanged::set_has_highlightsize() {
  _oneof_case_[0] = kHighlightSize;
}
inline void MaterialChanged::clear_highlightsize() {
  if (has_highlightsize()) {
    delete Property_.highlightsize_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::highlightsize() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.HighlightSize)
  return has_highlightsize()
      ? *Property_.highlightsize_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_highlightsize() {
  if (!has_highlightsize()) {
    clear_Property();
    set_has_highlightsize();
    Property_.highlightsize_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.HighlightSize)
  return Property_.highlightsize_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_highlightsize() {
  if (has_highlightsize()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.highlightsize_;
    Property_.highlightsize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_highlightsize(::atom::proto::materials::TexturedParameter* highlightsize) {
  clear_Property();
  if (highlightsize) {
    set_has_highlightsize();
    Property_.highlightsize_ = highlightsize;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.HighlightSize)
}

// optional .atom.proto.materials.TexturedParameter Whiteness = 18;
inline bool MaterialChanged::has_whiteness() const {
  return Property_case() == kWhiteness;
}
inline void MaterialChanged::set_has_whiteness() {
  _oneof_case_[0] = kWhiteness;
}
inline void MaterialChanged::clear_whiteness() {
  if (has_whiteness()) {
    delete Property_.whiteness_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::whiteness() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Whiteness)
  return has_whiteness()
      ? *Property_.whiteness_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_whiteness() {
  if (!has_whiteness()) {
    clear_Property();
    set_has_whiteness();
    Property_.whiteness_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Whiteness)
  return Property_.whiteness_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_whiteness() {
  if (has_whiteness()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.whiteness_;
    Property_.whiteness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_whiteness(::atom::proto::materials::TexturedParameter* whiteness) {
  clear_Property();
  if (whiteness) {
    set_has_whiteness();
    Property_.whiteness_ = whiteness;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Whiteness)
}

// optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
inline bool MaterialChanged::has_eccentricity() const {
  return Property_case() == kEccentricity;
}
inline void MaterialChanged::set_has_eccentricity() {
  _oneof_case_[0] = kEccentricity;
}
inline void MaterialChanged::clear_eccentricity() {
  if (has_eccentricity()) {
    delete Property_.eccentricity_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::eccentricity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Eccentricity)
  return has_eccentricity()
      ? *Property_.eccentricity_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_eccentricity() {
  if (!has_eccentricity()) {
    clear_Property();
    set_has_eccentricity();
    Property_.eccentricity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Eccentricity)
  return Property_.eccentricity_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_eccentricity() {
  if (has_eccentricity()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.eccentricity_;
    Property_.eccentricity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_eccentricity(::atom::proto::materials::TexturedParameter* eccentricity) {
  clear_Property();
  if (eccentricity) {
    set_has_eccentricity();
    Property_.eccentricity_ = eccentricity;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Eccentricity)
}

// optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
inline bool MaterialChanged::has_specularrolloff() const {
  return Property_case() == kSpecularRollOff;
}
inline void MaterialChanged::set_has_specularrolloff() {
  _oneof_case_[0] = kSpecularRollOff;
}
inline void MaterialChanged::clear_specularrolloff() {
  if (has_specularrolloff()) {
    delete Property_.specularrolloff_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::specularrolloff() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpecularRollOff)
  return has_specularrolloff()
      ? *Property_.specularrolloff_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_specularrolloff() {
  if (!has_specularrolloff()) {
    clear_Property();
    set_has_specularrolloff();
    Property_.specularrolloff_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpecularRollOff)
  return Property_.specularrolloff_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_specularrolloff() {
  if (has_specularrolloff()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.specularrolloff_;
    Property_.specularrolloff_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_specularrolloff(::atom::proto::materials::TexturedParameter* specularrolloff) {
  clear_Property();
  if (specularrolloff) {
    set_has_specularrolloff();
    Property_.specularrolloff_ = specularrolloff;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpecularRollOff)
}

// optional .atom.proto.materials.TexturedParameter Angle = 21;
inline bool MaterialChanged::has_angle() const {
  return Property_case() == kAngle;
}
inline void MaterialChanged::set_has_angle() {
  _oneof_case_[0] = kAngle;
}
inline void MaterialChanged::clear_angle() {
  if (has_angle()) {
    delete Property_.angle_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::angle() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Angle)
  return has_angle()
      ? *Property_.angle_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_angle() {
  if (!has_angle()) {
    clear_Property();
    set_has_angle();
    Property_.angle_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Angle)
  return Property_.angle_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_angle() {
  if (has_angle()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.angle_;
    Property_.angle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_angle(::atom::proto::materials::TexturedParameter* angle) {
  clear_Property();
  if (angle) {
    set_has_angle();
    Property_.angle_ = angle;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Angle)
}

// optional .atom.proto.materials.TexturedParameter SpreadX = 22;
inline bool MaterialChanged::has_spreadx() const {
  return Property_case() == kSpreadX;
}
inline void MaterialChanged::set_has_spreadx() {
  _oneof_case_[0] = kSpreadX;
}
inline void MaterialChanged::clear_spreadx() {
  if (has_spreadx()) {
    delete Property_.spreadx_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::spreadx() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpreadX)
  return has_spreadx()
      ? *Property_.spreadx_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_spreadx() {
  if (!has_spreadx()) {
    clear_Property();
    set_has_spreadx();
    Property_.spreadx_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpreadX)
  return Property_.spreadx_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_spreadx() {
  if (has_spreadx()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.spreadx_;
    Property_.spreadx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_spreadx(::atom::proto::materials::TexturedParameter* spreadx) {
  clear_Property();
  if (spreadx) {
    set_has_spreadx();
    Property_.spreadx_ = spreadx;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpreadX)
}

// optional .atom.proto.materials.TexturedParameter SpreadY = 23;
inline bool MaterialChanged::has_spready() const {
  return Property_case() == kSpreadY;
}
inline void MaterialChanged::set_has_spready() {
  _oneof_case_[0] = kSpreadY;
}
inline void MaterialChanged::clear_spready() {
  if (has_spready()) {
    delete Property_.spready_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::spready() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpreadY)
  return has_spready()
      ? *Property_.spready_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_spready() {
  if (!has_spready()) {
    clear_Property();
    set_has_spready();
    Property_.spready_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpreadY)
  return Property_.spready_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_spready() {
  if (has_spready()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.spready_;
    Property_.spready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_spready(::atom::proto::materials::TexturedParameter* spready) {
  clear_Property();
  if (spready) {
    set_has_spready();
    Property_.spready_ = spready;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpreadY)
}

// optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
inline bool MaterialChanged::has_fresnelindex() const {
  return Property_case() == kFresnelIndex;
}
inline void MaterialChanged::set_has_fresnelindex() {
  _oneof_case_[0] = kFresnelIndex;
}
inline void MaterialChanged::clear_fresnelindex() {
  if (has_fresnelindex()) {
    delete Property_.fresnelindex_;
    clear_has_Property();
  }
}
inline  const ::atom::proto::materials::TexturedParameter& MaterialChanged::fresnelindex() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.FresnelIndex)
  return has_fresnelindex()
      ? *Property_.fresnelindex_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_fresnelindex() {
  if (!has_fresnelindex()) {
    clear_Property();
    set_has_fresnelindex();
    Property_.fresnelindex_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.FresnelIndex)
  return Property_.fresnelindex_;
}
inline ::atom::proto::materials::TexturedParameter* MaterialChanged::release_fresnelindex() {
  if (has_fresnelindex()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.fresnelindex_;
    Property_.fresnelindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MaterialChanged::set_allocated_fresnelindex(::atom::proto::materials::TexturedParameter* fresnelindex) {
  clear_Property();
  if (fresnelindex) {
    set_has_fresnelindex();
    Property_.fresnelindex_ = fresnelindex;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.FresnelIndex)
}

inline bool MaterialChanged::has_Property() const {
  return Property_case() != PROPERTY_NOT_SET;
}
inline void MaterialChanged::clear_has_Property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline MaterialChanged::PropertyCase MaterialChanged::Property_case() const {
  return MaterialChanged::PropertyCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_materials_2fMaterialChanged_2eproto__INCLUDED
