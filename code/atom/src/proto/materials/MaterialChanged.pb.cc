// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: materials/MaterialChanged.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "materials/MaterialChanged.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atom {
namespace proto {
namespace materials {

namespace {

const ::google::protobuf::Descriptor* MaterialChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialChanged_reflection_ = NULL;
struct MaterialChangedOneofInstance {
  const ::atom::proto::materials::TexturedParameter* color_;
  const ::atom::proto::materials::TexturedParameter* transparency_;
  const ::atom::proto::materials::TexturedParameter* ambientcolor_;
  const ::atom::proto::materials::TexturedParameter* incandescence_;
  ::google::protobuf::internal::ArenaStringPtr bumpmap_;
  const ::atom::proto::materials::TexturedParameter* diffuseamount_;
  const ::atom::proto::materials::TexturedParameter* translucence_;
  const ::atom::proto::materials::TexturedParameter* translucencedepth_;
  const ::atom::proto::materials::TexturedParameter* translucencefocus_;
  const ::atom::proto::materials::TexturedParameter* glowintensity_;
  const ::atom::proto::materials::TexturedParameter* specularcolor_;
  const ::atom::proto::materials::TexturedParameter* reflectivity_;
  const ::atom::proto::materials::TexturedParameter* reflectedcolor_;
  const ::atom::proto::materials::TexturedParameter* roughness_;
  const ::atom::proto::materials::TexturedParameter* cosinepower_;
  const ::atom::proto::materials::TexturedParameter* highlightsize_;
  const ::atom::proto::materials::TexturedParameter* whiteness_;
  const ::atom::proto::materials::TexturedParameter* eccentricity_;
  const ::atom::proto::materials::TexturedParameter* specularrolloff_;
  const ::atom::proto::materials::TexturedParameter* angle_;
  const ::atom::proto::materials::TexturedParameter* spreadx_;
  const ::atom::proto::materials::TexturedParameter* spready_;
  const ::atom::proto::materials::TexturedParameter* fresnelindex_;
}* MaterialChanged_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_materials_2fMaterialChanged_2eproto() {
  protobuf_AddDesc_materials_2fMaterialChanged_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "materials/MaterialChanged.proto");
  GOOGLE_CHECK(file != NULL);
  MaterialChanged_descriptor_ = file->message_type(0);
  static const int MaterialChanged_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialChanged, materialname_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, color_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, transparency_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, ambientcolor_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, incandescence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, bumpmap_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, diffuseamount_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, translucence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, translucencedepth_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, translucencefocus_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, glowintensity_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, specularcolor_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, reflectivity_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, reflectedcolor_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, roughness_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, cosinepower_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, highlightsize_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, whiteness_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, eccentricity_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, specularrolloff_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, angle_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, spreadx_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, spready_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MaterialChanged_default_oneof_instance_, fresnelindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialChanged, Property_),
  };
  MaterialChanged_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaterialChanged_descriptor_,
      MaterialChanged::default_instance_,
      MaterialChanged_offsets_,
      -1,
      -1,
      -1,
      MaterialChanged_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialChanged, _oneof_case_[0]),
      sizeof(MaterialChanged),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialChanged, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialChanged, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_materials_2fMaterialChanged_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaterialChanged_descriptor_, &MaterialChanged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_materials_2fMaterialChanged_2eproto() {
  delete MaterialChanged::default_instance_;
  delete MaterialChanged_default_oneof_instance_;
  delete MaterialChanged_reflection_;
}

void protobuf_AddDesc_materials_2fMaterialChanged_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::atom::proto::materials::protobuf_AddDesc_materials_2fTexturedParameter_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037materials/MaterialChanged.proto\022\024atom."
    "proto.materials\032!materials/TexturedParam"
    "eter.proto\"\321\013\n\017MaterialChanged\022\024\n\014Materi"
    "alName\030\001 \001(\t\0228\n\005Color\030\002 \001(\0132\'.atom.proto"
    ".materials.TexturedParameterH\000\022\?\n\014Transp"
    "arency\030\003 \001(\0132\'.atom.proto.materials.Text"
    "uredParameterH\000\022\?\n\014AmbientColor\030\004 \001(\0132\'."
    "atom.proto.materials.TexturedParameterH\000"
    "\022@\n\rIncandescence\030\005 \001(\0132\'.atom.proto.mat"
    "erials.TexturedParameterH\000\022\021\n\007BumpMap\030\006 "
    "\001(\tH\000\022@\n\rDiffuseAmount\030\007 \001(\0132\'.atom.prot"
    "o.materials.TexturedParameterH\000\022\?\n\014Trans"
    "lucence\030\010 \001(\0132\'.atom.proto.materials.Tex"
    "turedParameterH\000\022D\n\021TranslucenceDepth\030\t "
    "\001(\0132\'.atom.proto.materials.TexturedParam"
    "eterH\000\022D\n\021TranslucenceFocus\030\n \001(\0132\'.atom"
    ".proto.materials.TexturedParameterH\000\022@\n\r"
    "GlowIntensity\030\013 \001(\0132\'.atom.proto.materia"
    "ls.TexturedParameterH\000\022@\n\rSpecularColor\030"
    "\014 \001(\0132\'.atom.proto.materials.TexturedPar"
    "ameterH\000\022\?\n\014Reflectivity\030\r \001(\0132\'.atom.pr"
    "oto.materials.TexturedParameterH\000\022A\n\016Ref"
    "lectedColor\030\016 \001(\0132\'.atom.proto.materials"
    ".TexturedParameterH\000\022<\n\tRoughness\030\017 \001(\0132"
    "\'.atom.proto.materials.TexturedParameter"
    "H\000\022>\n\013CosinePower\030\020 \001(\0132\'.atom.proto.mat"
    "erials.TexturedParameterH\000\022@\n\rHighlightS"
    "ize\030\021 \001(\0132\'.atom.proto.materials.Texture"
    "dParameterH\000\022<\n\tWhiteness\030\022 \001(\0132\'.atom.p"
    "roto.materials.TexturedParameterH\000\022\?\n\014Ec"
    "centricity\030\023 \001(\0132\'.atom.proto.materials."
    "TexturedParameterH\000\022B\n\017SpecularRollOff\030\024"
    " \001(\0132\'.atom.proto.materials.TexturedPara"
    "meterH\000\0228\n\005Angle\030\025 \001(\0132\'.atom.proto.mate"
    "rials.TexturedParameterH\000\022:\n\007SpreadX\030\026 \001"
    "(\0132\'.atom.proto.materials.TexturedParame"
    "terH\000\022:\n\007SpreadY\030\027 \001(\0132\'.atom.proto.mate"
    "rials.TexturedParameterH\000\022\?\n\014FresnelInde"
    "x\030\030 \001(\0132\'.atom.proto.materials.TexturedP"
    "arameterH\000B\n\n\010Propertyb\006proto3", 1590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "materials/MaterialChanged.proto", &protobuf_RegisterTypes);
  MaterialChanged::default_instance_ = new MaterialChanged();
  MaterialChanged_default_oneof_instance_ = new MaterialChangedOneofInstance();
  MaterialChanged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_materials_2fMaterialChanged_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_materials_2fMaterialChanged_2eproto {
  StaticDescriptorInitializer_materials_2fMaterialChanged_2eproto() {
    protobuf_AddDesc_materials_2fMaterialChanged_2eproto();
  }
} static_descriptor_initializer_materials_2fMaterialChanged_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialChanged::kMaterialNameFieldNumber;
const int MaterialChanged::kColorFieldNumber;
const int MaterialChanged::kTransparencyFieldNumber;
const int MaterialChanged::kAmbientColorFieldNumber;
const int MaterialChanged::kIncandescenceFieldNumber;
const int MaterialChanged::kBumpMapFieldNumber;
const int MaterialChanged::kDiffuseAmountFieldNumber;
const int MaterialChanged::kTranslucenceFieldNumber;
const int MaterialChanged::kTranslucenceDepthFieldNumber;
const int MaterialChanged::kTranslucenceFocusFieldNumber;
const int MaterialChanged::kGlowIntensityFieldNumber;
const int MaterialChanged::kSpecularColorFieldNumber;
const int MaterialChanged::kReflectivityFieldNumber;
const int MaterialChanged::kReflectedColorFieldNumber;
const int MaterialChanged::kRoughnessFieldNumber;
const int MaterialChanged::kCosinePowerFieldNumber;
const int MaterialChanged::kHighlightSizeFieldNumber;
const int MaterialChanged::kWhitenessFieldNumber;
const int MaterialChanged::kEccentricityFieldNumber;
const int MaterialChanged::kSpecularRollOffFieldNumber;
const int MaterialChanged::kAngleFieldNumber;
const int MaterialChanged::kSpreadXFieldNumber;
const int MaterialChanged::kSpreadYFieldNumber;
const int MaterialChanged::kFresnelIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialChanged::MaterialChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:atom.proto.materials.MaterialChanged)
}

void MaterialChanged::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MaterialChanged_default_oneof_instance_->color_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->transparency_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->ambientcolor_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->incandescence_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  MaterialChanged_default_oneof_instance_->diffuseamount_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->translucence_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->translucencedepth_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->translucencefocus_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->glowintensity_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->specularcolor_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->reflectivity_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->reflectedcolor_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->roughness_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->cosinepower_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->highlightsize_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->whiteness_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->eccentricity_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->specularrolloff_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->angle_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->spreadx_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->spready_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
  MaterialChanged_default_oneof_instance_->fresnelindex_ = const_cast< ::atom::proto::materials::TexturedParameter*>(&::atom::proto::materials::TexturedParameter::default_instance());
}

MaterialChanged::MaterialChanged(const MaterialChanged& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:atom.proto.materials.MaterialChanged)
}

void MaterialChanged::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  materialname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_Property();
}

MaterialChanged::~MaterialChanged() {
  // @@protoc_insertion_point(destructor:atom.proto.materials.MaterialChanged)
  SharedDtor();
}

void MaterialChanged::SharedDtor() {
  materialname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Property()) {
    clear_Property();
  }
  if (this != default_instance_) {
  }
}

void MaterialChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialChanged_descriptor_;
}

const MaterialChanged& MaterialChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_materials_2fMaterialChanged_2eproto();
  return *default_instance_;
}

MaterialChanged* MaterialChanged::default_instance_ = NULL;

MaterialChanged* MaterialChanged::New(::google::protobuf::Arena* arena) const {
  MaterialChanged* n = new MaterialChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialChanged::clear_Property() {
  switch(Property_case()) {
    case kColor: {
      delete Property_.color_;
      break;
    }
    case kTransparency: {
      delete Property_.transparency_;
      break;
    }
    case kAmbientColor: {
      delete Property_.ambientcolor_;
      break;
    }
    case kIncandescence: {
      delete Property_.incandescence_;
      break;
    }
    case kBumpMap: {
      Property_.bumpmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDiffuseAmount: {
      delete Property_.diffuseamount_;
      break;
    }
    case kTranslucence: {
      delete Property_.translucence_;
      break;
    }
    case kTranslucenceDepth: {
      delete Property_.translucencedepth_;
      break;
    }
    case kTranslucenceFocus: {
      delete Property_.translucencefocus_;
      break;
    }
    case kGlowIntensity: {
      delete Property_.glowintensity_;
      break;
    }
    case kSpecularColor: {
      delete Property_.specularcolor_;
      break;
    }
    case kReflectivity: {
      delete Property_.reflectivity_;
      break;
    }
    case kReflectedColor: {
      delete Property_.reflectedcolor_;
      break;
    }
    case kRoughness: {
      delete Property_.roughness_;
      break;
    }
    case kCosinePower: {
      delete Property_.cosinepower_;
      break;
    }
    case kHighlightSize: {
      delete Property_.highlightsize_;
      break;
    }
    case kWhiteness: {
      delete Property_.whiteness_;
      break;
    }
    case kEccentricity: {
      delete Property_.eccentricity_;
      break;
    }
    case kSpecularRollOff: {
      delete Property_.specularrolloff_;
      break;
    }
    case kAngle: {
      delete Property_.angle_;
      break;
    }
    case kSpreadX: {
      delete Property_.spreadx_;
      break;
    }
    case kSpreadY: {
      delete Property_.spready_;
      break;
    }
    case kFresnelIndex: {
      delete Property_.fresnelindex_;
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void MaterialChanged::Clear() {
  materialname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_Property();
}

bool MaterialChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atom.proto.materials.MaterialChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MaterialName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->materialname().data(), this->materialname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.MaterialChanged.MaterialName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Color;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Color = 2;
      case 2: {
        if (tag == 18) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Transparency;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Transparency = 3;
      case 3: {
        if (tag == 26) {
         parse_Transparency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transparency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AmbientColor;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
      case 4: {
        if (tag == 34) {
         parse_AmbientColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambientcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Incandescence;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Incandescence = 5;
      case 5: {
        if (tag == 42) {
         parse_Incandescence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_incandescence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BumpMap;
        break;
      }

      // optional string BumpMap = 6;
      case 6: {
        if (tag == 50) {
         parse_BumpMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bumpmap()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bumpmap().data(), this->bumpmap().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "atom.proto.materials.MaterialChanged.BumpMap"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DiffuseAmount;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
      case 7: {
        if (tag == 58) {
         parse_DiffuseAmount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuseamount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Translucence;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Translucence = 8;
      case 8: {
        if (tag == 66) {
         parse_Translucence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translucence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TranslucenceDepth;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
      case 9: {
        if (tag == 74) {
         parse_TranslucenceDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translucencedepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_TranslucenceFocus;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
      case 10: {
        if (tag == 82) {
         parse_TranslucenceFocus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translucencefocus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_GlowIntensity;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
      case 11: {
        if (tag == 90) {
         parse_GlowIntensity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glowintensity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_SpecularColor;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
      case 12: {
        if (tag == 98) {
         parse_SpecularColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specularcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Reflectivity;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
      case 13: {
        if (tag == 106) {
         parse_Reflectivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reflectivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ReflectedColor;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
      case 14: {
        if (tag == 114) {
         parse_ReflectedColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reflectedcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Roughness;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Roughness = 15;
      case 15: {
        if (tag == 122) {
         parse_Roughness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roughness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_CosinePower;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter CosinePower = 16;
      case 16: {
        if (tag == 130) {
         parse_CosinePower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cosinepower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_HighlightSize;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
      case 17: {
        if (tag == 138) {
         parse_HighlightSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highlightsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_Whiteness;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Whiteness = 18;
      case 18: {
        if (tag == 146) {
         parse_Whiteness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whiteness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_Eccentricity;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
      case 19: {
        if (tag == 154) {
         parse_Eccentricity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eccentricity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_SpecularRollOff;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
      case 20: {
        if (tag == 162) {
         parse_SpecularRollOff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specularrolloff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_Angle;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter Angle = 21;
      case 21: {
        if (tag == 170) {
         parse_Angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_SpreadX;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter SpreadX = 22;
      case 22: {
        if (tag == 178) {
         parse_SpreadX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spreadx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_SpreadY;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter SpreadY = 23;
      case 23: {
        if (tag == 186) {
         parse_SpreadY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spready()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_FresnelIndex;
        break;
      }

      // optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
      case 24: {
        if (tag == 194) {
         parse_FresnelIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fresnelindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atom.proto.materials.MaterialChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atom.proto.materials.MaterialChanged)
  return false;
#undef DO_
}

void MaterialChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atom.proto.materials.MaterialChanged)
  // optional string MaterialName = 1;
  if (this->materialname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.MaterialChanged.MaterialName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->materialname(), output);
  }

  // optional .atom.proto.materials.TexturedParameter Color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Property_.color_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Transparency = 3;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *Property_.transparency_, output);
  }

  // optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
  if (has_ambientcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *Property_.ambientcolor_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Incandescence = 5;
  if (has_incandescence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *Property_.incandescence_, output);
  }

  // optional string BumpMap = 6;
  if (has_bumpmap()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumpmap().data(), this->bumpmap().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.MaterialChanged.BumpMap");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bumpmap(), output);
  }

  // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
  if (has_diffuseamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *Property_.diffuseamount_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Translucence = 8;
  if (has_translucence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *Property_.translucence_, output);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
  if (has_translucencedepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *Property_.translucencedepth_, output);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
  if (has_translucencefocus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *Property_.translucencefocus_, output);
  }

  // optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
  if (has_glowintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *Property_.glowintensity_, output);
  }

  // optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
  if (has_specularcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *Property_.specularcolor_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
  if (has_reflectivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *Property_.reflectivity_, output);
  }

  // optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
  if (has_reflectedcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *Property_.reflectedcolor_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Roughness = 15;
  if (has_roughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *Property_.roughness_, output);
  }

  // optional .atom.proto.materials.TexturedParameter CosinePower = 16;
  if (has_cosinepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *Property_.cosinepower_, output);
  }

  // optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
  if (has_highlightsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *Property_.highlightsize_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Whiteness = 18;
  if (has_whiteness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *Property_.whiteness_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
  if (has_eccentricity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *Property_.eccentricity_, output);
  }

  // optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
  if (has_specularrolloff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *Property_.specularrolloff_, output);
  }

  // optional .atom.proto.materials.TexturedParameter Angle = 21;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *Property_.angle_, output);
  }

  // optional .atom.proto.materials.TexturedParameter SpreadX = 22;
  if (has_spreadx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *Property_.spreadx_, output);
  }

  // optional .atom.proto.materials.TexturedParameter SpreadY = 23;
  if (has_spready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *Property_.spready_, output);
  }

  // optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
  if (has_fresnelindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *Property_.fresnelindex_, output);
  }

  // @@protoc_insertion_point(serialize_end:atom.proto.materials.MaterialChanged)
}

::google::protobuf::uint8* MaterialChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atom.proto.materials.MaterialChanged)
  // optional string MaterialName = 1;
  if (this->materialname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.MaterialChanged.MaterialName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->materialname(), target);
  }

  // optional .atom.proto.materials.TexturedParameter Color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *Property_.color_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Transparency = 3;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *Property_.transparency_, target);
  }

  // optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
  if (has_ambientcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *Property_.ambientcolor_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Incandescence = 5;
  if (has_incandescence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *Property_.incandescence_, target);
  }

  // optional string BumpMap = 6;
  if (has_bumpmap()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumpmap().data(), this->bumpmap().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "atom.proto.materials.MaterialChanged.BumpMap");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bumpmap(), target);
  }

  // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
  if (has_diffuseamount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *Property_.diffuseamount_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Translucence = 8;
  if (has_translucence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *Property_.translucence_, target);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
  if (has_translucencedepth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *Property_.translucencedepth_, target);
  }

  // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
  if (has_translucencefocus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *Property_.translucencefocus_, target);
  }

  // optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
  if (has_glowintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *Property_.glowintensity_, target);
  }

  // optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
  if (has_specularcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *Property_.specularcolor_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
  if (has_reflectivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *Property_.reflectivity_, target);
  }

  // optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
  if (has_reflectedcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *Property_.reflectedcolor_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Roughness = 15;
  if (has_roughness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *Property_.roughness_, target);
  }

  // optional .atom.proto.materials.TexturedParameter CosinePower = 16;
  if (has_cosinepower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *Property_.cosinepower_, target);
  }

  // optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
  if (has_highlightsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *Property_.highlightsize_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Whiteness = 18;
  if (has_whiteness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *Property_.whiteness_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
  if (has_eccentricity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *Property_.eccentricity_, target);
  }

  // optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
  if (has_specularrolloff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *Property_.specularrolloff_, target);
  }

  // optional .atom.proto.materials.TexturedParameter Angle = 21;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *Property_.angle_, target);
  }

  // optional .atom.proto.materials.TexturedParameter SpreadX = 22;
  if (has_spreadx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *Property_.spreadx_, target);
  }

  // optional .atom.proto.materials.TexturedParameter SpreadY = 23;
  if (has_spready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, *Property_.spready_, target);
  }

  // optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
  if (has_fresnelindex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, *Property_.fresnelindex_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:atom.proto.materials.MaterialChanged)
  return target;
}

int MaterialChanged::ByteSize() const {
  int total_size = 0;

  // optional string MaterialName = 1;
  if (this->materialname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->materialname());
  }

  switch (Property_case()) {
    // optional .atom.proto.materials.TexturedParameter Color = 2;
    case kColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.color_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Transparency = 3;
    case kTransparency: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.transparency_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
    case kAmbientColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.ambientcolor_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Incandescence = 5;
    case kIncandescence: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.incandescence_);
      break;
    }
    // optional string BumpMap = 6;
    case kBumpMap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bumpmap());
      break;
    }
    // optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
    case kDiffuseAmount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.diffuseamount_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Translucence = 8;
    case kTranslucence: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.translucence_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
    case kTranslucenceDepth: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.translucencedepth_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
    case kTranslucenceFocus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.translucencefocus_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
    case kGlowIntensity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.glowintensity_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
    case kSpecularColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.specularcolor_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
    case kReflectivity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.reflectivity_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
    case kReflectedColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.reflectedcolor_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Roughness = 15;
    case kRoughness: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.roughness_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter CosinePower = 16;
    case kCosinePower: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.cosinepower_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
    case kHighlightSize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.highlightsize_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Whiteness = 18;
    case kWhiteness: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.whiteness_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
    case kEccentricity: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.eccentricity_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
    case kSpecularRollOff: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.specularrolloff_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter Angle = 21;
    case kAngle: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.angle_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter SpreadX = 22;
    case kSpreadX: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.spreadx_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter SpreadY = 23;
    case kSpreadY: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.spready_);
      break;
    }
    // optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
    case kFresnelIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Property_.fresnelindex_);
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialChanged::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MaterialChanged* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialChanged>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialChanged::MergeFrom(const MaterialChanged& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Property_case()) {
    case kColor: {
      mutable_color()->::atom::proto::materials::TexturedParameter::MergeFrom(from.color());
      break;
    }
    case kTransparency: {
      mutable_transparency()->::atom::proto::materials::TexturedParameter::MergeFrom(from.transparency());
      break;
    }
    case kAmbientColor: {
      mutable_ambientcolor()->::atom::proto::materials::TexturedParameter::MergeFrom(from.ambientcolor());
      break;
    }
    case kIncandescence: {
      mutable_incandescence()->::atom::proto::materials::TexturedParameter::MergeFrom(from.incandescence());
      break;
    }
    case kBumpMap: {
      set_bumpmap(from.bumpmap());
      break;
    }
    case kDiffuseAmount: {
      mutable_diffuseamount()->::atom::proto::materials::TexturedParameter::MergeFrom(from.diffuseamount());
      break;
    }
    case kTranslucence: {
      mutable_translucence()->::atom::proto::materials::TexturedParameter::MergeFrom(from.translucence());
      break;
    }
    case kTranslucenceDepth: {
      mutable_translucencedepth()->::atom::proto::materials::TexturedParameter::MergeFrom(from.translucencedepth());
      break;
    }
    case kTranslucenceFocus: {
      mutable_translucencefocus()->::atom::proto::materials::TexturedParameter::MergeFrom(from.translucencefocus());
      break;
    }
    case kGlowIntensity: {
      mutable_glowintensity()->::atom::proto::materials::TexturedParameter::MergeFrom(from.glowintensity());
      break;
    }
    case kSpecularColor: {
      mutable_specularcolor()->::atom::proto::materials::TexturedParameter::MergeFrom(from.specularcolor());
      break;
    }
    case kReflectivity: {
      mutable_reflectivity()->::atom::proto::materials::TexturedParameter::MergeFrom(from.reflectivity());
      break;
    }
    case kReflectedColor: {
      mutable_reflectedcolor()->::atom::proto::materials::TexturedParameter::MergeFrom(from.reflectedcolor());
      break;
    }
    case kRoughness: {
      mutable_roughness()->::atom::proto::materials::TexturedParameter::MergeFrom(from.roughness());
      break;
    }
    case kCosinePower: {
      mutable_cosinepower()->::atom::proto::materials::TexturedParameter::MergeFrom(from.cosinepower());
      break;
    }
    case kHighlightSize: {
      mutable_highlightsize()->::atom::proto::materials::TexturedParameter::MergeFrom(from.highlightsize());
      break;
    }
    case kWhiteness: {
      mutable_whiteness()->::atom::proto::materials::TexturedParameter::MergeFrom(from.whiteness());
      break;
    }
    case kEccentricity: {
      mutable_eccentricity()->::atom::proto::materials::TexturedParameter::MergeFrom(from.eccentricity());
      break;
    }
    case kSpecularRollOff: {
      mutable_specularrolloff()->::atom::proto::materials::TexturedParameter::MergeFrom(from.specularrolloff());
      break;
    }
    case kAngle: {
      mutable_angle()->::atom::proto::materials::TexturedParameter::MergeFrom(from.angle());
      break;
    }
    case kSpreadX: {
      mutable_spreadx()->::atom::proto::materials::TexturedParameter::MergeFrom(from.spreadx());
      break;
    }
    case kSpreadY: {
      mutable_spready()->::atom::proto::materials::TexturedParameter::MergeFrom(from.spready());
      break;
    }
    case kFresnelIndex: {
      mutable_fresnelindex()->::atom::proto::materials::TexturedParameter::MergeFrom(from.fresnelindex());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  if (from.materialname().size() > 0) {

    materialname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.materialname_);
  }
}

void MaterialChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialChanged::CopyFrom(const MaterialChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialChanged::IsInitialized() const {

  return true;
}

void MaterialChanged::Swap(MaterialChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialChanged::InternalSwap(MaterialChanged* other) {
  materialname_.Swap(&other->materialname_);
  std::swap(Property_, other->Property_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialChanged_descriptor_;
  metadata.reflection = MaterialChanged_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialChanged

// optional string MaterialName = 1;
void MaterialChanged::clear_materialname() {
  materialname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MaterialChanged::materialname() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.MaterialName)
  return materialname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MaterialChanged::set_materialname(const ::std::string& value) {
  
  materialname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.MaterialChanged.MaterialName)
}
 void MaterialChanged::set_materialname(const char* value) {
  
  materialname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.MaterialChanged.MaterialName)
}
 void MaterialChanged::set_materialname(const char* value, size_t size) {
  
  materialname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.MaterialChanged.MaterialName)
}
 ::std::string* MaterialChanged::mutable_materialname() {
  
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.MaterialName)
  return materialname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MaterialChanged::release_materialname() {
  
  return materialname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MaterialChanged::set_allocated_materialname(::std::string* materialname) {
  if (materialname != NULL) {
    
  } else {
    
  }
  materialname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), materialname);
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.MaterialName)
}

// optional .atom.proto.materials.TexturedParameter Color = 2;
bool MaterialChanged::has_color() const {
  return Property_case() == kColor;
}
void MaterialChanged::set_has_color() {
  _oneof_case_[0] = kColor;
}
void MaterialChanged::clear_color() {
  if (has_color()) {
    delete Property_.color_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::color() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Color)
  return has_color()
      ? *Property_.color_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_color() {
  if (!has_color()) {
    clear_Property();
    set_has_color();
    Property_.color_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Color)
  return Property_.color_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_color() {
  if (has_color()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.color_;
    Property_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_color(::atom::proto::materials::TexturedParameter* color) {
  clear_Property();
  if (color) {
    set_has_color();
    Property_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Color)
}

// optional .atom.proto.materials.TexturedParameter Transparency = 3;
bool MaterialChanged::has_transparency() const {
  return Property_case() == kTransparency;
}
void MaterialChanged::set_has_transparency() {
  _oneof_case_[0] = kTransparency;
}
void MaterialChanged::clear_transparency() {
  if (has_transparency()) {
    delete Property_.transparency_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::transparency() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Transparency)
  return has_transparency()
      ? *Property_.transparency_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_transparency() {
  if (!has_transparency()) {
    clear_Property();
    set_has_transparency();
    Property_.transparency_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Transparency)
  return Property_.transparency_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_transparency() {
  if (has_transparency()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.transparency_;
    Property_.transparency_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_transparency(::atom::proto::materials::TexturedParameter* transparency) {
  clear_Property();
  if (transparency) {
    set_has_transparency();
    Property_.transparency_ = transparency;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Transparency)
}

// optional .atom.proto.materials.TexturedParameter AmbientColor = 4;
bool MaterialChanged::has_ambientcolor() const {
  return Property_case() == kAmbientColor;
}
void MaterialChanged::set_has_ambientcolor() {
  _oneof_case_[0] = kAmbientColor;
}
void MaterialChanged::clear_ambientcolor() {
  if (has_ambientcolor()) {
    delete Property_.ambientcolor_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::ambientcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.AmbientColor)
  return has_ambientcolor()
      ? *Property_.ambientcolor_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_ambientcolor() {
  if (!has_ambientcolor()) {
    clear_Property();
    set_has_ambientcolor();
    Property_.ambientcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.AmbientColor)
  return Property_.ambientcolor_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_ambientcolor() {
  if (has_ambientcolor()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.ambientcolor_;
    Property_.ambientcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_ambientcolor(::atom::proto::materials::TexturedParameter* ambientcolor) {
  clear_Property();
  if (ambientcolor) {
    set_has_ambientcolor();
    Property_.ambientcolor_ = ambientcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.AmbientColor)
}

// optional .atom.proto.materials.TexturedParameter Incandescence = 5;
bool MaterialChanged::has_incandescence() const {
  return Property_case() == kIncandescence;
}
void MaterialChanged::set_has_incandescence() {
  _oneof_case_[0] = kIncandescence;
}
void MaterialChanged::clear_incandescence() {
  if (has_incandescence()) {
    delete Property_.incandescence_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::incandescence() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Incandescence)
  return has_incandescence()
      ? *Property_.incandescence_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_incandescence() {
  if (!has_incandescence()) {
    clear_Property();
    set_has_incandescence();
    Property_.incandescence_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Incandescence)
  return Property_.incandescence_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_incandescence() {
  if (has_incandescence()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.incandescence_;
    Property_.incandescence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_incandescence(::atom::proto::materials::TexturedParameter* incandescence) {
  clear_Property();
  if (incandescence) {
    set_has_incandescence();
    Property_.incandescence_ = incandescence;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Incandescence)
}

// optional string BumpMap = 6;
bool MaterialChanged::has_bumpmap() const {
  return Property_case() == kBumpMap;
}
void MaterialChanged::set_has_bumpmap() {
  _oneof_case_[0] = kBumpMap;
}
void MaterialChanged::clear_bumpmap() {
  if (has_bumpmap()) {
    Property_.bumpmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Property();
  }
}
 const ::std::string& MaterialChanged::bumpmap() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.BumpMap)
  if (has_bumpmap()) {
    return Property_.bumpmap_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void MaterialChanged::set_bumpmap(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:atom.proto.materials.MaterialChanged.BumpMap)
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Property_.bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atom.proto.materials.MaterialChanged.BumpMap)
}
 void MaterialChanged::set_bumpmap(const char* value) {
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Property_.bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atom.proto.materials.MaterialChanged.BumpMap)
}
 void MaterialChanged::set_bumpmap(const char* value, size_t size) {
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Property_.bumpmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atom.proto.materials.MaterialChanged.BumpMap)
}
 ::std::string* MaterialChanged::mutable_bumpmap() {
  if (!has_bumpmap()) {
    clear_Property();
    set_has_bumpmap();
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.BumpMap)
  return Property_.bumpmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MaterialChanged::release_bumpmap() {
  if (has_bumpmap()) {
    clear_has_Property();
    return Property_.bumpmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void MaterialChanged::set_allocated_bumpmap(::std::string* bumpmap) {
  if (!has_bumpmap()) {
    Property_.bumpmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Property();
  if (bumpmap != NULL) {
    set_has_bumpmap();
    Property_.bumpmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bumpmap);
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.BumpMap)
}

// optional .atom.proto.materials.TexturedParameter DiffuseAmount = 7;
bool MaterialChanged::has_diffuseamount() const {
  return Property_case() == kDiffuseAmount;
}
void MaterialChanged::set_has_diffuseamount() {
  _oneof_case_[0] = kDiffuseAmount;
}
void MaterialChanged::clear_diffuseamount() {
  if (has_diffuseamount()) {
    delete Property_.diffuseamount_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::diffuseamount() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.DiffuseAmount)
  return has_diffuseamount()
      ? *Property_.diffuseamount_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_diffuseamount() {
  if (!has_diffuseamount()) {
    clear_Property();
    set_has_diffuseamount();
    Property_.diffuseamount_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.DiffuseAmount)
  return Property_.diffuseamount_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_diffuseamount() {
  if (has_diffuseamount()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.diffuseamount_;
    Property_.diffuseamount_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_diffuseamount(::atom::proto::materials::TexturedParameter* diffuseamount) {
  clear_Property();
  if (diffuseamount) {
    set_has_diffuseamount();
    Property_.diffuseamount_ = diffuseamount;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.DiffuseAmount)
}

// optional .atom.proto.materials.TexturedParameter Translucence = 8;
bool MaterialChanged::has_translucence() const {
  return Property_case() == kTranslucence;
}
void MaterialChanged::set_has_translucence() {
  _oneof_case_[0] = kTranslucence;
}
void MaterialChanged::clear_translucence() {
  if (has_translucence()) {
    delete Property_.translucence_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::translucence() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Translucence)
  return has_translucence()
      ? *Property_.translucence_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_translucence() {
  if (!has_translucence()) {
    clear_Property();
    set_has_translucence();
    Property_.translucence_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Translucence)
  return Property_.translucence_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_translucence() {
  if (has_translucence()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.translucence_;
    Property_.translucence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_translucence(::atom::proto::materials::TexturedParameter* translucence) {
  clear_Property();
  if (translucence) {
    set_has_translucence();
    Property_.translucence_ = translucence;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Translucence)
}

// optional .atom.proto.materials.TexturedParameter TranslucenceDepth = 9;
bool MaterialChanged::has_translucencedepth() const {
  return Property_case() == kTranslucenceDepth;
}
void MaterialChanged::set_has_translucencedepth() {
  _oneof_case_[0] = kTranslucenceDepth;
}
void MaterialChanged::clear_translucencedepth() {
  if (has_translucencedepth()) {
    delete Property_.translucencedepth_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::translucencedepth() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.TranslucenceDepth)
  return has_translucencedepth()
      ? *Property_.translucencedepth_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_translucencedepth() {
  if (!has_translucencedepth()) {
    clear_Property();
    set_has_translucencedepth();
    Property_.translucencedepth_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.TranslucenceDepth)
  return Property_.translucencedepth_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_translucencedepth() {
  if (has_translucencedepth()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.translucencedepth_;
    Property_.translucencedepth_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_translucencedepth(::atom::proto::materials::TexturedParameter* translucencedepth) {
  clear_Property();
  if (translucencedepth) {
    set_has_translucencedepth();
    Property_.translucencedepth_ = translucencedepth;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.TranslucenceDepth)
}

// optional .atom.proto.materials.TexturedParameter TranslucenceFocus = 10;
bool MaterialChanged::has_translucencefocus() const {
  return Property_case() == kTranslucenceFocus;
}
void MaterialChanged::set_has_translucencefocus() {
  _oneof_case_[0] = kTranslucenceFocus;
}
void MaterialChanged::clear_translucencefocus() {
  if (has_translucencefocus()) {
    delete Property_.translucencefocus_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::translucencefocus() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.TranslucenceFocus)
  return has_translucencefocus()
      ? *Property_.translucencefocus_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_translucencefocus() {
  if (!has_translucencefocus()) {
    clear_Property();
    set_has_translucencefocus();
    Property_.translucencefocus_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.TranslucenceFocus)
  return Property_.translucencefocus_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_translucencefocus() {
  if (has_translucencefocus()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.translucencefocus_;
    Property_.translucencefocus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_translucencefocus(::atom::proto::materials::TexturedParameter* translucencefocus) {
  clear_Property();
  if (translucencefocus) {
    set_has_translucencefocus();
    Property_.translucencefocus_ = translucencefocus;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.TranslucenceFocus)
}

// optional .atom.proto.materials.TexturedParameter GlowIntensity = 11;
bool MaterialChanged::has_glowintensity() const {
  return Property_case() == kGlowIntensity;
}
void MaterialChanged::set_has_glowintensity() {
  _oneof_case_[0] = kGlowIntensity;
}
void MaterialChanged::clear_glowintensity() {
  if (has_glowintensity()) {
    delete Property_.glowintensity_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::glowintensity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.GlowIntensity)
  return has_glowintensity()
      ? *Property_.glowintensity_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_glowintensity() {
  if (!has_glowintensity()) {
    clear_Property();
    set_has_glowintensity();
    Property_.glowintensity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.GlowIntensity)
  return Property_.glowintensity_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_glowintensity() {
  if (has_glowintensity()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.glowintensity_;
    Property_.glowintensity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_glowintensity(::atom::proto::materials::TexturedParameter* glowintensity) {
  clear_Property();
  if (glowintensity) {
    set_has_glowintensity();
    Property_.glowintensity_ = glowintensity;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.GlowIntensity)
}

// optional .atom.proto.materials.TexturedParameter SpecularColor = 12;
bool MaterialChanged::has_specularcolor() const {
  return Property_case() == kSpecularColor;
}
void MaterialChanged::set_has_specularcolor() {
  _oneof_case_[0] = kSpecularColor;
}
void MaterialChanged::clear_specularcolor() {
  if (has_specularcolor()) {
    delete Property_.specularcolor_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::specularcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpecularColor)
  return has_specularcolor()
      ? *Property_.specularcolor_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_specularcolor() {
  if (!has_specularcolor()) {
    clear_Property();
    set_has_specularcolor();
    Property_.specularcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpecularColor)
  return Property_.specularcolor_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_specularcolor() {
  if (has_specularcolor()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.specularcolor_;
    Property_.specularcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_specularcolor(::atom::proto::materials::TexturedParameter* specularcolor) {
  clear_Property();
  if (specularcolor) {
    set_has_specularcolor();
    Property_.specularcolor_ = specularcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpecularColor)
}

// optional .atom.proto.materials.TexturedParameter Reflectivity = 13;
bool MaterialChanged::has_reflectivity() const {
  return Property_case() == kReflectivity;
}
void MaterialChanged::set_has_reflectivity() {
  _oneof_case_[0] = kReflectivity;
}
void MaterialChanged::clear_reflectivity() {
  if (has_reflectivity()) {
    delete Property_.reflectivity_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::reflectivity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Reflectivity)
  return has_reflectivity()
      ? *Property_.reflectivity_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_reflectivity() {
  if (!has_reflectivity()) {
    clear_Property();
    set_has_reflectivity();
    Property_.reflectivity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Reflectivity)
  return Property_.reflectivity_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_reflectivity() {
  if (has_reflectivity()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.reflectivity_;
    Property_.reflectivity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_reflectivity(::atom::proto::materials::TexturedParameter* reflectivity) {
  clear_Property();
  if (reflectivity) {
    set_has_reflectivity();
    Property_.reflectivity_ = reflectivity;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Reflectivity)
}

// optional .atom.proto.materials.TexturedParameter ReflectedColor = 14;
bool MaterialChanged::has_reflectedcolor() const {
  return Property_case() == kReflectedColor;
}
void MaterialChanged::set_has_reflectedcolor() {
  _oneof_case_[0] = kReflectedColor;
}
void MaterialChanged::clear_reflectedcolor() {
  if (has_reflectedcolor()) {
    delete Property_.reflectedcolor_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::reflectedcolor() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.ReflectedColor)
  return has_reflectedcolor()
      ? *Property_.reflectedcolor_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_reflectedcolor() {
  if (!has_reflectedcolor()) {
    clear_Property();
    set_has_reflectedcolor();
    Property_.reflectedcolor_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.ReflectedColor)
  return Property_.reflectedcolor_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_reflectedcolor() {
  if (has_reflectedcolor()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.reflectedcolor_;
    Property_.reflectedcolor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_reflectedcolor(::atom::proto::materials::TexturedParameter* reflectedcolor) {
  clear_Property();
  if (reflectedcolor) {
    set_has_reflectedcolor();
    Property_.reflectedcolor_ = reflectedcolor;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.ReflectedColor)
}

// optional .atom.proto.materials.TexturedParameter Roughness = 15;
bool MaterialChanged::has_roughness() const {
  return Property_case() == kRoughness;
}
void MaterialChanged::set_has_roughness() {
  _oneof_case_[0] = kRoughness;
}
void MaterialChanged::clear_roughness() {
  if (has_roughness()) {
    delete Property_.roughness_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::roughness() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Roughness)
  return has_roughness()
      ? *Property_.roughness_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_roughness() {
  if (!has_roughness()) {
    clear_Property();
    set_has_roughness();
    Property_.roughness_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Roughness)
  return Property_.roughness_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_roughness() {
  if (has_roughness()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.roughness_;
    Property_.roughness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_roughness(::atom::proto::materials::TexturedParameter* roughness) {
  clear_Property();
  if (roughness) {
    set_has_roughness();
    Property_.roughness_ = roughness;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Roughness)
}

// optional .atom.proto.materials.TexturedParameter CosinePower = 16;
bool MaterialChanged::has_cosinepower() const {
  return Property_case() == kCosinePower;
}
void MaterialChanged::set_has_cosinepower() {
  _oneof_case_[0] = kCosinePower;
}
void MaterialChanged::clear_cosinepower() {
  if (has_cosinepower()) {
    delete Property_.cosinepower_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::cosinepower() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.CosinePower)
  return has_cosinepower()
      ? *Property_.cosinepower_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_cosinepower() {
  if (!has_cosinepower()) {
    clear_Property();
    set_has_cosinepower();
    Property_.cosinepower_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.CosinePower)
  return Property_.cosinepower_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_cosinepower() {
  if (has_cosinepower()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.cosinepower_;
    Property_.cosinepower_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_cosinepower(::atom::proto::materials::TexturedParameter* cosinepower) {
  clear_Property();
  if (cosinepower) {
    set_has_cosinepower();
    Property_.cosinepower_ = cosinepower;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.CosinePower)
}

// optional .atom.proto.materials.TexturedParameter HighlightSize = 17;
bool MaterialChanged::has_highlightsize() const {
  return Property_case() == kHighlightSize;
}
void MaterialChanged::set_has_highlightsize() {
  _oneof_case_[0] = kHighlightSize;
}
void MaterialChanged::clear_highlightsize() {
  if (has_highlightsize()) {
    delete Property_.highlightsize_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::highlightsize() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.HighlightSize)
  return has_highlightsize()
      ? *Property_.highlightsize_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_highlightsize() {
  if (!has_highlightsize()) {
    clear_Property();
    set_has_highlightsize();
    Property_.highlightsize_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.HighlightSize)
  return Property_.highlightsize_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_highlightsize() {
  if (has_highlightsize()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.highlightsize_;
    Property_.highlightsize_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_highlightsize(::atom::proto::materials::TexturedParameter* highlightsize) {
  clear_Property();
  if (highlightsize) {
    set_has_highlightsize();
    Property_.highlightsize_ = highlightsize;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.HighlightSize)
}

// optional .atom.proto.materials.TexturedParameter Whiteness = 18;
bool MaterialChanged::has_whiteness() const {
  return Property_case() == kWhiteness;
}
void MaterialChanged::set_has_whiteness() {
  _oneof_case_[0] = kWhiteness;
}
void MaterialChanged::clear_whiteness() {
  if (has_whiteness()) {
    delete Property_.whiteness_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::whiteness() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Whiteness)
  return has_whiteness()
      ? *Property_.whiteness_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_whiteness() {
  if (!has_whiteness()) {
    clear_Property();
    set_has_whiteness();
    Property_.whiteness_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Whiteness)
  return Property_.whiteness_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_whiteness() {
  if (has_whiteness()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.whiteness_;
    Property_.whiteness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_whiteness(::atom::proto::materials::TexturedParameter* whiteness) {
  clear_Property();
  if (whiteness) {
    set_has_whiteness();
    Property_.whiteness_ = whiteness;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Whiteness)
}

// optional .atom.proto.materials.TexturedParameter Eccentricity = 19;
bool MaterialChanged::has_eccentricity() const {
  return Property_case() == kEccentricity;
}
void MaterialChanged::set_has_eccentricity() {
  _oneof_case_[0] = kEccentricity;
}
void MaterialChanged::clear_eccentricity() {
  if (has_eccentricity()) {
    delete Property_.eccentricity_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::eccentricity() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Eccentricity)
  return has_eccentricity()
      ? *Property_.eccentricity_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_eccentricity() {
  if (!has_eccentricity()) {
    clear_Property();
    set_has_eccentricity();
    Property_.eccentricity_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Eccentricity)
  return Property_.eccentricity_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_eccentricity() {
  if (has_eccentricity()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.eccentricity_;
    Property_.eccentricity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_eccentricity(::atom::proto::materials::TexturedParameter* eccentricity) {
  clear_Property();
  if (eccentricity) {
    set_has_eccentricity();
    Property_.eccentricity_ = eccentricity;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Eccentricity)
}

// optional .atom.proto.materials.TexturedParameter SpecularRollOff = 20;
bool MaterialChanged::has_specularrolloff() const {
  return Property_case() == kSpecularRollOff;
}
void MaterialChanged::set_has_specularrolloff() {
  _oneof_case_[0] = kSpecularRollOff;
}
void MaterialChanged::clear_specularrolloff() {
  if (has_specularrolloff()) {
    delete Property_.specularrolloff_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::specularrolloff() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpecularRollOff)
  return has_specularrolloff()
      ? *Property_.specularrolloff_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_specularrolloff() {
  if (!has_specularrolloff()) {
    clear_Property();
    set_has_specularrolloff();
    Property_.specularrolloff_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpecularRollOff)
  return Property_.specularrolloff_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_specularrolloff() {
  if (has_specularrolloff()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.specularrolloff_;
    Property_.specularrolloff_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_specularrolloff(::atom::proto::materials::TexturedParameter* specularrolloff) {
  clear_Property();
  if (specularrolloff) {
    set_has_specularrolloff();
    Property_.specularrolloff_ = specularrolloff;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpecularRollOff)
}

// optional .atom.proto.materials.TexturedParameter Angle = 21;
bool MaterialChanged::has_angle() const {
  return Property_case() == kAngle;
}
void MaterialChanged::set_has_angle() {
  _oneof_case_[0] = kAngle;
}
void MaterialChanged::clear_angle() {
  if (has_angle()) {
    delete Property_.angle_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::angle() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.Angle)
  return has_angle()
      ? *Property_.angle_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_angle() {
  if (!has_angle()) {
    clear_Property();
    set_has_angle();
    Property_.angle_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.Angle)
  return Property_.angle_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_angle() {
  if (has_angle()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.angle_;
    Property_.angle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_angle(::atom::proto::materials::TexturedParameter* angle) {
  clear_Property();
  if (angle) {
    set_has_angle();
    Property_.angle_ = angle;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.Angle)
}

// optional .atom.proto.materials.TexturedParameter SpreadX = 22;
bool MaterialChanged::has_spreadx() const {
  return Property_case() == kSpreadX;
}
void MaterialChanged::set_has_spreadx() {
  _oneof_case_[0] = kSpreadX;
}
void MaterialChanged::clear_spreadx() {
  if (has_spreadx()) {
    delete Property_.spreadx_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::spreadx() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpreadX)
  return has_spreadx()
      ? *Property_.spreadx_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_spreadx() {
  if (!has_spreadx()) {
    clear_Property();
    set_has_spreadx();
    Property_.spreadx_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpreadX)
  return Property_.spreadx_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_spreadx() {
  if (has_spreadx()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.spreadx_;
    Property_.spreadx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_spreadx(::atom::proto::materials::TexturedParameter* spreadx) {
  clear_Property();
  if (spreadx) {
    set_has_spreadx();
    Property_.spreadx_ = spreadx;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpreadX)
}

// optional .atom.proto.materials.TexturedParameter SpreadY = 23;
bool MaterialChanged::has_spready() const {
  return Property_case() == kSpreadY;
}
void MaterialChanged::set_has_spready() {
  _oneof_case_[0] = kSpreadY;
}
void MaterialChanged::clear_spready() {
  if (has_spready()) {
    delete Property_.spready_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::spready() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.SpreadY)
  return has_spready()
      ? *Property_.spready_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_spready() {
  if (!has_spready()) {
    clear_Property();
    set_has_spready();
    Property_.spready_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.SpreadY)
  return Property_.spready_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_spready() {
  if (has_spready()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.spready_;
    Property_.spready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_spready(::atom::proto::materials::TexturedParameter* spready) {
  clear_Property();
  if (spready) {
    set_has_spready();
    Property_.spready_ = spready;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.SpreadY)
}

// optional .atom.proto.materials.TexturedParameter FresnelIndex = 24;
bool MaterialChanged::has_fresnelindex() const {
  return Property_case() == kFresnelIndex;
}
void MaterialChanged::set_has_fresnelindex() {
  _oneof_case_[0] = kFresnelIndex;
}
void MaterialChanged::clear_fresnelindex() {
  if (has_fresnelindex()) {
    delete Property_.fresnelindex_;
    clear_has_Property();
  }
}
 const ::atom::proto::materials::TexturedParameter& MaterialChanged::fresnelindex() const {
  // @@protoc_insertion_point(field_get:atom.proto.materials.MaterialChanged.FresnelIndex)
  return has_fresnelindex()
      ? *Property_.fresnelindex_
      : ::atom::proto::materials::TexturedParameter::default_instance();
}
::atom::proto::materials::TexturedParameter* MaterialChanged::mutable_fresnelindex() {
  if (!has_fresnelindex()) {
    clear_Property();
    set_has_fresnelindex();
    Property_.fresnelindex_ = new ::atom::proto::materials::TexturedParameter;
  }
  // @@protoc_insertion_point(field_mutable:atom.proto.materials.MaterialChanged.FresnelIndex)
  return Property_.fresnelindex_;
}
::atom::proto::materials::TexturedParameter* MaterialChanged::release_fresnelindex() {
  if (has_fresnelindex()) {
    clear_has_Property();
    ::atom::proto::materials::TexturedParameter* temp = Property_.fresnelindex_;
    Property_.fresnelindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MaterialChanged::set_allocated_fresnelindex(::atom::proto::materials::TexturedParameter* fresnelindex) {
  clear_Property();
  if (fresnelindex) {
    set_has_fresnelindex();
    Property_.fresnelindex_ = fresnelindex;
  }
  // @@protoc_insertion_point(field_set_allocated:atom.proto.materials.MaterialChanged.FresnelIndex)
}

bool MaterialChanged::has_Property() const {
  return Property_case() != PROPERTY_NOT_SET;
}
void MaterialChanged::clear_has_Property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
MaterialChanged::PropertyCase MaterialChanged::Property_case() const {
  return MaterialChanged::PropertyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace materials
}  // namespace proto
}  // namespace atom

// @@protoc_insertion_point(global_scope)
